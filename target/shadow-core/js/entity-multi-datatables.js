
// Updates "Select all" control in a data table
//
function updateDataTableSelectAllCtrl(table){
   var $table             = table.table().node();
   var $chkbox_all        = $('tbody input[type="checkbox"]', $table);
   var $chkbox_checked    = $('tbody input[type="checkbox"]:checked', $table);
   var chkbox_select_all  = $('thead input[name="select_all"]', $table).get(0);

   // If none of the checkboxes are checked
   if($chkbox_checked.length === 0){
      chkbox_select_all.checked = false;
      if('indeterminate' in chkbox_select_all){
         chkbox_select_all.indeterminate = false;
      }

   // If all of the checkboxes are checked
   } else if ($chkbox_checked.length === $chkbox_all.length){
      chkbox_select_all.checked = true;
      if('indeterminate' in chkbox_select_all){
         chkbox_select_all.indeterminate = false;
      }

   // If some of the checkboxes are checked
   } else {
      chkbox_select_all.checked = true;
      if('indeterminate' in chkbox_select_all){
         chkbox_select_all.indeterminate = true;
      }
   }
}

$(document).ready(function (){


    var baseUrl = shadowcore_base_url.baseUrl;
   // Array holding selected row IDs
   var sb_currency_rows_selected = [];
   var sb_currencyTable =  $('#sb_currency-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_currency-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },

            { data: "symbol" },

            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="currency_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#currency_parent_params').length) {
                        parent_params = parent_params + $('#currency_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=currency&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="currency" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_currency_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_currency-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_currencyTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_currency_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_currency_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_currency_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_currencyTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_currency-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_currencyTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_currency-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_currency-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_currencyTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_currencyTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-currency-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_currency_rows_selected, function(index, rowId){

        $.each($('input[name="currency_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'currency_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#currency_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#currency_dependent_list_box').append($(
                '<div id="currency_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="currency" ' + 
                        'data-entity-id="' + rowId + '" class="badge currency_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#currency_dependent_list_box').on('click', '.currency_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="currency_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#currency_dependent_list_box').find('#currency_list_item_' + entityId).remove();

      
   });
   var sb_loctype_rows_selected = [];
   var sb_loctypeTable =  $('#sb_loctype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_loctype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },

            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="locationtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#locationtype_parent_params').length) {
                        parent_params = parent_params + $('#locationtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=locationtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="locationtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_loctype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_loctype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_loctypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_loctype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_loctype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_loctype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_loctypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_loctype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_loctypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_loctype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_loctype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_loctypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_loctypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-locationtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_loctype_rows_selected, function(index, rowId){

        $.each($('input[name="locationtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'locationtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#locationtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#locationtype_dependent_list_box').append($(
                '<div id="locationtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="locationtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge locationtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#locationtype_dependent_list_box').on('click', '.locationtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="locationtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#locationtype_dependent_list_box').find('#locationtype_list_item_' + entityId).remove();

      
   });
   var sb_location_rows_selected = [];
   var sb_locationTable =  $('#sb_location-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_location-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },


            { data: "location_type_txt" },

            { data: "location_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="location_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#location_parent_params').length) {
                        parent_params = parent_params + $('#location_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=location&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="location" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_location_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_location-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_locationTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_location_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_location_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_location_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_locationTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_location-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_locationTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_location-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_location-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_locationTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_locationTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-location-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_location_rows_selected, function(index, rowId){

        $.each($('input[name="location_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'location_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#location_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#location_dependent_list_box').append($(
                '<div id="location_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="location" ' + 
                        'data-entity-id="' + rowId + '" class="badge location_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#location_dependent_list_box').on('click', '.location_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="location_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#location_dependent_list_box').find('#location_list_item_' + entityId).remove();

      
   });
   var sb_business_rows_selected = [];
   var sb_businessTable =  $('#sb_business-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_business-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },


            { data: "currency_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="business_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#business_parent_params').length) {
                        parent_params = parent_params + $('#business_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=business&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="business" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_business_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_business-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_businessTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_business_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_business_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_business_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_businessTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_business-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_businessTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_business-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_business-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_businessTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_businessTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-business-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_business_rows_selected, function(index, rowId){

        $.each($('input[name="business_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'business_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#business_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#business_dependent_list_box').append($(
                '<div id="business_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="business" ' + 
                        'data-entity-id="' + rowId + '" class="badge business_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#business_dependent_list_box').on('click', '.business_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="business_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#business_dependent_list_box').find('#business_list_item_' + entityId).remove();

      
   });
   var sb_businessunit_rows_selected = [];
   var sb_businessunitTable =  $('#sb_businessunit-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_businessunit-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "currency_txt" },
            { data: "name" },

            { data: "address_1" },

            { data: "address_2" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="businessunit_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#businessunit_parent_params').length) {
                        parent_params = parent_params + $('#businessunit_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=businessunit&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="businessunit" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_businessunit_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_businessunit-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_businessunitTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_businessunit_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_businessunit_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_businessunit_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_businessunitTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_businessunit-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_businessunitTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_businessunit-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_businessunit-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_businessunitTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_businessunitTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-businessunit-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_businessunit_rows_selected, function(index, rowId){

        $.each($('input[name="businessunit_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'businessunit_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#businessunit_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#businessunit_dependent_list_box').append($(
                '<div id="businessunit_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="businessunit" ' + 
                        'data-entity-id="' + rowId + '" class="badge businessunit_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#businessunit_dependent_list_box').on('click', '.businessunit_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="businessunit_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#businessunit_dependent_list_box').find('#businessunit_list_item_' + entityId).remove();

      
   });
   var sb_partycat_rows_selected = [];
   var sb_partycatTable =  $('#sb_partycat-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_partycat-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partycategory_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partycategory_parent_params').length) {
                        parent_params = parent_params + $('#partycategory_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partycategory&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partycategory" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_partycat_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_partycat-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_partycatTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_partycat_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_partycat_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_partycat_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partycatTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_partycat-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_partycatTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_partycat-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_partycat-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_partycatTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partycatTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partycategory-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_partycat_rows_selected, function(index, rowId){

        $.each($('input[name="partycategory_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partycategory_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partycategory_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partycategory_dependent_list_box').append($(
                '<div id="partycategory_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partycategory" ' + 
                        'data-entity-id="' + rowId + '" class="badge partycategory_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partycategory_dependent_list_box').on('click', '.partycategory_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partycategory_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partycategory_dependent_list_box').find('#partycategory_list_item_' + entityId).remove();

      
   });
   var sb_partytype_rows_selected = [];
   var sb_partytypeTable =  $('#sb_partytype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_partytype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "party_category_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partytype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partytype_parent_params').length) {
                        parent_params = parent_params + $('#partytype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partytype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partytype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_partytype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_partytype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_partytypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_partytype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_partytype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_partytype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partytypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_partytype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_partytypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_partytype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_partytype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_partytypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partytypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partytype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_partytype_rows_selected, function(index, rowId){

        $.each($('input[name="partytype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partytype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partytype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partytype_dependent_list_box').append($(
                '<div id="partytype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partytype" ' + 
                        'data-entity-id="' + rowId + '" class="badge partytype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partytype_dependent_list_box').on('click', '.partytype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partytype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partytype_dependent_list_box').find('#partytype_list_item_' + entityId).remove();

      
   });
   var sb_roletype_rows_selected = [];
   var sb_roletypeTable =  $('#sb_roletype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_roletype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="roletype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#roletype_parent_params').length) {
                        parent_params = parent_params + $('#roletype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=roletype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="roletype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_roletype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_roletype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_roletypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_roletype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_roletype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_roletype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_roletypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_roletype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_roletypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_roletype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_roletype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_roletypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_roletypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-roletype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_roletype_rows_selected, function(index, rowId){

        $.each($('input[name="roletype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'roletype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#roletype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#roletype_dependent_list_box').append($(
                '<div id="roletype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="roletype" ' + 
                        'data-entity-id="' + rowId + '" class="badge roletype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#roletype_dependent_list_box').on('click', '.roletype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="roletype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#roletype_dependent_list_box').find('#roletype_list_item_' + entityId).remove();

      
   });
   var sb_party_rows_selected = [];
   var sb_partyTable =  $('#sb_party-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_party-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "party_type_txt" },
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="party_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#party_parent_params').length) {
                        parent_params = parent_params + $('#party_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=party&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="party" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_party_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_party-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_partyTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_party_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_party_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_party_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_party-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_partyTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_party-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_party-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_partyTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-party-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_party_rows_selected, function(index, rowId){

        $.each($('input[name="party_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'party_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#party_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#party_dependent_list_box').append($(
                '<div id="party_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="party" ' + 
                        'data-entity-id="' + rowId + '" class="badge party_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#party_dependent_list_box').on('click', '.party_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="party_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#party_dependent_list_box').find('#party_list_item_' + entityId).remove();

      
   });
   var sb_partyrole_rows_selected = [];
   var sb_partyroleTable =  $('#sb_partyrole-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_partyrole-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "party_txt" },

            { data: "parent_prole_txt" },

            { data: "role_txt" },

            { data: "parent_unit_txt" },
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partyrole_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partyrole_parent_params').length) {
                        parent_params = parent_params + $('#partyrole_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partyrole&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partyrole" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_partyrole_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_partyrole-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_partyroleTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_partyrole_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_partyrole_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_partyrole_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyroleTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_partyrole-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_partyroleTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_partyrole-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_partyrole-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_partyroleTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyroleTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partyrole-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_partyrole_rows_selected, function(index, rowId){

        $.each($('input[name="partyrole_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partyrole_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partyrole_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partyrole_dependent_list_box').append($(
                '<div id="partyrole_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partyrole" ' + 
                        'data-entity-id="' + rowId + '" class="badge partyrole_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partyrole_dependent_list_box').on('click', '.partyrole_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partyrole_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partyrole_dependent_list_box').find('#partyrole_list_item_' + entityId).remove();

      
   });
   var sb_reltype_rows_selected = [];
   var sb_reltypeTable =  $('#sb_reltype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_reltype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="relationshiptype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#relationshiptype_parent_params').length) {
                        parent_params = parent_params + $('#relationshiptype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=relationshiptype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="relationshiptype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_reltype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_reltype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_reltypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_reltype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_reltype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_reltype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_reltypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_reltype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_reltypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_reltype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_reltype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_reltypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_reltypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-relationshiptype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_reltype_rows_selected, function(index, rowId){

        $.each($('input[name="relationshiptype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'relationshiptype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#relationshiptype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#relationshiptype_dependent_list_box').append($(
                '<div id="relationshiptype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="relationshiptype" ' + 
                        'data-entity-id="' + rowId + '" class="badge relationshiptype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#relationshiptype_dependent_list_box').on('click', '.relationshiptype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="relationshiptype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#relationshiptype_dependent_list_box').find('#relationshiptype_list_item_' + entityId).remove();

      
   });
   var sb_relstatus_rows_selected = [];
   var sb_relstatusTable =  $('#sb_relstatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_relstatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="relationshipstatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#relationshipstatus_parent_params').length) {
                        parent_params = parent_params + $('#relationshipstatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=relationshipstatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="relationshipstatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_relstatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_relstatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_relstatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_relstatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_relstatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_relstatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_relstatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_relstatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_relstatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_relstatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_relstatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_relstatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_relstatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-relationshipstatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_relstatus_rows_selected, function(index, rowId){

        $.each($('input[name="relationshipstatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'relationshipstatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#relationshipstatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#relationshipstatus_dependent_list_box').append($(
                '<div id="relationshipstatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="relationshipstatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge relationshipstatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#relationshipstatus_dependent_list_box').on('click', '.relationshipstatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="relationshipstatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#relationshipstatus_dependent_list_box').find('#relationshipstatus_list_item_' + entityId).remove();

      
   });
   var sb_partyrel_rows_selected = [];
   var sb_partyrelTable =  $('#sb_partyrel-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_partyrel-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "rel_type_txt" },

            { data: "from_role_txt" },

            { data: "to_role_txt" },

            { data: "status_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partyrelationship_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partyrelationship_parent_params').length) {
                        parent_params = parent_params + $('#partyrelationship_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partyrelationship&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partyrelationship" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_partyrel_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_partyrel-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_partyrelTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_partyrel_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_partyrel_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_partyrel_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyrelTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_partyrel-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_partyrelTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_partyrel-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_partyrel-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_partyrelTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyrelTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partyrelationship-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_partyrel_rows_selected, function(index, rowId){

        $.each($('input[name="partyrelationship_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partyrelationship_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partyrelationship_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partyrelationship_dependent_list_box').append($(
                '<div id="partyrelationship_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partyrelationship" ' + 
                        'data-entity-id="' + rowId + '" class="badge partyrelationship_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partyrelationship_dependent_list_box').on('click', '.partyrelationship_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partyrelationship_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partyrelationship_dependent_list_box').find('#partyrelationship_list_item_' + entityId).remove();

      
   });
   var sb_partygroup_rows_selected = [];
   var sb_partygroupTable =  $('#sb_partygroup-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_partygroup-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "business_unit_txt" },
            { data: "name" },

            { data: "pin" },

            { data: "description" },

            { data: "date_created" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partygroup_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partygroup_parent_params').length) {
                        parent_params = parent_params + $('#partygroup_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partygroup&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partygroup" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_partygroup_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_partygroup-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_partygroupTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_partygroup_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_partygroup_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_partygroup_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partygroupTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_partygroup-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_partygroupTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_partygroup-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_partygroup-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_partygroupTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partygroupTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partygroup-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_partygroup_rows_selected, function(index, rowId){

        $.each($('input[name="partygroup_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partygroup_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partygroup_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partygroup_dependent_list_box').append($(
                '<div id="partygroup_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partygroup" ' + 
                        'data-entity-id="' + rowId + '" class="badge partygroup_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partygroup_dependent_list_box').on('click', '.partygroup_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partygroup_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partygroup_dependent_list_box').find('#partygroup_list_item_' + entityId).remove();

      
   });
   var sb_person_rows_selected = [];
   var sb_personTable =  $('#sb_person-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_person-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "business_unit_txt" },
            { data: "first_name" },

            { data: "last_name" },

            { data: "gender" },

            { data: "date_of_birth" },

            { data: "id_number" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="person_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#person_parent_params').length) {
                        parent_params = parent_params + $('#person_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=person&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="person" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_person_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_person-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_personTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_person_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_person_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_person_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_personTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_person-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_personTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_person-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_person-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_personTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_personTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-person-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_person_rows_selected, function(index, rowId){

        $.each($('input[name="person_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'person_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#person_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#person_dependent_list_box').append($(
                '<div id="person_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="person" ' + 
                        'data-entity-id="' + rowId + '" class="badge person_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#person_dependent_list_box').on('click', '.person_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="person_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#person_dependent_list_box').find('#person_list_item_' + entityId).remove();

      
   });
   var sb_partyprofile_rows_selected = [];
   var sb_partyprofileTable =  $('#sb_partyprofile-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_partyprofile-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "party_txt" },

            { data: "default_unit_txt" },

            { data: "business_unit_txt" },
            { data: "name" },

            { data: "display_name" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partyprofile_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partyprofile_parent_params').length) {
                        parent_params = parent_params + $('#partyprofile_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partyprofile&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partyprofile" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_partyprofile_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_partyprofile-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_partyprofileTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_partyprofile_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_partyprofile_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_partyprofile_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyprofileTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_partyprofile-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_partyprofileTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_partyprofile-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_partyprofile-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_partyprofileTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyprofileTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partyprofile-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_partyprofile_rows_selected, function(index, rowId){

        $.each($('input[name="partyprofile_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partyprofile_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partyprofile_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partyprofile_dependent_list_box').append($(
                '<div id="partyprofile_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partyprofile" ' + 
                        'data-entity-id="' + rowId + '" class="badge partyprofile_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partyprofile_dependent_list_box').on('click', '.partyprofile_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partyprofile_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partyprofile_dependent_list_box').find('#partyprofile_list_item_' + entityId).remove();

      
   });
   var sb_partyaddress_rows_selected = [];
   var sb_partyaddressTable =  $('#sb_partyaddress-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_partyaddress-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "address_2" },


            { data: "location_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partyaddress_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partyaddress_parent_params').length) {
                        parent_params = parent_params + $('#partyaddress_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partyaddress&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partyaddress" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_partyaddress_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_partyaddress-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_partyaddressTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_partyaddress_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_partyaddress_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_partyaddress_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyaddressTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_partyaddress-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_partyaddressTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_partyaddress-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_partyaddress-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_partyaddressTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyaddressTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partyaddress-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_partyaddress_rows_selected, function(index, rowId){

        $.each($('input[name="partyaddress_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partyaddress_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partyaddress_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partyaddress_dependent_list_box').append($(
                '<div id="partyaddress_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partyaddress" ' + 
                        'data-entity-id="' + rowId + '" class="badge partyaddress_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partyaddress_dependent_list_box').on('click', '.partyaddress_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partyaddress_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partyaddress_dependent_list_box').find('#partyaddress_list_item_' + entityId).remove();

      
   });
   var sb_partyfiles_rows_selected = [];
   var sb_partyfilesTable =  $('#sb_partyfiles-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_partyfiles-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

            { data: "file_type" },

            { data: "file_url" },

            { data: "file_size" },

            { data: "mime_type" },

            { data: "uploaded_date" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partyfiles_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partyfiles_parent_params').length) {
                        parent_params = parent_params + $('#partyfiles_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partyfiles&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partyfiles" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_partyfiles_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_partyfiles-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_partyfilesTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_partyfiles_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_partyfiles_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_partyfiles_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyfilesTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_partyfiles-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_partyfilesTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_partyfiles-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_partyfiles-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_partyfilesTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyfilesTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partyfiles-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_partyfiles_rows_selected, function(index, rowId){

        $.each($('input[name="partyfiles_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partyfiles_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partyfiles_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partyfiles_dependent_list_box').append($(
                '<div id="partyfiles_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partyfiles" ' + 
                        'data-entity-id="' + rowId + '" class="badge partyfiles_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partyfiles_dependent_list_box').on('click', '.partyfiles_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partyfiles_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partyfiles_dependent_list_box').find('#partyfiles_list_item_' + entityId).remove();

      
   });
   var sb_invitestatus_rows_selected = [];
   var sb_invitestatusTable =  $('#sb_invitestatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_invitestatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="userinvitestatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#userinvitestatus_parent_params').length) {
                        parent_params = parent_params + $('#userinvitestatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=userinvitestatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="userinvitestatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_invitestatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_invitestatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_invitestatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_invitestatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_invitestatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_invitestatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invitestatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_invitestatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_invitestatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_invitestatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_invitestatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_invitestatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invitestatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-userinvitestatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_invitestatus_rows_selected, function(index, rowId){

        $.each($('input[name="userinvitestatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'userinvitestatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#userinvitestatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#userinvitestatus_dependent_list_box').append($(
                '<div id="userinvitestatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="userinvitestatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge userinvitestatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#userinvitestatus_dependent_list_box').on('click', '.userinvitestatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="userinvitestatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#userinvitestatus_dependent_list_box').find('#userinvitestatus_list_item_' + entityId).remove();

      
   });
   var sb_userinvite_rows_selected = [];
   var sb_userinviteTable =  $('#sb_userinvite-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_userinvite-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "status_txt" },
            { data: "first_name" },

            { data: "last_name" },

            { data: "user_email" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="userinvite_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#userinvite_parent_params').length) {
                        parent_params = parent_params + $('#userinvite_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=userinvite&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="userinvite" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_userinvite_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_userinvite-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_userinviteTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_userinvite_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_userinvite_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_userinvite_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_userinviteTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_userinvite-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_userinviteTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_userinvite-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_userinvite-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_userinviteTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_userinviteTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-userinvite-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_userinvite_rows_selected, function(index, rowId){

        $.each($('input[name="userinvite_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'userinvite_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#userinvite_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#userinvite_dependent_list_box').append($(
                '<div id="userinvite_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="userinvite" ' + 
                        'data-entity-id="' + rowId + '" class="badge userinvite_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#userinvite_dependent_list_box').on('click', '.userinvite_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="userinvite_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#userinvite_dependent_list_box').find('#userinvite_list_item_' + entityId).remove();

      
   });
   var sb_businesscat_rows_selected = [];
   var sb_businesscatTable =  $('#sb_businesscat-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_businesscat-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="businesscategory_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#businesscategory_parent_params').length) {
                        parent_params = parent_params + $('#businesscategory_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=businesscategory&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="businesscategory" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_businesscat_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_businesscat-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_businesscatTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_businesscat_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_businesscat_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_businesscat_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_businesscatTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_businesscat-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_businesscatTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_businesscat-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_businesscat-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_businesscatTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_businesscatTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-businesscategory-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_businesscat_rows_selected, function(index, rowId){

        $.each($('input[name="businesscategory_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'businesscategory_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#businesscategory_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#businesscategory_dependent_list_box').append($(
                '<div id="businesscategory_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="businesscategory" ' + 
                        'data-entity-id="' + rowId + '" class="badge businesscategory_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#businesscategory_dependent_list_box').on('click', '.businesscategory_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="businesscategory_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#businesscategory_dependent_list_box').find('#businesscategory_list_item_' + entityId).remove();

      
   });
   var sb_chargetype_rows_selected = [];
   var sb_chargetypeTable =  $('#sb_chargetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_chargetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="chargetype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#chargetype_parent_params').length) {
                        parent_params = parent_params + $('#chargetype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=chargetype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="chargetype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_chargetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_chargetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_chargetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_chargetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_chargetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_chargetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_chargetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_chargetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_chargetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_chargetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_chargetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_chargetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_chargetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-chargetype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_chargetype_rows_selected, function(index, rowId){

        $.each($('input[name="chargetype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'chargetype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#chargetype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#chargetype_dependent_list_box').append($(
                '<div id="chargetype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="chargetype" ' + 
                        'data-entity-id="' + rowId + '" class="badge chargetype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#chargetype_dependent_list_box').on('click', '.chargetype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="chargetype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#chargetype_dependent_list_box').find('#chargetype_list_item_' + entityId).remove();

      
   });
   var sb_chargefreq_rows_selected = [];
   var sb_chargefreqTable =  $('#sb_chargefreq-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_chargefreq-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="chargefrequency_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#chargefrequency_parent_params').length) {
                        parent_params = parent_params + $('#chargefrequency_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=chargefrequency&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="chargefrequency" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_chargefreq_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_chargefreq-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_chargefreqTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_chargefreq_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_chargefreq_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_chargefreq_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_chargefreqTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_chargefreq-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_chargefreqTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_chargefreq-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_chargefreq-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_chargefreqTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_chargefreqTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-chargefrequency-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_chargefreq_rows_selected, function(index, rowId){

        $.each($('input[name="chargefrequency_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'chargefrequency_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#chargefrequency_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#chargefrequency_dependent_list_box').append($(
                '<div id="chargefrequency_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="chargefrequency" ' + 
                        'data-entity-id="' + rowId + '" class="badge chargefrequency_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#chargefrequency_dependent_list_box').on('click', '.chargefrequency_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="chargefrequency_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#chargefrequency_dependent_list_box').find('#chargefrequency_list_item_' + entityId).remove();

      
   });
   var sb_charge_rows_selected = [];
   var sb_chargeTable =  $('#sb_charge-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_charge-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "type_txt" },

            { data: "frequency_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "description" },

            { data: "date_created" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="charge_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#charge_parent_params').length) {
                        parent_params = parent_params + $('#charge_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=charge&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="charge" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_charge_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_charge-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_chargeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_charge_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_charge_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_charge_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_chargeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_charge-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_chargeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_charge-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_charge-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_chargeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_chargeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-charge-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_charge_rows_selected, function(index, rowId){

        $.each($('input[name="charge_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'charge_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#charge_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#charge_dependent_list_box').append($(
                '<div id="charge_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="charge" ' + 
                        'data-entity-id="' + rowId + '" class="badge charge_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#charge_dependent_list_box').on('click', '.charge_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="charge_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#charge_dependent_list_box').find('#charge_list_item_' + entityId).remove();

      
   });
   var sb_expensetype_rows_selected = [];
   var sb_expensetypeTable =  $('#sb_expensetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_expensetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "business_category_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="expensetype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#expensetype_parent_params').length) {
                        parent_params = parent_params + $('#expensetype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=expensetype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="expensetype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_expensetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_expensetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_expensetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_expensetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_expensetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_expensetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_expensetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_expensetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_expensetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_expensetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_expensetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_expensetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_expensetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-expensetype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_expensetype_rows_selected, function(index, rowId){

        $.each($('input[name="expensetype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'expensetype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#expensetype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#expensetype_dependent_list_box').append($(
                '<div id="expensetype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="expensetype" ' + 
                        'data-entity-id="' + rowId + '" class="badge expensetype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#expensetype_dependent_list_box').on('click', '.expensetype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="expensetype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#expensetype_dependent_list_box').find('#expensetype_list_item_' + entityId).remove();

      
   });
   var sb_expensefreq_rows_selected = [];
   var sb_expensefreqTable =  $('#sb_expensefreq-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_expensefreq-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },

            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="expensefrequency_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#expensefrequency_parent_params').length) {
                        parent_params = parent_params + $('#expensefrequency_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=expensefrequency&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="expensefrequency" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_expensefreq_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_expensefreq-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_expensefreqTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_expensefreq_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_expensefreq_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_expensefreq_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_expensefreqTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_expensefreq-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_expensefreqTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_expensefreq-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_expensefreq-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_expensefreqTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_expensefreqTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-expensefrequency-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_expensefreq_rows_selected, function(index, rowId){

        $.each($('input[name="expensefrequency_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'expensefrequency_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#expensefrequency_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#expensefrequency_dependent_list_box').append($(
                '<div id="expensefrequency_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="expensefrequency" ' + 
                        'data-entity-id="' + rowId + '" class="badge expensefrequency_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#expensefrequency_dependent_list_box').on('click', '.expensefrequency_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="expensefrequency_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#expensefrequency_dependent_list_box').find('#expensefrequency_list_item_' + entityId).remove();

      
   });
   var sb_expense_rows_selected = [];
   var sb_expenseTable =  $('#sb_expense-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_expense-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "amount" },


            { data: "type_txt" },

            { data: "frequency_txt" },
            { data: "description" },

            { data: "date_created" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="expense_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#expense_parent_params').length) {
                        parent_params = parent_params + $('#expense_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=expense&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="expense" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_expense_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_expense-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_expenseTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_expense_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_expense_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_expense_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_expenseTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_expense-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_expenseTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_expense-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_expense-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_expenseTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_expenseTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-expense-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_expense_rows_selected, function(index, rowId){

        $.each($('input[name="expense_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'expense_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#expense_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#expense_dependent_list_box').append($(
                '<div id="expense_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="expense" ' + 
                        'data-entity-id="' + rowId + '" class="badge expense_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#expense_dependent_list_box').on('click', '.expense_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="expense_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#expense_dependent_list_box').find('#expense_list_item_' + entityId).remove();

      
   });
   var sb_liabcat_rows_selected = [];
   var sb_liabcatTable =  $('#sb_liabcat-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_liabcat-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="liabilitycategory_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#liabilitycategory_parent_params').length) {
                        parent_params = parent_params + $('#liabilitycategory_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=liabilitycategory&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="liabilitycategory" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_liabcat_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_liabcat-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_liabcatTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_liabcat_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_liabcat_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_liabcat_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_liabcatTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_liabcat-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_liabcatTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_liabcat-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_liabcat-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_liabcatTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_liabcatTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-liabilitycategory-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_liabcat_rows_selected, function(index, rowId){

        $.each($('input[name="liabilitycategory_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'liabilitycategory_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#liabilitycategory_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#liabilitycategory_dependent_list_box').append($(
                '<div id="liabilitycategory_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="liabilitycategory" ' + 
                        'data-entity-id="' + rowId + '" class="badge liabilitycategory_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#liabilitycategory_dependent_list_box').on('click', '.liabilitycategory_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="liabilitycategory_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#liabilitycategory_dependent_list_box').find('#liabilitycategory_list_item_' + entityId).remove();

      
   });
   var sb_liabtype_rows_selected = [];
   var sb_liabtypeTable =  $('#sb_liabtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_liabtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "category_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="liabilitytype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#liabilitytype_parent_params').length) {
                        parent_params = parent_params + $('#liabilitytype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=liabilitytype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="liabilitytype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_liabtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_liabtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_liabtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_liabtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_liabtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_liabtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_liabtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_liabtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_liabtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_liabtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_liabtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_liabtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_liabtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-liabilitytype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_liabtype_rows_selected, function(index, rowId){

        $.each($('input[name="liabilitytype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'liabilitytype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#liabilitytype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#liabilitytype_dependent_list_box').append($(
                '<div id="liabilitytype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="liabilitytype" ' + 
                        'data-entity-id="' + rowId + '" class="badge liabilitytype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#liabilitytype_dependent_list_box').on('click', '.liabilitytype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="liabilitytype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#liabilitytype_dependent_list_box').find('#liabilitytype_list_item_' + entityId).remove();

      
   });
   var sb_liability_rows_selected = [];
   var sb_liabilityTable =  $('#sb_liability-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_liability-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "type_txt" },

            { data: "l_party_txt" },
            { data: "name" },


            { data: "lender_txt" },
            { data: "term" },

            { data: "principal" },

            { data: "rate" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="liability_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#liability_parent_params').length) {
                        parent_params = parent_params + $('#liability_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=liability&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="liability" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_liability_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_liability-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_liabilityTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_liability_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_liability_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_liability_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_liabilityTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_liability-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_liabilityTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_liability-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_liability-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_liabilityTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_liabilityTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-liability-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_liability_rows_selected, function(index, rowId){

        $.each($('input[name="liability_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'liability_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#liability_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#liability_dependent_list_box').append($(
                '<div id="liability_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="liability" ' + 
                        'data-entity-id="' + rowId + '" class="badge liability_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#liability_dependent_list_box').on('click', '.liability_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="liability_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#liability_dependent_list_box').find('#liability_list_item_' + entityId).remove();

      
   });
   var sb_dmethod_rows_selected = [];
   var sb_dmethodTable =  $('#sb_dmethod-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_dmethod-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="deprecationmethod_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#deprecationmethod_parent_params').length) {
                        parent_params = parent_params + $('#deprecationmethod_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=deprecationmethod&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="deprecationmethod" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_dmethod_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_dmethod-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_dmethodTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_dmethod_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_dmethod_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_dmethod_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_dmethodTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_dmethod-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_dmethodTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_dmethod-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_dmethod-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_dmethodTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_dmethodTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-deprecationmethod-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_dmethod_rows_selected, function(index, rowId){

        $.each($('input[name="deprecationmethod_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'deprecationmethod_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#deprecationmethod_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#deprecationmethod_dependent_list_box').append($(
                '<div id="deprecationmethod_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="deprecationmethod" ' + 
                        'data-entity-id="' + rowId + '" class="badge deprecationmethod_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#deprecationmethod_dependent_list_box').on('click', '.deprecationmethod_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="deprecationmethod_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#deprecationmethod_dependent_list_box').find('#deprecationmethod_list_item_' + entityId).remove();

      
   });
   var sb_uom_rows_selected = [];
   var sb_uomTable =  $('#sb_uom-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_uom-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="unitofmeasure_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#unitofmeasure_parent_params').length) {
                        parent_params = parent_params + $('#unitofmeasure_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=unitofmeasure&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="unitofmeasure" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_uom_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_uom-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_uomTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_uom_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_uom_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_uom_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_uomTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_uom-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_uomTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_uom-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_uom-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_uomTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_uomTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-unitofmeasure-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_uom_rows_selected, function(index, rowId){

        $.each($('input[name="unitofmeasure_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'unitofmeasure_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#unitofmeasure_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#unitofmeasure_dependent_list_box').append($(
                '<div id="unitofmeasure_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="unitofmeasure" ' + 
                        'data-entity-id="' + rowId + '" class="badge unitofmeasure_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#unitofmeasure_dependent_list_box').on('click', '.unitofmeasure_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="unitofmeasure_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#unitofmeasure_dependent_list_box').find('#unitofmeasure_list_item_' + entityId).remove();

      
   });
   var sb_utilitytype_rows_selected = [];
   var sb_utilitytypeTable =  $('#sb_utilitytype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_utilitytype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="utilitytype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#utilitytype_parent_params').length) {
                        parent_params = parent_params + $('#utilitytype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=utilitytype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="utilitytype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_utilitytype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_utilitytype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_utilitytypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_utilitytype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_utilitytype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_utilitytype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_utilitytypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_utilitytype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_utilitytypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_utilitytype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_utilitytype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_utilitytypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_utilitytypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-utilitytype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_utilitytype_rows_selected, function(index, rowId){

        $.each($('input[name="utilitytype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'utilitytype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#utilitytype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#utilitytype_dependent_list_box').append($(
                '<div id="utilitytype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="utilitytype" ' + 
                        'data-entity-id="' + rowId + '" class="badge utilitytype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#utilitytype_dependent_list_box').on('click', '.utilitytype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="utilitytype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#utilitytype_dependent_list_box').find('#utilitytype_list_item_' + entityId).remove();

      
   });
   var sb_utility_rows_selected = [];
   var sb_utilityTable =  $('#sb_utility-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_utility-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "u_type_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="utility_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#utility_parent_params').length) {
                        parent_params = parent_params + $('#utility_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=utility&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="utility" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_utility_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_utility-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_utilityTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_utility_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_utility_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_utility_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_utilityTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_utility-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_utilityTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_utility-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_utility-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_utilityTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_utilityTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-utility-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_utility_rows_selected, function(index, rowId){

        $.each($('input[name="utility_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'utility_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#utility_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#utility_dependent_list_box').append($(
                '<div id="utility_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="utility" ' + 
                        'data-entity-id="' + rowId + '" class="badge utility_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#utility_dependent_list_box').on('click', '.utility_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="utility_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#utility_dependent_list_box').find('#utility_list_item_' + entityId).remove();

      
   });
   var sb_facilitycat_rows_selected = [];
   var sb_facilitycatTable =  $('#sb_facilitycat-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_facilitycat-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="facilitycategory_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#facilitycategory_parent_params').length) {
                        parent_params = parent_params + $('#facilitycategory_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=facilitycategory&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="facilitycategory" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_facilitycat_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_facilitycat-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_facilitycatTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_facilitycat_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_facilitycat_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_facilitycat_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_facilitycatTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_facilitycat-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_facilitycatTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_facilitycat-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_facilitycat-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_facilitycatTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_facilitycatTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-facilitycategory-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_facilitycat_rows_selected, function(index, rowId){

        $.each($('input[name="facilitycategory_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'facilitycategory_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#facilitycategory_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#facilitycategory_dependent_list_box').append($(
                '<div id="facilitycategory_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="facilitycategory" ' + 
                        'data-entity-id="' + rowId + '" class="badge facilitycategory_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#facilitycategory_dependent_list_box').on('click', '.facilitycategory_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="facilitycategory_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#facilitycategory_dependent_list_box').find('#facilitycategory_list_item_' + entityId).remove();

      
   });
   var sb_facilitytype_rows_selected = [];
   var sb_facilitytypeTable =  $('#sb_facilitytype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_facilitytype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "ft_category_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="facilitytype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#facilitytype_parent_params').length) {
                        parent_params = parent_params + $('#facilitytype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=facilitytype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="facilitytype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_facilitytype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_facilitytype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_facilitytypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_facilitytype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_facilitytype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_facilitytype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_facilitytypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_facilitytype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_facilitytypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_facilitytype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_facilitytype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_facilitytypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_facilitytypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-facilitytype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_facilitytype_rows_selected, function(index, rowId){

        $.each($('input[name="facilitytype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'facilitytype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#facilitytype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#facilitytype_dependent_list_box').append($(
                '<div id="facilitytype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="facilitytype" ' + 
                        'data-entity-id="' + rowId + '" class="badge facilitytype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#facilitytype_dependent_list_box').on('click', '.facilitytype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="facilitytype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#facilitytype_dependent_list_box').find('#facilitytype_list_item_' + entityId).remove();

      
   });
   var sb_facility_rows_selected = [];
   var sb_facilityTable =  $('#sb_facility-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_facility-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "f_facility_txt" },

            { data: "f_type_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="facility_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#facility_parent_params').length) {
                        parent_params = parent_params + $('#facility_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=facility&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="facility" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_facility_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_facility-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_facilityTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_facility_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_facility_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_facility_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_facilityTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_facility-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_facilityTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_facility-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_facility-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_facilityTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_facilityTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-facility-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_facility_rows_selected, function(index, rowId){

        $.each($('input[name="facility_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'facility_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#facility_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#facility_dependent_list_box').append($(
                '<div id="facility_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="facility" ' + 
                        'data-entity-id="' + rowId + '" class="badge facility_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#facility_dependent_list_box').on('click', '.facility_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="facility_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#facility_dependent_list_box').find('#facility_list_item_' + entityId).remove();

      
   });
   var sb_facharge_rows_selected = [];
   var sb_fachargeTable =  $('#sb_facharge-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_facharge-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "fc_facility_txt" },

            { data: "fc_charge_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="facilitycharge_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#facilitycharge_parent_params').length) {
                        parent_params = parent_params + $('#facilitycharge_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=facilitycharge&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="facilitycharge" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_facharge_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_facharge-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_fachargeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_facharge_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_facharge_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_facharge_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_fachargeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_facharge-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_fachargeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_facharge-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_facharge-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_fachargeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_fachargeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-facilitycharge-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_facharge_rows_selected, function(index, rowId){

        $.each($('input[name="facilitycharge_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'facilitycharge_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#facilitycharge_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#facilitycharge_dependent_list_box').append($(
                '<div id="facilitycharge_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="facilitycharge" ' + 
                        'data-entity-id="' + rowId + '" class="badge facilitycharge_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#facilitycharge_dependent_list_box').on('click', '.facilitycharge_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="facilitycharge_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#facilitycharge_dependent_list_box').find('#facilitycharge_list_item_' + entityId).remove();

      
   });
   var sb_proptype_rows_selected = [];
   var sb_proptypeTable =  $('#sb_proptype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_proptype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },

            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="propertytype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#propertytype_parent_params').length) {
                        parent_params = parent_params + $('#propertytype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=propertytype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="propertytype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_proptype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_proptype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_proptypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_proptype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_proptype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_proptype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_proptypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_proptype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_proptypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_proptype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_proptype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_proptypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_proptypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-propertytype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_proptype_rows_selected, function(index, rowId){

        $.each($('input[name="propertytype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'propertytype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#propertytype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#propertytype_dependent_list_box').append($(
                '<div id="propertytype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="propertytype" ' + 
                        'data-entity-id="' + rowId + '" class="badge propertytype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#propertytype_dependent_list_box').on('click', '.propertytype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="propertytype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#propertytype_dependent_list_box').find('#propertytype_list_item_' + entityId).remove();

      
   });
   var sb_propstatus_rows_selected = [];
   var sb_propstatusTable =  $('#sb_propstatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_propstatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="propertystatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#propertystatus_parent_params').length) {
                        parent_params = parent_params + $('#propertystatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=propertystatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="propertystatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_propstatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_propstatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_propstatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_propstatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_propstatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_propstatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_propstatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_propstatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_propstatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_propstatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_propstatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_propstatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_propstatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-propertystatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_propstatus_rows_selected, function(index, rowId){

        $.each($('input[name="propertystatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'propertystatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#propertystatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#propertystatus_dependent_list_box').append($(
                '<div id="propertystatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="propertystatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge propertystatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#propertystatus_dependent_list_box').on('click', '.propertystatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="propertystatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#propertystatus_dependent_list_box').find('#propertystatus_list_item_' + entityId).remove();

      
   });
   var sb_property_rows_selected = [];
   var sb_propertyTable =  $('#sb_property-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_property-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "p_party_txt" },

            { data: "p_facility_txt" },

            { data: "p_type_txt" },

            { data: "status_txt" },
            { data: "name" },


            { data: "p_location_txt" },
            { data: "title_number" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="property_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#property_parent_params').length) {
                        parent_params = parent_params + $('#property_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=property&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="property" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_property_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_property-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_propertyTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_property_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_property_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_property_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_propertyTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_property-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_propertyTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_property-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_property-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_propertyTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_propertyTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-property-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_property_rows_selected, function(index, rowId){

        $.each($('input[name="property_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'property_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#property_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#property_dependent_list_box').append($(
                '<div id="property_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="property" ' + 
                        'data-entity-id="' + rowId + '" class="badge property_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#property_dependent_list_box').on('click', '.property_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="property_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#property_dependent_list_box').find('#property_list_item_' + entityId).remove();

      
   });
   var sb_zonetype_rows_selected = [];
   var sb_zonetypeTable =  $('#sb_zonetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_zonetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="zonetype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#zonetype_parent_params').length) {
                        parent_params = parent_params + $('#zonetype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=zonetype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="zonetype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_zonetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_zonetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_zonetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_zonetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_zonetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_zonetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_zonetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_zonetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_zonetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_zonetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_zonetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_zonetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_zonetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-zonetype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_zonetype_rows_selected, function(index, rowId){

        $.each($('input[name="zonetype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'zonetype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#zonetype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#zonetype_dependent_list_box').append($(
                '<div id="zonetype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="zonetype" ' + 
                        'data-entity-id="' + rowId + '" class="badge zonetype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#zonetype_dependent_list_box').on('click', '.zonetype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="zonetype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#zonetype_dependent_list_box').find('#zonetype_list_item_' + entityId).remove();

      
   });
   var sb_zoningdata_rows_selected = [];
   var sb_zoningdataTable =  $('#sb_zoningdata-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_zoningdata-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "z_type_txt" },

            { data: "m_property_txt" },
            { data: "name" },


            { data: "is_compliant_fg_txt" },
            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="zoningdata_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#zoningdata_parent_params').length) {
                        parent_params = parent_params + $('#zoningdata_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=zoningdata&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="zoningdata" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_zoningdata_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_zoningdata-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_zoningdataTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_zoningdata_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_zoningdata_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_zoningdata_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_zoningdataTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_zoningdata-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_zoningdataTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_zoningdata-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_zoningdata-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_zoningdataTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_zoningdataTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-zoningdata-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_zoningdata_rows_selected, function(index, rowId){

        $.each($('input[name="zoningdata_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'zoningdata_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#zoningdata_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#zoningdata_dependent_list_box').append($(
                '<div id="zoningdata_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="zoningdata" ' + 
                        'data-entity-id="' + rowId + '" class="badge zoningdata_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#zoningdata_dependent_list_box').on('click', '.zoningdata_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="zoningdata_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#zoningdata_dependent_list_box').find('#zoningdata_list_item_' + entityId).remove();

      
   });
   var sb_mortgagetype_rows_selected = [];
   var sb_mortgagetypeTable =  $('#sb_mortgagetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_mortgagetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="mortgagetype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#mortgagetype_parent_params').length) {
                        parent_params = parent_params + $('#mortgagetype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=mortgagetype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="mortgagetype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_mortgagetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_mortgagetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_mortgagetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_mortgagetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_mortgagetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_mortgagetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_mortgagetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_mortgagetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_mortgagetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_mortgagetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_mortgagetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_mortgagetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_mortgagetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-mortgagetype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_mortgagetype_rows_selected, function(index, rowId){

        $.each($('input[name="mortgagetype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'mortgagetype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#mortgagetype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#mortgagetype_dependent_list_box').append($(
                '<div id="mortgagetype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="mortgagetype" ' + 
                        'data-entity-id="' + rowId + '" class="badge mortgagetype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#mortgagetype_dependent_list_box').on('click', '.mortgagetype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="mortgagetype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#mortgagetype_dependent_list_box').find('#mortgagetype_list_item_' + entityId).remove();

      
   });
   var sb_mortgage_rows_selected = [];
   var sb_mortgageTable =  $('#sb_mortgage-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_mortgage-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "m_type_txt" },

            { data: "m_party_txt" },
            { data: "name" },


            { data: "lender_txt" },
            { data: "term" },

            { data: "principal" },

            { data: "rate" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="mortgage_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#mortgage_parent_params').length) {
                        parent_params = parent_params + $('#mortgage_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=mortgage&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="mortgage" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_mortgage_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_mortgage-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_mortgageTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_mortgage_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_mortgage_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_mortgage_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_mortgageTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_mortgage-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_mortgageTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_mortgage-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_mortgage-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_mortgageTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_mortgageTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-mortgage-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_mortgage_rows_selected, function(index, rowId){

        $.each($('input[name="mortgage_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'mortgage_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#mortgage_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#mortgage_dependent_list_box').append($(
                '<div id="mortgage_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="mortgage" ' + 
                        'data-entity-id="' + rowId + '" class="badge mortgage_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#mortgage_dependent_list_box').on('click', '.mortgage_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="mortgage_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#mortgage_dependent_list_box').find('#mortgage_list_item_' + entityId).remove();

      
   });
   var sb_laccessibility_rows_selected = [];
   var sb_laccessibilityTable =  $('#sb_laccessibility-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_laccessibility-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="landaccessibility_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#landaccessibility_parent_params').length) {
                        parent_params = parent_params + $('#landaccessibility_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=landaccessibility&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="landaccessibility" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_laccessibility_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_laccessibility-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_laccessibilityTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_laccessibility_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_laccessibility_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_laccessibility_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_laccessibilityTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_laccessibility-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_laccessibilityTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_laccessibility-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_laccessibility-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_laccessibilityTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_laccessibilityTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-landaccessibility-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_laccessibility_rows_selected, function(index, rowId){

        $.each($('input[name="landaccessibility_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'landaccessibility_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#landaccessibility_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#landaccessibility_dependent_list_box').append($(
                '<div id="landaccessibility_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="landaccessibility" ' + 
                        'data-entity-id="' + rowId + '" class="badge landaccessibility_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#landaccessibility_dependent_list_box').on('click', '.landaccessibility_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="landaccessibility_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#landaccessibility_dependent_list_box').find('#landaccessibility_list_item_' + entityId).remove();

      
   });
   var sb_ltopography_rows_selected = [];
   var sb_ltopographyTable =  $('#sb_ltopography-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_ltopography-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="landtopography_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#landtopography_parent_params').length) {
                        parent_params = parent_params + $('#landtopography_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=landtopography&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="landtopography" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_ltopography_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_ltopography-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_ltopographyTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_ltopography_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_ltopography_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_ltopography_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ltopographyTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_ltopography-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_ltopographyTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_ltopography-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_ltopography-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_ltopographyTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ltopographyTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-landtopography-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_ltopography_rows_selected, function(index, rowId){

        $.each($('input[name="landtopography_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'landtopography_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#landtopography_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#landtopography_dependent_list_box').append($(
                '<div id="landtopography_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="landtopography" ' + 
                        'data-entity-id="' + rowId + '" class="badge landtopography_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#landtopography_dependent_list_box').on('click', '.landtopography_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="landtopography_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#landtopography_dependent_list_box').find('#landtopography_list_item_' + entityId).remove();

      
   });
   var sb_landtype_rows_selected = [];
   var sb_landtypeTable =  $('#sb_landtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_landtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="landtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#landtype_parent_params').length) {
                        parent_params = parent_params + $('#landtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=landtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="landtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_landtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_landtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_landtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_landtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_landtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_landtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_landtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_landtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_landtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_landtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_landtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_landtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_landtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-landtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_landtype_rows_selected, function(index, rowId){

        $.each($('input[name="landtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'landtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#landtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#landtype_dependent_list_box').append($(
                '<div id="landtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="landtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge landtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#landtype_dependent_list_box').on('click', '.landtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="landtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#landtype_dependent_list_box').find('#landtype_list_item_' + entityId).remove();

      
   });
   var sb_soiltype_rows_selected = [];
   var sb_soiltypeTable =  $('#sb_soiltype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_soiltype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="soiltype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#soiltype_parent_params').length) {
                        parent_params = parent_params + $('#soiltype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=soiltype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="soiltype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_soiltype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_soiltype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_soiltypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_soiltype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_soiltype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_soiltype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_soiltypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_soiltype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_soiltypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_soiltype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_soiltype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_soiltypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_soiltypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-soiltype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_soiltype_rows_selected, function(index, rowId){

        $.each($('input[name="soiltype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'soiltype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#soiltype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#soiltype_dependent_list_box').append($(
                '<div id="soiltype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="soiltype" ' + 
                        'data-entity-id="' + rowId + '" class="badge soiltype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#soiltype_dependent_list_box').on('click', '.soiltype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="soiltype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#soiltype_dependent_list_box').find('#soiltype_list_item_' + entityId).remove();

      
   });
   var sb_lshape_rows_selected = [];
   var sb_lshapeTable =  $('#sb_lshape-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_lshape-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="landshape_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#landshape_parent_params').length) {
                        parent_params = parent_params + $('#landshape_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=landshape&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="landshape" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_lshape_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_lshape-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_lshapeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_lshape_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_lshape_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_lshape_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_lshapeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_lshape-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_lshapeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_lshape-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_lshape-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_lshapeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_lshapeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-landshape-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_lshape_rows_selected, function(index, rowId){

        $.each($('input[name="landshape_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'landshape_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#landshape_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#landshape_dependent_list_box').append($(
                '<div id="landshape_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="landshape" ' + 
                        'data-entity-id="' + rowId + '" class="badge landshape_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#landshape_dependent_list_box').on('click', '.landshape_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="landshape_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#landshape_dependent_list_box').find('#landshape_list_item_' + entityId).remove();

      
   });
   var sb_land_rows_selected = [];
   var sb_landTable =  $('#sb_land-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_land-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },


            { data: "li_type_txt" },

            { data: "li_accessibility_txt" },

            { data: "li_topography_txt" },

            { data: "li_owner_txt" },
            { data: "name" },

            { data: "land_size" },


            { data: "land_shape_txt" },

            { data: "uom_txt" },
            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="land_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#land_parent_params').length) {
                        parent_params = parent_params + $('#land_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=land&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="land" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_land_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_land-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_landTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_land_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_land_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_land_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_landTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_land-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_landTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_land-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_land-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_landTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_landTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-land-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_land_rows_selected, function(index, rowId){

        $.each($('input[name="land_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'land_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#land_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#land_dependent_list_box').append($(
                '<div id="land_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="land" ' + 
                        'data-entity-id="' + rowId + '" class="badge land_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#land_dependent_list_box').on('click', '.land_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="land_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#land_dependent_list_box').find('#land_list_item_' + entityId).remove();

      
   });
   var sb_plottype_rows_selected = [];
   var sb_plottypeTable =  $('#sb_plottype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_plottype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="plottype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#plottype_parent_params').length) {
                        parent_params = parent_params + $('#plottype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=plottype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="plottype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_plottype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_plottype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_plottypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_plottype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_plottype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_plottype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_plottypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_plottype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_plottypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_plottype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_plottype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_plottypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_plottypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-plottype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_plottype_rows_selected, function(index, rowId){

        $.each($('input[name="plottype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'plottype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#plottype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#plottype_dependent_list_box').append($(
                '<div id="plottype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="plottype" ' + 
                        'data-entity-id="' + rowId + '" class="badge plottype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#plottype_dependent_list_box').on('click', '.plottype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="plottype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#plottype_dependent_list_box').find('#plottype_list_item_' + entityId).remove();

      
   });
   var sb_plot_rows_selected = [];
   var sb_plotTable =  $('#sb_plot-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_plot-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "p_type_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="plot_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#plot_parent_params').length) {
                        parent_params = parent_params + $('#plot_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=plot&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="plot" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_plot_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_plot-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_plotTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_plot_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_plot_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_plot_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_plotTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_plot-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_plotTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_plot-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_plot-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_plotTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_plotTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-plot-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_plot_rows_selected, function(index, rowId){

        $.each($('input[name="plot_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'plot_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#plot_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#plot_dependent_list_box').append($(
                '<div id="plot_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="plot" ' + 
                        'data-entity-id="' + rowId + '" class="badge plot_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#plot_dependent_list_box').on('click', '.plot_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="plot_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#plot_dependent_list_box').find('#plot_list_item_' + entityId).remove();

      
   });
   var sb_improvetype_rows_selected = [];
   var sb_improvetypeTable =  $('#sb_improvetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_improvetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="improvementtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#improvementtype_parent_params').length) {
                        parent_params = parent_params + $('#improvementtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=improvementtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="improvementtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_improvetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_improvetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_improvetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_improvetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_improvetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_improvetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_improvetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_improvetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_improvetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_improvetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_improvetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_improvetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_improvetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-improvementtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_improvetype_rows_selected, function(index, rowId){

        $.each($('input[name="improvementtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'improvementtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#improvementtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#improvementtype_dependent_list_box').append($(
                '<div id="improvementtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="improvementtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge improvementtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#improvementtype_dependent_list_box').on('click', '.improvementtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="improvementtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#improvementtype_dependent_list_box').find('#improvementtype_list_item_' + entityId).remove();

      
   });
   var sb_improvement_rows_selected = [];
   var sb_improvementTable =  $('#sb_improvement-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_improvement-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "i_property_txt" },

            { data: "i_type_txt" },
            { data: "name" },

            { data: "direct_cost" },

            { data: "indirect_cost" },

            { data: "p_depreciation" },

            { data: "f_depreciation" },

            { data: "e_depreciation" },

            { data: "economic_life" },

            { data: "r_economic_life" },

            { data: "effective_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="improvement_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#improvement_parent_params').length) {
                        parent_params = parent_params + $('#improvement_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=improvement&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="improvement" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_improvement_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_improvement-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_improvementTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_improvement_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_improvement_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_improvement_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_improvementTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_improvement-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_improvementTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_improvement-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_improvement-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_improvementTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_improvementTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-improvement-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_improvement_rows_selected, function(index, rowId){

        $.each($('input[name="improvement_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'improvement_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#improvement_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#improvement_dependent_list_box').append($(
                '<div id="improvement_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="improvement" ' + 
                        'data-entity-id="' + rowId + '" class="badge improvement_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#improvement_dependent_list_box').on('click', '.improvement_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="improvement_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#improvement_dependent_list_box').find('#improvement_list_item_' + entityId).remove();

      
   });
   var sb_proputility_rows_selected = [];
   var sb_proputilityTable =  $('#sb_proputility-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_proputility-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "pu_utility_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="propertyutility_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#propertyutility_parent_params').length) {
                        parent_params = parent_params + $('#propertyutility_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=propertyutility&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="propertyutility" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_proputility_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_proputility-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_proputilityTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_proputility_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_proputility_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_proputility_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_proputilityTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_proputility-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_proputilityTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_proputility-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_proputility-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_proputilityTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_proputilityTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-propertyutility-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_proputility_rows_selected, function(index, rowId){

        $.each($('input[name="propertyutility_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'propertyutility_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#propertyutility_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#propertyutility_dependent_list_box').append($(
                '<div id="propertyutility_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="propertyutility" ' + 
                        'data-entity-id="' + rowId + '" class="badge propertyutility_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#propertyutility_dependent_list_box').on('click', '.propertyutility_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="propertyutility_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#propertyutility_dependent_list_box').find('#propertyutility_list_item_' + entityId).remove();

      
   });
   var sb_pcharge_rows_selected = [];
   var sb_pchargeTable =  $('#sb_pcharge-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_pcharge-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "pc_charge_txt" },
            { data: "name" },

            { data: "description" },

            { data: "amount" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="propertycharge_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#propertycharge_parent_params').length) {
                        parent_params = parent_params + $('#propertycharge_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=propertycharge&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="propertycharge" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_pcharge_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_pcharge-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_pchargeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_pcharge_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_pcharge_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_pcharge_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pchargeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_pcharge-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_pchargeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_pcharge-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_pcharge-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_pchargeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pchargeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-propertycharge-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_pcharge_rows_selected, function(index, rowId){

        $.each($('input[name="propertycharge_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'propertycharge_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#propertycharge_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#propertycharge_dependent_list_box').append($(
                '<div id="propertycharge_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="propertycharge" ' + 
                        'data-entity-id="' + rowId + '" class="badge propertycharge_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#propertycharge_dependent_list_box').on('click', '.propertycharge_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="propertycharge_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#propertycharge_dependent_list_box').find('#propertycharge_list_item_' + entityId).remove();

      
   });
   var sb_assetcat_rows_selected = [];
   var sb_assetcatTable =  $('#sb_assetcat-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_assetcat-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="assetcategory_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#assetcategory_parent_params').length) {
                        parent_params = parent_params + $('#assetcategory_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=assetcategory&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="assetcategory" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_assetcat_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_assetcat-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_assetcatTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_assetcat_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_assetcat_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_assetcat_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_assetcatTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_assetcat-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_assetcatTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_assetcat-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_assetcat-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_assetcatTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_assetcatTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-assetcategory-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_assetcat_rows_selected, function(index, rowId){

        $.each($('input[name="assetcategory_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'assetcategory_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#assetcategory_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#assetcategory_dependent_list_box').append($(
                '<div id="assetcategory_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="assetcategory" ' + 
                        'data-entity-id="' + rowId + '" class="badge assetcategory_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#assetcategory_dependent_list_box').on('click', '.assetcategory_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="assetcategory_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#assetcategory_dependent_list_box').find('#assetcategory_list_item_' + entityId).remove();

      
   });
   var sb_assettype_rows_selected = [];
   var sb_assettypeTable =  $('#sb_assettype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_assettype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="assettype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#assettype_parent_params').length) {
                        parent_params = parent_params + $('#assettype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=assettype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="assettype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_assettype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_assettype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_assettypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_assettype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_assettype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_assettype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_assettypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_assettype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_assettypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_assettype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_assettype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_assettypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_assettypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-assettype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_assettype_rows_selected, function(index, rowId){

        $.each($('input[name="assettype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'assettype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#assettype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#assettype_dependent_list_box').append($(
                '<div id="assettype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="assettype" ' + 
                        'data-entity-id="' + rowId + '" class="badge assettype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#assettype_dependent_list_box').on('click', '.assettype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="assettype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#assettype_dependent_list_box').find('#assettype_list_item_' + entityId).remove();

      
   });
   var sb_asset_rows_selected = [];
   var sb_assetTable =  $('#sb_asset-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_asset-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "a_dmethod_txt" },

            { data: "type_txt" },

            { data: "a_uom_txt" },
            { data: "name" },

            { data: "description" },

            { data: "a_price" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="asset_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#asset_parent_params').length) {
                        parent_params = parent_params + $('#asset_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=asset&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="asset" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_asset_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_asset-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_assetTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_asset_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_asset_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_asset_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_assetTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_asset-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_assetTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_asset-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_asset-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_assetTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_assetTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-asset-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_asset_rows_selected, function(index, rowId){

        $.each($('input[name="asset_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'asset_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#asset_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#asset_dependent_list_box').append($(
                '<div id="asset_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="asset" ' + 
                        'data-entity-id="' + rowId + '" class="badge asset_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#asset_dependent_list_box').on('click', '.asset_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="asset_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#asset_dependent_list_box').find('#asset_list_item_' + entityId).remove();

      
   });
   var sb_inventype_rows_selected = [];
   var sb_inventypeTable =  $('#sb_inventype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_inventype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="inventorytype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#inventorytype_parent_params').length) {
                        parent_params = parent_params + $('#inventorytype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=inventorytype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="inventorytype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_inventype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_inventype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_inventypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_inventype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_inventype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_inventype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_inventypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_inventype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_inventypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_inventype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_inventype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_inventypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_inventypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-inventorytype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_inventype_rows_selected, function(index, rowId){

        $.each($('input[name="inventorytype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'inventorytype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#inventorytype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#inventorytype_dependent_list_box').append($(
                '<div id="inventorytype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="inventorytype" ' + 
                        'data-entity-id="' + rowId + '" class="badge inventorytype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#inventorytype_dependent_list_box').on('click', '.inventorytype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="inventorytype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#inventorytype_dependent_list_box').find('#inventorytype_list_item_' + entityId).remove();

      
   });
   var sb_inventory_rows_selected = [];
   var sb_inventoryTable =  $('#sb_inventory-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_inventory-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "i_party_txt" },

            { data: "type_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="inventory_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#inventory_parent_params').length) {
                        parent_params = parent_params + $('#inventory_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=inventory&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="inventory" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_inventory_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_inventory-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_inventoryTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_inventory_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_inventory_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_inventory_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_inventoryTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_inventory-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_inventoryTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_inventory-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_inventory-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_inventoryTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_inventoryTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-inventory-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_inventory_rows_selected, function(index, rowId){

        $.each($('input[name="inventory_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'inventory_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#inventory_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#inventory_dependent_list_box').append($(
                '<div id="inventory_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="inventory" ' + 
                        'data-entity-id="' + rowId + '" class="badge inventory_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#inventory_dependent_list_box').on('click', '.inventory_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="inventory_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#inventory_dependent_list_box').find('#inventory_list_item_' + entityId).remove();

      
   });
   var sb_invitemtype_rows_selected = [];
   var sb_invitemtypeTable =  $('#sb_invitemtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_invitemtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="inventoryitemtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#inventoryitemtype_parent_params').length) {
                        parent_params = parent_params + $('#inventoryitemtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=inventoryitemtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="inventoryitemtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_invitemtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_invitemtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_invitemtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_invitemtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_invitemtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_invitemtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invitemtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_invitemtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_invitemtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_invitemtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_invitemtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_invitemtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invitemtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-inventoryitemtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_invitemtype_rows_selected, function(index, rowId){

        $.each($('input[name="inventoryitemtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'inventoryitemtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#inventoryitemtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#inventoryitemtype_dependent_list_box').append($(
                '<div id="inventoryitemtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="inventoryitemtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge inventoryitemtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#inventoryitemtype_dependent_list_box').on('click', '.inventoryitemtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="inventoryitemtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#inventoryitemtype_dependent_list_box').find('#inventoryitemtype_list_item_' + entityId).remove();

      
   });
   var sb_inventoryitem_rows_selected = [];
   var sb_inventoryitemTable =  $('#sb_inventoryitem-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_inventoryitem-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "i_itemtype_txt" },

            { data: "i_inventory_txt" },

            { data: "i_asset_txt" },
            { data: "name" },

            { data: "quantity" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="inventoryitem_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#inventoryitem_parent_params').length) {
                        parent_params = parent_params + $('#inventoryitem_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=inventoryitem&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="inventoryitem" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_inventoryitem_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_inventoryitem-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_inventoryitemTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_inventoryitem_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_inventoryitem_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_inventoryitem_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_inventoryitemTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_inventoryitem-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_inventoryitemTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_inventoryitem-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_inventoryitem-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_inventoryitemTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_inventoryitemTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-inventoryitem-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_inventoryitem_rows_selected, function(index, rowId){

        $.each($('input[name="inventoryitem_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'inventoryitem_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#inventoryitem_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#inventoryitem_dependent_list_box').append($(
                '<div id="inventoryitem_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="inventoryitem" ' + 
                        'data-entity-id="' + rowId + '" class="badge inventoryitem_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#inventoryitem_dependent_list_box').on('click', '.inventoryitem_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="inventoryitem_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#inventoryitem_dependent_list_box').find('#inventoryitem_list_item_' + entityId).remove();

      
   });
   var sb_propstaff_rows_selected = [];
   var sb_propstaffTable =  $('#sb_propstaff-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_propstaff-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "phone" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="propertystaff_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#propertystaff_parent_params').length) {
                        parent_params = parent_params + $('#propertystaff_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=propertystaff&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="propertystaff" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_propstaff_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_propstaff-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_propstaffTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_propstaff_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_propstaff_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_propstaff_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_propstaffTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_propstaff-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_propstaffTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_propstaff-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_propstaff-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_propstaffTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_propstaffTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-propertystaff-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_propstaff_rows_selected, function(index, rowId){

        $.each($('input[name="propertystaff_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'propertystaff_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#propertystaff_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#propertystaff_dependent_list_box').append($(
                '<div id="propertystaff_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="propertystaff" ' + 
                        'data-entity-id="' + rowId + '" class="badge propertystaff_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#propertystaff_dependent_list_box').on('click', '.propertystaff_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="propertystaff_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#propertystaff_dependent_list_box').find('#propertystaff_list_item_' + entityId).remove();

      
   });
   var sb_propfiles_rows_selected = [];
   var sb_propfilesTable =  $('#sb_propfiles-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_propfiles-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

            { data: "file_type" },

            { data: "file_url" },

            { data: "file_size" },

            { data: "mime_type" },

            { data: "uploaded_date" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="propertyfiles_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#propertyfiles_parent_params').length) {
                        parent_params = parent_params + $('#propertyfiles_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=propertyfiles&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="propertyfiles" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_propfiles_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_propfiles-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_propfilesTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_propfiles_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_propfiles_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_propfiles_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_propfilesTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_propfiles-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_propfilesTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_propfiles-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_propfiles-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_propfilesTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_propfilesTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-propertyfiles-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_propfiles_rows_selected, function(index, rowId){

        $.each($('input[name="propertyfiles_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'propertyfiles_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#propertyfiles_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#propertyfiles_dependent_list_box').append($(
                '<div id="propertyfiles_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="propertyfiles" ' + 
                        'data-entity-id="' + rowId + '" class="badge propertyfiles_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#propertyfiles_dependent_list_box').on('click', '.propertyfiles_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="propertyfiles_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#propertyfiles_dependent_list_box').find('#propertyfiles_list_item_' + entityId).remove();

      
   });
   var sb_buildingtype_rows_selected = [];
   var sb_buildingtypeTable =  $('#sb_buildingtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_buildingtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="buildingtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#buildingtype_parent_params').length) {
                        parent_params = parent_params + $('#buildingtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=buildingtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="buildingtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_buildingtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_buildingtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_buildingtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_buildingtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_buildingtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_buildingtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_buildingtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_buildingtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_buildingtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_buildingtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_buildingtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_buildingtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_buildingtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-buildingtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_buildingtype_rows_selected, function(index, rowId){

        $.each($('input[name="buildingtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'buildingtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#buildingtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#buildingtype_dependent_list_box').append($(
                '<div id="buildingtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="buildingtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge buildingtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#buildingtype_dependent_list_box').on('click', '.buildingtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="buildingtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#buildingtype_dependent_list_box').find('#buildingtype_list_item_' + entityId).remove();

      
   });
   var sb_buildtypropty_rows_selected = [];
   var sb_buildtyproptyTable =  $('#sb_buildtypropty-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_buildtypropty-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },


            { data: "btpt_buildingtype_txt" },

            { data: "btpt_propertytype_txt" },
            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="buildingtypepropertytype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#buildingtypepropertytype_parent_params').length) {
                        parent_params = parent_params + $('#buildingtypepropertytype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=buildingtypepropertytype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="buildingtypepropertytype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_buildtypropty_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_buildtypropty-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_buildtyproptyTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_buildtypropty_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_buildtypropty_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_buildtypropty_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_buildtyproptyTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_buildtypropty-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_buildtyproptyTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_buildtypropty-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_buildtypropty-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_buildtyproptyTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_buildtyproptyTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-buildingtypepropertytype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_buildtypropty_rows_selected, function(index, rowId){

        $.each($('input[name="buildingtypepropertytype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'buildingtypepropertytype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#buildingtypepropertytype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#buildingtypepropertytype_dependent_list_box').append($(
                '<div id="buildingtypepropertytype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="buildingtypepropertytype" ' + 
                        'data-entity-id="' + rowId + '" class="badge buildingtypepropertytype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#buildingtypepropertytype_dependent_list_box').on('click', '.buildingtypepropertytype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="buildingtypepropertytype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#buildingtypepropertytype_dependent_list_box').find('#buildingtypepropertytype_list_item_' + entityId).remove();

      
   });
   var sb_allocunit_rows_selected = [];
   var sb_allocunitTable =  $('#sb_allocunit-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_allocunit-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="allocationunit_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#allocationunit_parent_params').length) {
                        parent_params = parent_params + $('#allocationunit_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=allocationunit&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="allocationunit" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_allocunit_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_allocunit-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_allocunitTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_allocunit_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_allocunit_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_allocunit_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_allocunitTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_allocunit-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_allocunitTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_allocunit-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_allocunit-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_allocunitTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_allocunitTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-allocationunit-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_allocunit_rows_selected, function(index, rowId){

        $.each($('input[name="allocationunit_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'allocationunit_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#allocationunit_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#allocationunit_dependent_list_box').append($(
                '<div id="allocationunit_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="allocationunit" ' + 
                        'data-entity-id="' + rowId + '" class="badge allocationunit_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#allocationunit_dependent_list_box').on('click', '.allocationunit_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="allocationunit_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#allocationunit_dependent_list_box').find('#allocationunit_list_item_' + entityId).remove();

      
   });
   var sb_building_rows_selected = [];
   var sb_buildingTable =  $('#sb_building-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_building-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "b_buildingtype_txt" },
            { data: "name" },

            { data: "no_of_flrs" },

            { data: "units_in_flr" },

            { data: "has_basement" },

            { data: "basement_count" },


            { data: "b_property_txt" },

            { data: "b_unitalloc_txt" },
            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="building_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#building_parent_params').length) {
                        parent_params = parent_params + $('#building_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=building&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="building" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_building_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_building-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_buildingTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_building_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_building_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_building_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_buildingTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_building-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_buildingTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_building-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_building-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_buildingTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_buildingTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-building-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_building_rows_selected, function(index, rowId){

        $.each($('input[name="building_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'building_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#building_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#building_dependent_list_box').append($(
                '<div id="building_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="building" ' + 
                        'data-entity-id="' + rowId + '" class="badge building_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#building_dependent_list_box').on('click', '.building_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="building_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#building_dependent_list_box').find('#building_list_item_' + entityId).remove();

      
   });
   var sb_bcharge_rows_selected = [];
   var sb_bchargeTable =  $('#sb_bcharge-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_bcharge-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "bc_building_txt" },

            { data: "bc_charge_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="buildingcharge_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#buildingcharge_parent_params').length) {
                        parent_params = parent_params + $('#buildingcharge_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=buildingcharge&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="buildingcharge" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_bcharge_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_bcharge-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_bchargeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_bcharge_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_bcharge_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_bcharge_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_bchargeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_bcharge-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_bchargeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_bcharge-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_bcharge-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_bchargeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_bchargeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-buildingcharge-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_bcharge_rows_selected, function(index, rowId){

        $.each($('input[name="buildingcharge_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'buildingcharge_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#buildingcharge_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#buildingcharge_dependent_list_box').append($(
                '<div id="buildingcharge_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="buildingcharge" ' + 
                        'data-entity-id="' + rowId + '" class="badge buildingcharge_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#buildingcharge_dependent_list_box').on('click', '.buildingcharge_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="buildingcharge_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#buildingcharge_dependent_list_box').find('#buildingcharge_list_item_' + entityId).remove();

      
   });
   var sb_buildfiles_rows_selected = [];
   var sb_buildfilesTable =  $('#sb_buildfiles-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_buildfiles-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

            { data: "file_type" },

            { data: "file_url" },

            { data: "file_size" },

            { data: "mime_type" },

            { data: "uploaded_date" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="buildingfiles_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#buildingfiles_parent_params').length) {
                        parent_params = parent_params + $('#buildingfiles_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=buildingfiles&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="buildingfiles" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_buildfiles_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_buildfiles-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_buildfilesTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_buildfiles_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_buildfiles_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_buildfiles_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_buildfilesTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_buildfiles-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_buildfilesTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_buildfiles-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_buildfiles-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_buildfilesTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_buildfilesTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-buildingfiles-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_buildfiles_rows_selected, function(index, rowId){

        $.each($('input[name="buildingfiles_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'buildingfiles_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#buildingfiles_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#buildingfiles_dependent_list_box').append($(
                '<div id="buildingfiles_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="buildingfiles" ' + 
                        'data-entity-id="' + rowId + '" class="badge buildingfiles_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#buildingfiles_dependent_list_box').on('click', '.buildingfiles_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="buildingfiles_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#buildingfiles_dependent_list_box').find('#buildingfiles_list_item_' + entityId).remove();

      
   });
   var sb_floortype_rows_selected = [];
   var sb_floortypeTable =  $('#sb_floortype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_floortype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="floortype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#floortype_parent_params').length) {
                        parent_params = parent_params + $('#floortype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=floortype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="floortype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_floortype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_floortype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_floortypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_floortype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_floortype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_floortype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_floortypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_floortype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_floortypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_floortype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_floortype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_floortypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_floortypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-floortype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_floortype_rows_selected, function(index, rowId){

        $.each($('input[name="floortype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'floortype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#floortype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#floortype_dependent_list_box').append($(
                '<div id="floortype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="floortype" ' + 
                        'data-entity-id="' + rowId + '" class="badge floortype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#floortype_dependent_list_box').on('click', '.floortype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="floortype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#floortype_dependent_list_box').find('#floortype_list_item_' + entityId).remove();

      
   });
   var sb_floor_rows_selected = [];
   var sb_floorTable =  $('#sb_floor-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_floor-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "flr_type_txt" },

            { data: "flr_allocation_txt" },

            { data: "flr_building_txt" },
            { data: "name" },

            { data: "floor_number" },

            { data: "unit_count" },

            { data: "description" },

            { data: "date_created" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="floor_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#floor_parent_params').length) {
                        parent_params = parent_params + $('#floor_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=floor&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="floor" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_floor_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_floor-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_floorTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_floor_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_floor_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_floor_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_floorTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_floor-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_floorTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_floor-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_floor-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_floorTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_floorTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-floor-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_floor_rows_selected, function(index, rowId){

        $.each($('input[name="floor_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'floor_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#floor_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#floor_dependent_list_box').append($(
                '<div id="floor_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="floor" ' + 
                        'data-entity-id="' + rowId + '" class="badge floor_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#floor_dependent_list_box').on('click', '.floor_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="floor_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#floor_dependent_list_box').find('#floor_list_item_' + entityId).remove();

      
   });
   var sb_fcharge_rows_selected = [];
   var sb_fchargeTable =  $('#sb_fcharge-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_fcharge-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "fc_floor_txt" },

            { data: "fc_charge_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="floorcharge_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#floorcharge_parent_params').length) {
                        parent_params = parent_params + $('#floorcharge_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=floorcharge&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="floorcharge" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_fcharge_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_fcharge-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_fchargeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_fcharge_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_fcharge_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_fcharge_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_fchargeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_fcharge-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_fchargeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_fcharge-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_fcharge-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_fchargeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_fchargeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-floorcharge-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_fcharge_rows_selected, function(index, rowId){

        $.each($('input[name="floorcharge_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'floorcharge_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#floorcharge_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#floorcharge_dependent_list_box').append($(
                '<div id="floorcharge_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="floorcharge" ' + 
                        'data-entity-id="' + rowId + '" class="badge floorcharge_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#floorcharge_dependent_list_box').on('click', '.floorcharge_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="floorcharge_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#floorcharge_dependent_list_box').find('#floorcharge_list_item_' + entityId).remove();

      
   });
   var sb_unittype_rows_selected = [];
   var sb_unittypeTable =  $('#sb_unittype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_unittype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="unittype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#unittype_parent_params').length) {
                        parent_params = parent_params + $('#unittype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=unittype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="unittype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_unittype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_unittype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_unittypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_unittype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_unittype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_unittype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_unittypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_unittype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_unittypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_unittype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_unittype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_unittypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_unittypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-unittype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_unittype_rows_selected, function(index, rowId){

        $.each($('input[name="unittype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'unittype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#unittype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#unittype_dependent_list_box').append($(
                '<div id="unittype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="unittype" ' + 
                        'data-entity-id="' + rowId + '" class="badge unittype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#unittype_dependent_list_box').on('click', '.unittype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="unittype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#unittype_dependent_list_box').find('#unittype_list_item_' + entityId).remove();

      
   });
   var sb_utypecharge_rows_selected = [];
   var sb_utypechargeTable =  $('#sb_utypecharge-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_utypecharge-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "utc_type_txt" },

            { data: "utc_property_txt" },

            { data: "utc_charge_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="unittypecharge_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#unittypecharge_parent_params').length) {
                        parent_params = parent_params + $('#unittypecharge_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=unittypecharge&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="unittypecharge" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_utypecharge_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_utypecharge-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_utypechargeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_utypecharge_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_utypecharge_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_utypecharge_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_utypechargeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_utypecharge-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_utypechargeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_utypecharge-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_utypecharge-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_utypechargeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_utypechargeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-unittypecharge-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_utypecharge_rows_selected, function(index, rowId){

        $.each($('input[name="unittypecharge_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'unittypecharge_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#unittypecharge_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#unittypecharge_dependent_list_box').append($(
                '<div id="unittypecharge_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="unittypecharge" ' + 
                        'data-entity-id="' + rowId + '" class="badge unittypecharge_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#unittypecharge_dependent_list_box').on('click', '.unittypecharge_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="unittypecharge_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#unittypecharge_dependent_list_box').find('#unittypecharge_list_item_' + entityId).remove();

      
   });
   var sb_unit_rows_selected = [];
   var sb_unitTable =  $('#sb_unit-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_unit-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "u_type_txt" },
            { data: "u_count" },


            { data: "u_floor_txt" },

            { data: "u_building_txt" },

            { data: "u_property_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="unit_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#unit_parent_params').length) {
                        parent_params = parent_params + $('#unit_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=unit&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="unit" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_unit_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_unit-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_unitTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_unit_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_unit_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_unit_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_unitTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_unit-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_unitTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_unit-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_unit-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_unitTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_unitTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-unit-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_unit_rows_selected, function(index, rowId){

        $.each($('input[name="unit_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'unit_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#unit_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#unit_dependent_list_box').append($(
                '<div id="unit_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="unit" ' + 
                        'data-entity-id="' + rowId + '" class="badge unit_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#unit_dependent_list_box').on('click', '.unit_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="unit_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#unit_dependent_list_box').find('#unit_list_item_' + entityId).remove();

      
   });
   var sb_unitcharge_rows_selected = [];
   var sb_unitchargeTable =  $('#sb_unitcharge-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_unitcharge-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "uc_unit_txt" },

            { data: "uc_charge_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="unitcharge_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#unitcharge_parent_params').length) {
                        parent_params = parent_params + $('#unitcharge_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=unitcharge&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="unitcharge" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_unitcharge_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_unitcharge-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_unitchargeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_unitcharge_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_unitcharge_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_unitcharge_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_unitchargeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_unitcharge-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_unitchargeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_unitcharge-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_unitcharge-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_unitchargeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_unitchargeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-unitcharge-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_unitcharge_rows_selected, function(index, rowId){

        $.each($('input[name="unitcharge_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'unitcharge_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#unitcharge_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#unitcharge_dependent_list_box').append($(
                '<div id="unitcharge_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="unitcharge" ' + 
                        'data-entity-id="' + rowId + '" class="badge unitcharge_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#unitcharge_dependent_list_box').on('click', '.unitcharge_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="unitcharge_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#unitcharge_dependent_list_box').find('#unitcharge_list_item_' + entityId).remove();

      
   });
   var sb_pslottype_rows_selected = [];
   var sb_pslottypeTable =  $('#sb_pslottype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_pslottype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="parkingslottype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#parkingslottype_parent_params').length) {
                        parent_params = parent_params + $('#parkingslottype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=parkingslottype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="parkingslottype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_pslottype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_pslottype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_pslottypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_pslottype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_pslottype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_pslottype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pslottypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_pslottype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_pslottypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_pslottype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_pslottype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_pslottypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pslottypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-parkingslottype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_pslottype_rows_selected, function(index, rowId){

        $.each($('input[name="parkingslottype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'parkingslottype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#parkingslottype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#parkingslottype_dependent_list_box').append($(
                '<div id="parkingslottype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="parkingslottype" ' + 
                        'data-entity-id="' + rowId + '" class="badge parkingslottype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#parkingslottype_dependent_list_box').on('click', '.parkingslottype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="parkingslottype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#parkingslottype_dependent_list_box').find('#parkingslottype_list_item_' + entityId).remove();

      
   });
   var sb_pstypecharge_rows_selected = [];
   var sb_pstypechargeTable =  $('#sb_pstypecharge-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_pstypecharge-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "pstc_type_txt" },

            { data: "pstc_charge_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="parkingslottypecharge_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#parkingslottypecharge_parent_params').length) {
                        parent_params = parent_params + $('#parkingslottypecharge_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=parkingslottypecharge&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="parkingslottypecharge" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_pstypecharge_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_pstypecharge-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_pstypechargeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_pstypecharge_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_pstypecharge_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_pstypecharge_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pstypechargeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_pstypecharge-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_pstypechargeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_pstypecharge-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_pstypecharge-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_pstypechargeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pstypechargeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-parkingslottypecharge-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_pstypecharge_rows_selected, function(index, rowId){

        $.each($('input[name="parkingslottypecharge_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'parkingslottypecharge_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#parkingslottypecharge_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#parkingslottypecharge_dependent_list_box').append($(
                '<div id="parkingslottypecharge_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="parkingslottypecharge" ' + 
                        'data-entity-id="' + rowId + '" class="badge parkingslottypecharge_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#parkingslottypecharge_dependent_list_box').on('click', '.parkingslottypecharge_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="parkingslottypecharge_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#parkingslottypecharge_dependent_list_box').find('#parkingslottypecharge_list_item_' + entityId).remove();

      
   });
   var sb_pslot_rows_selected = [];
   var sb_pslotTable =  $('#sb_pslot-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_pslot-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "parking_txt" },

            { data: "type_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="parkingslot_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#parkingslot_parent_params').length) {
                        parent_params = parent_params + $('#parkingslot_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=parkingslot&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="parkingslot" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_pslot_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_pslot-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_pslotTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_pslot_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_pslot_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_pslot_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pslotTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_pslot-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_pslotTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_pslot-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_pslot-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_pslotTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pslotTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-parkingslot-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_pslot_rows_selected, function(index, rowId){

        $.each($('input[name="parkingslot_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'parkingslot_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#parkingslot_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#parkingslot_dependent_list_box').append($(
                '<div id="parkingslot_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="parkingslot" ' + 
                        'data-entity-id="' + rowId + '" class="badge parkingslot_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#parkingslot_dependent_list_box').on('click', '.parkingslot_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="parkingslot_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#parkingslot_dependent_list_box').find('#parkingslot_list_item_' + entityId).remove();

      
   });
   var sb_agreecat_rows_selected = [];
   var sb_agreecatTable =  $('#sb_agreecat-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_agreecat-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="agreementcategory_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#agreementcategory_parent_params').length) {
                        parent_params = parent_params + $('#agreementcategory_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=agreementcategory&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="agreementcategory" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_agreecat_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_agreecat-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_agreecatTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_agreecat_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_agreecat_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_agreecat_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreecatTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_agreecat-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_agreecatTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_agreecat-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_agreecat-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_agreecatTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreecatTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-agreementcategory-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_agreecat_rows_selected, function(index, rowId){

        $.each($('input[name="agreementcategory_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'agreementcategory_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#agreementcategory_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#agreementcategory_dependent_list_box').append($(
                '<div id="agreementcategory_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="agreementcategory" ' + 
                        'data-entity-id="' + rowId + '" class="badge agreementcategory_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#agreementcategory_dependent_list_box').on('click', '.agreementcategory_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="agreementcategory_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#agreementcategory_dependent_list_box').find('#agreementcategory_list_item_' + entityId).remove();

      
   });
   var sb_agreetype_rows_selected = [];
   var sb_agreetypeTable =  $('#sb_agreetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_agreetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="agreementtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#agreementtype_parent_params').length) {
                        parent_params = parent_params + $('#agreementtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=agreementtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="agreementtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_agreetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_agreetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_agreetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_agreetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_agreetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_agreetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_agreetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_agreetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_agreetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_agreetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_agreetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-agreementtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_agreetype_rows_selected, function(index, rowId){

        $.each($('input[name="agreementtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'agreementtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#agreementtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#agreementtype_dependent_list_box').append($(
                '<div id="agreementtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="agreementtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge agreementtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#agreementtype_dependent_list_box').on('click', '.agreementtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="agreementtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#agreementtype_dependent_list_box').find('#agreementtype_list_item_' + entityId).remove();

      
   });
   var sb_agreetypecharge_rows_selected = [];
   var sb_agreetypechargeTable =  $('#sb_agreetypecharge-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_agreetypecharge-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "atc_type_txt" },

            { data: "atc_charge_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="agreementtypecharge_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#agreementtypecharge_parent_params').length) {
                        parent_params = parent_params + $('#agreementtypecharge_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=agreementtypecharge&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="agreementtypecharge" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_agreetypecharge_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_agreetypecharge-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_agreetypechargeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_agreetypecharge_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_agreetypecharge_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_agreetypecharge_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreetypechargeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_agreetypecharge-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_agreetypechargeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_agreetypecharge-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_agreetypecharge-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_agreetypechargeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreetypechargeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-agreementtypecharge-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_agreetypecharge_rows_selected, function(index, rowId){

        $.each($('input[name="agreementtypecharge_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'agreementtypecharge_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#agreementtypecharge_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#agreementtypecharge_dependent_list_box').append($(
                '<div id="agreementtypecharge_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="agreementtypecharge" ' + 
                        'data-entity-id="' + rowId + '" class="badge agreementtypecharge_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#agreementtypecharge_dependent_list_box').on('click', '.agreementtypecharge_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="agreementtypecharge_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#agreementtypecharge_dependent_list_box').find('#agreementtypecharge_list_item_' + entityId).remove();

      
   });
   var sb_termtype_rows_selected = [];
   var sb_termtypeTable =  $('#sb_termtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_termtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "business_category_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="termtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#termtype_parent_params').length) {
                        parent_params = parent_params + $('#termtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=termtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="termtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_termtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_termtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_termtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_termtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_termtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_termtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_termtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_termtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_termtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_termtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_termtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_termtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_termtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-termtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_termtype_rows_selected, function(index, rowId){

        $.each($('input[name="termtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'termtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#termtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#termtype_dependent_list_box').append($(
                '<div id="termtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="termtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge termtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#termtype_dependent_list_box').on('click', '.termtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="termtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#termtype_dependent_list_box').find('#termtype_list_item_' + entityId).remove();

      
   });
   var sb_term_rows_selected = [];
   var sb_termTable =  $('#sb_term-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_term-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "t_type_txt" },
            { data: "name" },

            { data: "description" },

            { data: "value" },

            { data: "from_start" },

            { data: "thru_end" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="term_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#term_parent_params').length) {
                        parent_params = parent_params + $('#term_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=term&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="term" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_term_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_term-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_termTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_term_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_term_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_term_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_termTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_term-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_termTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_term-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_term-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_termTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_termTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-term-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_term_rows_selected, function(index, rowId){

        $.each($('input[name="term_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'term_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#term_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#term_dependent_list_box').append($(
                '<div id="term_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="term" ' + 
                        'data-entity-id="' + rowId + '" class="badge term_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#term_dependent_list_box').on('click', '.term_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="term_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#term_dependent_list_box').find('#term_list_item_' + entityId).remove();

      
   });
   var sb_agreement_rows_selected = [];
   var sb_agreementTable =  $('#sb_agreement-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_agreement-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "a_party_txt" },

            { data: "a_counter_party_txt" },

            { data: "a_property_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "description" },

            { data: "date_start" },

            { data: "date_end" },

            { data: "date_created" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="agreement_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#agreement_parent_params').length) {
                        parent_params = parent_params + $('#agreement_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=agreement&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="agreement" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_agreement_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_agreement-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_agreementTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_agreement_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_agreement_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_agreement_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreementTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_agreement-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_agreementTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_agreement-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_agreement-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_agreementTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreementTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-agreement-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_agreement_rows_selected, function(index, rowId){

        $.each($('input[name="agreement_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'agreement_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#agreement_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#agreement_dependent_list_box').append($(
                '<div id="agreement_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="agreement" ' + 
                        'data-entity-id="' + rowId + '" class="badge agreement_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#agreement_dependent_list_box').on('click', '.agreement_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="agreement_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#agreement_dependent_list_box').find('#agreement_list_item_' + entityId).remove();

      
   });
   var sb_purchaseagrmnt_rows_selected = [];
   var sb_purchaseagrmntTable =  $('#sb_purchaseagrmnt-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_purchaseagrmnt-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "pa_seller_txt" },

            { data: "pa_buyer_txt" },

            { data: "pa_listagent_txt" },

            { data: "pa_sellagent_txt" },
            { data: "name" },

            { data: "price" },

            { data: "date_created" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="purchaseagreement_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#purchaseagreement_parent_params').length) {
                        parent_params = parent_params + $('#purchaseagreement_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=purchaseagreement&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="purchaseagreement" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_purchaseagrmnt_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_purchaseagrmnt-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_purchaseagrmntTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_purchaseagrmnt_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_purchaseagrmnt_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_purchaseagrmnt_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_purchaseagrmntTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_purchaseagrmnt-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_purchaseagrmntTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_purchaseagrmnt-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_purchaseagrmnt-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_purchaseagrmntTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_purchaseagrmntTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-purchaseagreement-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_purchaseagrmnt_rows_selected, function(index, rowId){

        $.each($('input[name="purchaseagreement_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'purchaseagreement_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#purchaseagreement_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#purchaseagreement_dependent_list_box').append($(
                '<div id="purchaseagreement_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="purchaseagreement" ' + 
                        'data-entity-id="' + rowId + '" class="badge purchaseagreement_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#purchaseagreement_dependent_list_box').on('click', '.purchaseagreement_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="purchaseagreement_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#purchaseagreement_dependent_list_box').find('#purchaseagreement_list_item_' + entityId).remove();

      
   });
   var sb_settlementdata_rows_selected = [];
   var sb_settlementdataTable =  $('#sb_settlementdata-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_settlementdata-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "sd_agreement_txt" },
            { data: "name" },

            { data: "settle_date" },

            { data: "price" },

            { data: "deposit" },

            { data: "closing_amount" },

            { data: "late_fee" },

            { data: "financing_type" },

            { data: "date_created" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="settlementdata_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#settlementdata_parent_params').length) {
                        parent_params = parent_params + $('#settlementdata_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=settlementdata&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="settlementdata" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_settlementdata_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_settlementdata-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_settlementdataTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_settlementdata_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_settlementdata_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_settlementdata_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_settlementdataTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_settlementdata-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_settlementdataTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_settlementdata-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_settlementdata-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_settlementdataTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_settlementdataTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-settlementdata-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_settlementdata_rows_selected, function(index, rowId){

        $.each($('input[name="settlementdata_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'settlementdata_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#settlementdata_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#settlementdata_dependent_list_box').append($(
                '<div id="settlementdata_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="settlementdata" ' + 
                        'data-entity-id="' + rowId + '" class="badge settlementdata_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#settlementdata_dependent_list_box').on('click', '.settlementdata_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="settlementdata_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#settlementdata_dependent_list_box').find('#settlementdata_list_item_' + entityId).remove();

      
   });
   var sb_settledataloan_rows_selected = [];
   var sb_settledataloanTable =  $('#sb_settledataloan-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_settledataloan-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "li_settledata_txt" },
            { data: "name" },

            { data: "loan_date" },

            { data: "loan_amount" },

            { data: "interest_rate" },

            { data: "term" },

            { data: "loan_type" },

            { data: "date_created" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="settlementdataloan_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#settlementdataloan_parent_params').length) {
                        parent_params = parent_params + $('#settlementdataloan_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=settlementdataloan&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="settlementdataloan" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_settledataloan_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_settledataloan-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_settledataloanTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_settledataloan_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_settledataloan_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_settledataloan_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_settledataloanTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_settledataloan-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_settledataloanTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_settledataloan-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_settledataloan-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_settledataloanTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_settledataloanTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-settlementdataloan-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_settledataloan_rows_selected, function(index, rowId){

        $.each($('input[name="settlementdataloan_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'settlementdataloan_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#settlementdataloan_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#settlementdataloan_dependent_list_box').append($(
                '<div id="settlementdataloan_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="settlementdataloan" ' + 
                        'data-entity-id="' + rowId + '" class="badge settlementdataloan_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#settlementdataloan_dependent_list_box').on('click', '.settlementdataloan_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="settlementdataloan_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#settlementdataloan_dependent_list_box').find('#settlementdataloan_list_item_' + entityId).remove();

      
   });
   var sb_agrmntitemtype_rows_selected = [];
   var sb_agrmntitemtypeTable =  $('#sb_agrmntitemtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_agrmntitemtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="agreementitemtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#agreementitemtype_parent_params').length) {
                        parent_params = parent_params + $('#agreementitemtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=agreementitemtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="agreementitemtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_agrmntitemtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_agrmntitemtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_agrmntitemtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_agrmntitemtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_agrmntitemtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_agrmntitemtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agrmntitemtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_agrmntitemtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_agrmntitemtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_agrmntitemtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_agrmntitemtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_agrmntitemtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agrmntitemtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-agreementitemtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_agrmntitemtype_rows_selected, function(index, rowId){

        $.each($('input[name="agreementitemtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'agreementitemtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#agreementitemtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#agreementitemtype_dependent_list_box').append($(
                '<div id="agreementitemtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="agreementitemtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge agreementitemtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#agreementitemtype_dependent_list_box').on('click', '.agreementitemtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="agreementitemtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#agreementitemtype_dependent_list_box').find('#agreementitemtype_list_item_' + entityId).remove();

      
   });
   var sb_agreementitem_rows_selected = [];
   var sb_agreementitemTable =  $('#sb_agreementitem-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_agreementitem-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "ai_agreement_txt" },

            { data: "ai_type_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="agreementitem_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#agreementitem_parent_params').length) {
                        parent_params = parent_params + $('#agreementitem_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=agreementitem&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="agreementitem" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_agreementitem_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_agreementitem-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_agreementitemTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_agreementitem_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_agreementitem_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_agreementitem_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreementitemTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_agreementitem-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_agreementitemTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_agreementitem-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_agreementitem-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_agreementitemTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreementitemTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-agreementitem-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_agreementitem_rows_selected, function(index, rowId){

        $.each($('input[name="agreementitem_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'agreementitem_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#agreementitem_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#agreementitem_dependent_list_box').append($(
                '<div id="agreementitem_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="agreementitem" ' + 
                        'data-entity-id="' + rowId + '" class="badge agreementitem_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#agreementitem_dependent_list_box').on('click', '.agreementitem_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="agreementitem_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#agreementitem_dependent_list_box').find('#agreementitem_list_item_' + entityId).remove();

      
   });
   var sb_servicetype_rows_selected = [];
   var sb_servicetypeTable =  $('#sb_servicetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_servicetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="servicetype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#servicetype_parent_params').length) {
                        parent_params = parent_params + $('#servicetype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=servicetype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="servicetype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_servicetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_servicetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_servicetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_servicetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_servicetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_servicetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_servicetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_servicetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_servicetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_servicetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_servicetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_servicetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_servicetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-servicetype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_servicetype_rows_selected, function(index, rowId){

        $.each($('input[name="servicetype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'servicetype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#servicetype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#servicetype_dependent_list_box').append($(
                '<div id="servicetype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="servicetype" ' + 
                        'data-entity-id="' + rowId + '" class="badge servicetype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#servicetype_dependent_list_box').on('click', '.servicetype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="servicetype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#servicetype_dependent_list_box').find('#servicetype_list_item_' + entityId).remove();

      
   });
   var sb_service_rows_selected = [];
   var sb_serviceTable =  $('#sb_service-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_service-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "s_type_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="service_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#service_parent_params').length) {
                        parent_params = parent_params + $('#service_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=service&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="service" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_service_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_service-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_serviceTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_service_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_service_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_service_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_serviceTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_service-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_serviceTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_service-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_service-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_serviceTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_serviceTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-service-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_service_rows_selected, function(index, rowId){

        $.each($('input[name="service_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'service_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#service_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#service_dependent_list_box').append($(
                '<div id="service_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="service" ' + 
                        'data-entity-id="' + rowId + '" class="badge service_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#service_dependent_list_box').on('click', '.service_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="service_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#service_dependent_list_box').find('#service_list_item_' + entityId).remove();

      
   });
   var sb_agreeservice_rows_selected = [];
   var sb_agreeserviceTable =  $('#sb_agreeservice-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_agreeservice-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "s_service_txt" },

            { data: "s_agreement_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="agreementservice_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#agreementservice_parent_params').length) {
                        parent_params = parent_params + $('#agreementservice_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=agreementservice&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="agreementservice" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_agreeservice_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_agreeservice-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_agreeserviceTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_agreeservice_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_agreeservice_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_agreeservice_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreeserviceTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_agreeservice-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_agreeserviceTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_agreeservice-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_agreeservice-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_agreeserviceTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreeserviceTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-agreementservice-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_agreeservice_rows_selected, function(index, rowId){

        $.each($('input[name="agreementservice_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'agreementservice_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#agreementservice_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#agreementservice_dependent_list_box').append($(
                '<div id="agreementservice_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="agreementservice" ' + 
                        'data-entity-id="' + rowId + '" class="badge agreementservice_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#agreementservice_dependent_list_box').on('click', '.agreementservice_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="agreementservice_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#agreementservice_dependent_list_box').find('#agreementservice_list_item_' + entityId).remove();

      
   });
   var sb_agreeunit_rows_selected = [];
   var sb_agreeunitTable =  $('#sb_agreeunit-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_agreeunit-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "au_agreement_txt" },

            { data: "au_unit_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="agreementunit_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#agreementunit_parent_params').length) {
                        parent_params = parent_params + $('#agreementunit_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=agreementunit&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="agreementunit" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_agreeunit_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_agreeunit-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_agreeunitTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_agreeunit_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_agreeunit_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_agreeunit_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreeunitTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_agreeunit-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_agreeunitTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_agreeunit-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_agreeunit-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_agreeunitTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreeunitTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-agreementunit-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_agreeunit_rows_selected, function(index, rowId){

        $.each($('input[name="agreementunit_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'agreementunit_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#agreementunit_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#agreementunit_dependent_list_box').append($(
                '<div id="agreementunit_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="agreementunit" ' + 
                        'data-entity-id="' + rowId + '" class="badge agreementunit_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#agreementunit_dependent_list_box').on('click', '.agreementunit_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="agreementunit_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#agreementunit_dependent_list_box').find('#agreementunit_list_item_' + entityId).remove();

      
   });
   var sb_agreecharge_rows_selected = [];
   var sb_agreechargeTable =  $('#sb_agreecharge-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_agreecharge-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "ac_agreement_txt" },

            { data: "ac_charge_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="agreementcharge_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#agreementcharge_parent_params').length) {
                        parent_params = parent_params + $('#agreementcharge_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=agreementcharge&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="agreementcharge" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_agreecharge_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_agreecharge-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_agreechargeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_agreecharge_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_agreecharge_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_agreecharge_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreechargeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_agreecharge-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_agreechargeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_agreecharge-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_agreecharge-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_agreechargeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreechargeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-agreementcharge-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_agreecharge_rows_selected, function(index, rowId){

        $.each($('input[name="agreementcharge_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'agreementcharge_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#agreementcharge_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#agreementcharge_dependent_list_box').append($(
                '<div id="agreementcharge_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="agreementcharge" ' + 
                        'data-entity-id="' + rowId + '" class="badge agreementcharge_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#agreementcharge_dependent_list_box').on('click', '.agreementcharge_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="agreementcharge_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#agreementcharge_dependent_list_box').find('#agreementcharge_list_item_' + entityId).remove();

      
   });
   var sb_agreeterm_rows_selected = [];
   var sb_agreetermTable =  $('#sb_agreeterm-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_agreeterm-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "at_agreement_txt" },

            { data: "at_term_txt" },
            { data: "name" },

            { data: "value" },

            { data: "from_start" },

            { data: "thru_end" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="agreementterm_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#agreementterm_parent_params').length) {
                        parent_params = parent_params + $('#agreementterm_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=agreementterm&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="agreementterm" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_agreeterm_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_agreeterm-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_agreetermTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_agreeterm_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_agreeterm_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_agreeterm_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreetermTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_agreeterm-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_agreetermTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_agreeterm-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_agreeterm-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_agreetermTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_agreetermTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-agreementterm-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_agreeterm_rows_selected, function(index, rowId){

        $.each($('input[name="agreementterm_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'agreementterm_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#agreementterm_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#agreementterm_dependent_list_box').append($(
                '<div id="agreementterm_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="agreementterm" ' + 
                        'data-entity-id="' + rowId + '" class="badge agreementterm_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#agreementterm_dependent_list_box').on('click', '.agreementterm_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="agreementterm_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#agreementterm_dependent_list_box').find('#agreementterm_list_item_' + entityId).remove();

      
   });
   var sb_chargeinagrmt_rows_selected = [];
   var sb_chargeinagrmtTable =  $('#sb_chargeinagrmt-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_chargeinagrmt-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "cia_agreement_txt" },

            { data: "cia_charge_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="chargeinagreement_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#chargeinagreement_parent_params').length) {
                        parent_params = parent_params + $('#chargeinagreement_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=chargeinagreement&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="chargeinagreement" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_chargeinagrmt_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_chargeinagrmt-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_chargeinagrmtTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_chargeinagrmt_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_chargeinagrmt_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_chargeinagrmt_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_chargeinagrmtTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_chargeinagrmt-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_chargeinagrmtTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_chargeinagrmt-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_chargeinagrmt-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_chargeinagrmtTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_chargeinagrmtTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-chargeinagreement-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_chargeinagrmt_rows_selected, function(index, rowId){

        $.each($('input[name="chargeinagreement_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'chargeinagreement_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#chargeinagreement_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#chargeinagreement_dependent_list_box').append($(
                '<div id="chargeinagreement_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="chargeinagreement" ' + 
                        'data-entity-id="' + rowId + '" class="badge chargeinagreement_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#chargeinagreement_dependent_list_box').on('click', '.chargeinagreement_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="chargeinagreement_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#chargeinagreement_dependent_list_box').find('#chargeinagreement_list_item_' + entityId).remove();

      
   });
   var sb_rentstatus_rows_selected = [];
   var sb_rentstatusTable =  $('#sb_rentstatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_rentstatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="rentstatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#rentstatus_parent_params').length) {
                        parent_params = parent_params + $('#rentstatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=rentstatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="rentstatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_rentstatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_rentstatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_rentstatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_rentstatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_rentstatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_rentstatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_rentstatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_rentstatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_rentstatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_rentstatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_rentstatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_rentstatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_rentstatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-rentstatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_rentstatus_rows_selected, function(index, rowId){

        $.each($('input[name="rentstatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'rentstatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#rentstatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#rentstatus_dependent_list_box').append($(
                '<div id="rentstatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="rentstatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge rentstatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#rentstatus_dependent_list_box').on('click', '.rentstatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="rentstatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#rentstatus_dependent_list_box').find('#rentstatus_list_item_' + entityId).remove();

      
   });
   var sb_rent_rows_selected = [];
   var sb_rentTable =  $('#sb_rent-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_rent-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "amount" },

            { data: "due_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="rent_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#rent_parent_params').length) {
                        parent_params = parent_params + $('#rent_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=rent&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="rent" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_rent_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_rent-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_rentTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_rent_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_rent_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_rent_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_rentTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_rent-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_rentTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_rent-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_rent-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_rentTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_rentTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-rent-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_rent_rows_selected, function(index, rowId){

        $.each($('input[name="rent_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'rent_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#rent_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#rent_dependent_list_box').append($(
                '<div id="rent_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="rent" ' + 
                        'data-entity-id="' + rowId + '" class="badge rent_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#rent_dependent_list_box').on('click', '.rent_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="rent_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#rent_dependent_list_box').find('#rent_list_item_' + entityId).remove();

      
   });
   var sb_assmttype_rows_selected = [];
   var sb_assmttypeTable =  $('#sb_assmttype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_assmttype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="assessmenttype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#assessmenttype_parent_params').length) {
                        parent_params = parent_params + $('#assessmenttype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=assessmenttype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="assessmenttype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_assmttype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_assmttype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_assmttypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_assmttype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_assmttype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_assmttype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_assmttypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_assmttype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_assmttypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_assmttype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_assmttype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_assmttypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_assmttypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-assessmenttype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_assmttype_rows_selected, function(index, rowId){

        $.each($('input[name="assessmenttype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'assessmenttype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#assessmenttype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#assessmenttype_dependent_list_box').append($(
                '<div id="assessmenttype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="assessmenttype" ' + 
                        'data-entity-id="' + rowId + '" class="badge assessmenttype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#assessmenttype_dependent_list_box').on('click', '.assessmenttype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="assessmenttype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#assessmenttype_dependent_list_box').find('#assessmenttype_list_item_' + entityId).remove();

      
   });
   var sb_assessment_rows_selected = [];
   var sb_assessmentTable =  $('#sb_assessment-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_assessment-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "a_land_txt" },
            { data: "name" },

            { data: "assmt_created" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="assessment_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#assessment_parent_params').length) {
                        parent_params = parent_params + $('#assessment_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=assessment&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="assessment" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_assessment_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_assessment-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_assessmentTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_assessment_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_assessment_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_assessment_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_assessmentTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_assessment-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_assessmentTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_assessment-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_assessment-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_assessmentTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_assessmentTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-assessment-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_assessment_rows_selected, function(index, rowId){

        $.each($('input[name="assessment_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'assessment_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#assessment_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#assessment_dependent_list_box').append($(
                '<div id="assessment_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="assessment" ' + 
                        'data-entity-id="' + rowId + '" class="badge assessment_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#assessment_dependent_list_box').on('click', '.assessment_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="assessment_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#assessment_dependent_list_box').find('#assessment_list_item_' + entityId).remove();

      
   });
   var sb_sdtype_rows_selected = [];
   var sb_sdtypeTable =  $('#sb_sdtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_sdtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="salesdatatype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#salesdatatype_parent_params').length) {
                        parent_params = parent_params + $('#salesdatatype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=salesdatatype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="salesdatatype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_sdtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_sdtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_sdtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_sdtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_sdtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_sdtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_sdtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_sdtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_sdtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_sdtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_sdtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_sdtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_sdtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-salesdatatype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_sdtype_rows_selected, function(index, rowId){

        $.each($('input[name="salesdatatype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'salesdatatype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#salesdatatype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#salesdatatype_dependent_list_box').append($(
                '<div id="salesdatatype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="salesdatatype" ' + 
                        'data-entity-id="' + rowId + '" class="badge salesdatatype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#salesdatatype_dependent_list_box').on('click', '.salesdatatype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="salesdatatype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#salesdatatype_dependent_list_box').find('#salesdatatype_list_item_' + entityId).remove();

      
   });
   var sb_salesdata_rows_selected = [];
   var sb_salesdataTable =  $('#sb_salesdata-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_salesdata-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="salesdata_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#salesdata_parent_params').length) {
                        parent_params = parent_params + $('#salesdata_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=salesdata&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="salesdata" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_salesdata_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_salesdata-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_salesdataTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_salesdata_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_salesdata_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_salesdata_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_salesdataTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_salesdata-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_salesdataTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_salesdata-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_salesdata-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_salesdataTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_salesdataTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-salesdata-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_salesdata_rows_selected, function(index, rowId){

        $.each($('input[name="salesdata_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'salesdata_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#salesdata_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#salesdata_dependent_list_box').append($(
                '<div id="salesdata_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="salesdata" ' + 
                        'data-entity-id="' + rowId + '" class="badge salesdata_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#salesdata_dependent_list_box').on('click', '.salesdata_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="salesdata_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#salesdata_dependent_list_box').find('#salesdata_list_item_' + entityId).remove();

      
   });
   var sb_sditemtype_rows_selected = [];
   var sb_sditemtypeTable =  $('#sb_sditemtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_sditemtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="salesdataitemtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#salesdataitemtype_parent_params').length) {
                        parent_params = parent_params + $('#salesdataitemtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=salesdataitemtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="salesdataitemtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_sditemtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_sditemtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_sditemtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_sditemtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_sditemtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_sditemtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_sditemtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_sditemtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_sditemtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_sditemtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_sditemtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_sditemtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_sditemtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-salesdataitemtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_sditemtype_rows_selected, function(index, rowId){

        $.each($('input[name="salesdataitemtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'salesdataitemtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#salesdataitemtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#salesdataitemtype_dependent_list_box').append($(
                '<div id="salesdataitemtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="salesdataitemtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge salesdataitemtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#salesdataitemtype_dependent_list_box').on('click', '.salesdataitemtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="salesdataitemtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#salesdataitemtype_dependent_list_box').find('#salesdataitemtype_list_item_' + entityId).remove();

      
   });
   var sb_salesdataitem_rows_selected = [];
   var sb_salesdataitemTable =  $('#sb_salesdataitem-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_salesdataitem-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "construction_date" },

            { data: "proximity" },

            { data: "address_1" },

            { data: "sales_date" },

            { data: "sales_price" },

            { data: "size" },

            { data: "financing_type" },

            { data: "land_tenure" },

            { data: "p_adjustment" },

            { data: "t_adjustment" },

            { data: "l_adjustment" },

            { data: "zone_code" },

            { data: "zone_description" },

            { data: "zone_compliant_fg" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="salesdataitem_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#salesdataitem_parent_params').length) {
                        parent_params = parent_params + $('#salesdataitem_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=salesdataitem&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="salesdataitem" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_salesdataitem_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_salesdataitem-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_salesdataitemTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_salesdataitem_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_salesdataitem_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_salesdataitem_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_salesdataitemTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_salesdataitem-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_salesdataitemTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_salesdataitem-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_salesdataitem-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_salesdataitemTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_salesdataitemTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-salesdataitem-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_salesdataitem_rows_selected, function(index, rowId){

        $.each($('input[name="salesdataitem_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'salesdataitem_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#salesdataitem_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#salesdataitem_dependent_list_box').append($(
                '<div id="salesdataitem_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="salesdataitem" ' + 
                        'data-entity-id="' + rowId + '" class="badge salesdataitem_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#salesdataitem_dependent_list_box').on('click', '.salesdataitem_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="salesdataitem_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#salesdataitem_dependent_list_box').find('#salesdataitem_list_item_' + entityId).remove();

      
   });
   var sb_cdtype_rows_selected = [];
   var sb_cdtypeTable =  $('#sb_cdtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_cdtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="costdatatype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#costdatatype_parent_params').length) {
                        parent_params = parent_params + $('#costdatatype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=costdatatype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="costdatatype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_cdtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_cdtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_cdtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_cdtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_cdtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_cdtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_cdtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_cdtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_cdtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_cdtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_cdtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_cdtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_cdtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-costdatatype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_cdtype_rows_selected, function(index, rowId){

        $.each($('input[name="costdatatype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'costdatatype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#costdatatype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#costdatatype_dependent_list_box').append($(
                '<div id="costdatatype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="costdatatype" ' + 
                        'data-entity-id="' + rowId + '" class="badge costdatatype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#costdatatype_dependent_list_box').on('click', '.costdatatype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="costdatatype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#costdatatype_dependent_list_box').find('#costdatatype_list_item_' + entityId).remove();

      
   });
   var sb_costdata_rows_selected = [];
   var sb_costdataTable =  $('#sb_costdata-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_costdata-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "land_value" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="costdata_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#costdata_parent_params').length) {
                        parent_params = parent_params + $('#costdata_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=costdata&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="costdata" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_costdata_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_costdata-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_costdataTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_costdata_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_costdata_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_costdata_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_costdataTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_costdata-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_costdataTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_costdata-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_costdata-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_costdataTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_costdataTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-costdata-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_costdata_rows_selected, function(index, rowId){

        $.each($('input[name="costdata_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'costdata_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#costdata_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#costdata_dependent_list_box').append($(
                '<div id="costdata_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="costdata" ' + 
                        'data-entity-id="' + rowId + '" class="badge costdata_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#costdata_dependent_list_box').on('click', '.costdata_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="costdata_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#costdata_dependent_list_box').find('#costdata_list_item_' + entityId).remove();

      
   });
   var sb_cditemtype_rows_selected = [];
   var sb_cditemtypeTable =  $('#sb_cditemtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_cditemtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="costdataitemtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#costdataitemtype_parent_params').length) {
                        parent_params = parent_params + $('#costdataitemtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=costdataitemtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="costdataitemtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_cditemtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_cditemtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_cditemtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_cditemtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_cditemtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_cditemtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_cditemtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_cditemtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_cditemtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_cditemtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_cditemtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_cditemtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_cditemtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-costdataitemtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_cditemtype_rows_selected, function(index, rowId){

        $.each($('input[name="costdataitemtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'costdataitemtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#costdataitemtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#costdataitemtype_dependent_list_box').append($(
                '<div id="costdataitemtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="costdataitemtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge costdataitemtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#costdataitemtype_dependent_list_box').on('click', '.costdataitemtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="costdataitemtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#costdataitemtype_dependent_list_box').find('#costdataitemtype_list_item_' + entityId).remove();

      
   });
   var sb_cditemdata_rows_selected = [];
   var sb_cditemdataTable =  $('#sb_cditemdata-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_cditemdata-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "cdi_costdata_txt" },

            { data: "cdi_type_txt" },
            { data: "name" },

            { data: "direct_cost" },

            { data: "indirect_cost" },

            { data: "p_depreciation" },

            { data: "f_depreciation" },

            { data: "e_depreciation" },

            { data: "economic_life" },

            { data: "r_economic_life" },

            { data: "effective_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="costdataitem_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#costdataitem_parent_params').length) {
                        parent_params = parent_params + $('#costdataitem_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=costdataitem&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="costdataitem" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_cditemdata_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_cditemdata-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_cditemdataTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_cditemdata_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_cditemdata_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_cditemdata_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_cditemdataTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_cditemdata-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_cditemdataTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_cditemdata-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_cditemdata-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_cditemdataTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_cditemdataTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-costdataitem-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_cditemdata_rows_selected, function(index, rowId){

        $.each($('input[name="costdataitem_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'costdataitem_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#costdataitem_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#costdataitem_dependent_list_box').append($(
                '<div id="costdataitem_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="costdataitem" ' + 
                        'data-entity-id="' + rowId + '" class="badge costdataitem_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#costdataitem_dependent_list_box').on('click', '.costdataitem_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="costdataitem_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#costdataitem_dependent_list_box').find('#costdataitem_list_item_' + entityId).remove();

      
   });
   var sb_idtype_rows_selected = [];
   var sb_idtypeTable =  $('#sb_idtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_idtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="incomedatatype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#incomedatatype_parent_params').length) {
                        parent_params = parent_params + $('#incomedatatype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=incomedatatype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="incomedatatype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_idtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_idtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_idtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_idtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_idtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_idtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_idtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_idtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_idtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_idtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_idtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_idtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_idtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-incomedatatype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_idtype_rows_selected, function(index, rowId){

        $.each($('input[name="incomedatatype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'incomedatatype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#incomedatatype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#incomedatatype_dependent_list_box').append($(
                '<div id="incomedatatype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="incomedatatype" ' + 
                        'data-entity-id="' + rowId + '" class="badge incomedatatype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#incomedatatype_dependent_list_box').on('click', '.incomedatatype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="incomedatatype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#incomedatatype_dependent_list_box').find('#incomedatatype_list_item_' + entityId).remove();

      
   });
   var sb_incomedata_rows_selected = [];
   var sb_incomedataTable =  $('#sb_incomedata-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_incomedata-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "pgi" },

            { data: "additional_income" },

            { data: "vacancy_allowance" },

            { data: "credit_loss" },

            { data: "cap_rate" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="incomedata_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#incomedata_parent_params').length) {
                        parent_params = parent_params + $('#incomedata_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=incomedata&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="incomedata" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_incomedata_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_incomedata-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_incomedataTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_incomedata_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_incomedata_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_incomedata_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_incomedataTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_incomedata-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_incomedataTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_incomedata-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_incomedata-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_incomedataTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_incomedataTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-incomedata-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_incomedata_rows_selected, function(index, rowId){

        $.each($('input[name="incomedata_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'incomedata_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#incomedata_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#incomedata_dependent_list_box').append($(
                '<div id="incomedata_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="incomedata" ' + 
                        'data-entity-id="' + rowId + '" class="badge incomedata_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#incomedata_dependent_list_box').on('click', '.incomedata_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="incomedata_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#incomedata_dependent_list_box').find('#incomedata_list_item_' + entityId).remove();

      
   });
   var sb_idetype_rows_selected = [];
   var sb_idetypeTable =  $('#sb_idetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_idetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="incomedataexpensetype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#incomedataexpensetype_parent_params').length) {
                        parent_params = parent_params + $('#incomedataexpensetype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=incomedataexpensetype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="incomedataexpensetype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_idetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_idetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_idetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_idetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_idetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_idetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_idetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_idetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_idetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_idetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_idetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_idetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_idetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-incomedataexpensetype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_idetype_rows_selected, function(index, rowId){

        $.each($('input[name="incomedataexpensetype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'incomedataexpensetype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#incomedataexpensetype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#incomedataexpensetype_dependent_list_box').append($(
                '<div id="incomedataexpensetype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="incomedataexpensetype" ' + 
                        'data-entity-id="' + rowId + '" class="badge incomedataexpensetype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#incomedataexpensetype_dependent_list_box').on('click', '.incomedataexpensetype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="incomedataexpensetype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#incomedataexpensetype_dependent_list_box').find('#incomedataexpensetype_list_item_' + entityId).remove();

      
   });
   var sb_idexpense_rows_selected = [];
   var sb_idexpenseTable =  $('#sb_idexpense-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_idexpense-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "amount" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="incomedataexpense_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#incomedataexpense_parent_params').length) {
                        parent_params = parent_params + $('#incomedataexpense_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=incomedataexpense&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="incomedataexpense" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_idexpense_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_idexpense-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_idexpenseTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_idexpense_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_idexpense_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_idexpense_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_idexpenseTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_idexpense-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_idexpenseTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_idexpense-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_idexpense-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_idexpenseTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_idexpenseTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-incomedataexpense-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_idexpense_rows_selected, function(index, rowId){

        $.each($('input[name="incomedataexpense_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'incomedataexpense_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#incomedataexpense_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#incomedataexpense_dependent_list_box').append($(
                '<div id="incomedataexpense_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="incomedataexpense" ' + 
                        'data-entity-id="' + rowId + '" class="badge incomedataexpense_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#incomedataexpense_dependent_list_box').on('click', '.incomedataexpense_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="incomedataexpense_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#incomedataexpense_dependent_list_box').find('#incomedataexpense_list_item_' + entityId).remove();

      
   });
   var sb_billaccount_rows_selected = [];
   var sb_billaccountTable =  $('#sb_billaccount-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_billaccount-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "balance" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="billingaccount_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#billingaccount_parent_params').length) {
                        parent_params = parent_params + $('#billingaccount_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=billingaccount&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="billingaccount" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_billaccount_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_billaccount-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_billaccountTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_billaccount_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_billaccount_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_billaccount_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_billaccountTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_billaccount-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_billaccountTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_billaccount-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_billaccount-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_billaccountTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_billaccountTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-billingaccount-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_billaccount_rows_selected, function(index, rowId){

        $.each($('input[name="billingaccount_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'billingaccount_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#billingaccount_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#billingaccount_dependent_list_box').append($(
                '<div id="billingaccount_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="billingaccount" ' + 
                        'data-entity-id="' + rowId + '" class="badge billingaccount_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#billingaccount_dependent_list_box').on('click', '.billingaccount_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="billingaccount_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#billingaccount_dependent_list_box').find('#billingaccount_list_item_' + entityId).remove();

      
   });
   var sb_accttxntype_rows_selected = [];
   var sb_accttxntypeTable =  $('#sb_accttxntype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_accttxntype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },

            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="accounttransactiontype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#accounttransactiontype_parent_params').length) {
                        parent_params = parent_params + $('#accounttransactiontype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=accounttransactiontype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="accounttransactiontype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_accttxntype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_accttxntype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_accttxntypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_accttxntype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_accttxntype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_accttxntype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_accttxntypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_accttxntype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_accttxntypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_accttxntype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_accttxntype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_accttxntypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_accttxntypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-accounttransactiontype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_accttxntype_rows_selected, function(index, rowId){

        $.each($('input[name="accounttransactiontype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'accounttransactiontype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#accounttransactiontype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#accounttransactiontype_dependent_list_box').append($(
                '<div id="accounttransactiontype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="accounttransactiontype" ' + 
                        'data-entity-id="' + rowId + '" class="badge accounttransactiontype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#accounttransactiontype_dependent_list_box').on('click', '.accounttransactiontype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="accounttransactiontype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#accounttransactiontype_dependent_list_box').find('#accounttransactiontype_list_item_' + entityId).remove();

      
   });
   var sb_accttxnstatus_rows_selected = [];
   var sb_accttxnstatusTable =  $('#sb_accttxnstatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_accttxnstatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },

            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="accounttransactionstatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#accounttransactionstatus_parent_params').length) {
                        parent_params = parent_params + $('#accounttransactionstatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=accounttransactionstatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="accounttransactionstatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_accttxnstatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_accttxnstatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_accttxnstatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_accttxnstatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_accttxnstatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_accttxnstatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_accttxnstatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_accttxnstatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_accttxnstatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_accttxnstatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_accttxnstatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_accttxnstatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_accttxnstatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-accounttransactionstatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_accttxnstatus_rows_selected, function(index, rowId){

        $.each($('input[name="accounttransactionstatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'accounttransactionstatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#accounttransactionstatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#accounttransactionstatus_dependent_list_box').append($(
                '<div id="accounttransactionstatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="accounttransactionstatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge accounttransactionstatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#accounttransactionstatus_dependent_list_box').on('click', '.accounttransactionstatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="accounttransactionstatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#accounttransactionstatus_dependent_list_box').find('#accounttransactionstatus_list_item_' + entityId).remove();

      
   });
   var sb_accttransaction_rows_selected = [];
   var sb_accttransactionTable =  $('#sb_accttransaction-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_accttransaction-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "status_txt" },
            { data: "name" },

            { data: "txn_date" },


            { data: "account_txt" },
            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="accounttransaction_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#accounttransaction_parent_params').length) {
                        parent_params = parent_params + $('#accounttransaction_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=accounttransaction&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="accounttransaction" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_accttransaction_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_accttransaction-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_accttransactionTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_accttransaction_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_accttransaction_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_accttransaction_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_accttransactionTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_accttransaction-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_accttransactionTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_accttransaction-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_accttransaction-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_accttransactionTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_accttransactionTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-accounttransaction-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_accttransaction_rows_selected, function(index, rowId){

        $.each($('input[name="accounttransaction_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'accounttransaction_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#accounttransaction_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#accounttransaction_dependent_list_box').append($(
                '<div id="accounttransaction_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="accounttransaction" ' + 
                        'data-entity-id="' + rowId + '" class="badge accounttransaction_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#accounttransaction_dependent_list_box').on('click', '.accounttransaction_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="accounttransaction_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#accounttransaction_dependent_list_box').find('#accounttransaction_list_item_' + entityId).remove();

      
   });
   var sb_fundmeth_rows_selected = [];
   var sb_fundmethTable =  $('#sb_fundmeth-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_fundmeth-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="fundingmethod_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#fundingmethod_parent_params').length) {
                        parent_params = parent_params + $('#fundingmethod_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=fundingmethod&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="fundingmethod" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_fundmeth_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_fundmeth-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_fundmethTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_fundmeth_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_fundmeth_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_fundmeth_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_fundmethTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_fundmeth-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_fundmethTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_fundmeth-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_fundmeth-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_fundmethTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_fundmethTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-fundingmethod-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_fundmeth_rows_selected, function(index, rowId){

        $.each($('input[name="fundingmethod_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'fundingmethod_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#fundingmethod_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#fundingmethod_dependent_list_box').append($(
                '<div id="fundingmethod_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="fundingmethod" ' + 
                        'data-entity-id="' + rowId + '" class="badge fundingmethod_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#fundingmethod_dependent_list_box').on('click', '.fundingmethod_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="fundingmethod_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#fundingmethod_dependent_list_box').find('#fundingmethod_list_item_' + entityId).remove();

      
   });
   var sb_templatetype_rows_selected = [];
   var sb_templatetypeTable =  $('#sb_templatetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_templatetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="templatetype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#templatetype_parent_params').length) {
                        parent_params = parent_params + $('#templatetype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=templatetype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="templatetype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_templatetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_templatetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_templatetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_templatetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_templatetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_templatetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_templatetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_templatetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_templatetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_templatetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_templatetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_templatetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_templatetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-templatetype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_templatetype_rows_selected, function(index, rowId){

        $.each($('input[name="templatetype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'templatetype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#templatetype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#templatetype_dependent_list_box').append($(
                '<div id="templatetype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="templatetype" ' + 
                        'data-entity-id="' + rowId + '" class="badge templatetype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#templatetype_dependent_list_box').on('click', '.templatetype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="templatetype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#templatetype_dependent_list_box').find('#templatetype_list_item_' + entityId).remove();

      
   });
   var sb_template_rows_selected = [];
   var sb_templateTable =  $('#sb_template-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_template-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="template_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#template_parent_params').length) {
                        parent_params = parent_params + $('#template_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=template&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="template" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_template_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_template-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_templateTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_template_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_template_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_template_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_templateTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_template-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_templateTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_template-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_template-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_templateTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_templateTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-template-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_template_rows_selected, function(index, rowId){

        $.each($('input[name="template_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'template_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#template_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#template_dependent_list_box').append($(
                '<div id="template_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="template" ' + 
                        'data-entity-id="' + rowId + '" class="badge template_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#template_dependent_list_box').on('click', '.template_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="template_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#template_dependent_list_box').find('#template_list_item_' + entityId).remove();

      
   });
   var sb_invoicetype_rows_selected = [];
   var sb_invoicetypeTable =  $('#sb_invoicetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_invoicetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="invoicetype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#invoicetype_parent_params').length) {
                        parent_params = parent_params + $('#invoicetype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=invoicetype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="invoicetype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_invoicetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_invoicetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_invoicetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_invoicetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_invoicetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_invoicetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoicetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_invoicetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_invoicetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_invoicetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_invoicetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_invoicetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoicetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-invoicetype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_invoicetype_rows_selected, function(index, rowId){

        $.each($('input[name="invoicetype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'invoicetype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#invoicetype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#invoicetype_dependent_list_box').append($(
                '<div id="invoicetype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="invoicetype" ' + 
                        'data-entity-id="' + rowId + '" class="badge invoicetype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#invoicetype_dependent_list_box').on('click', '.invoicetype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="invoicetype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#invoicetype_dependent_list_box').find('#invoicetype_list_item_' + entityId).remove();

      
   });
   var sb_invoicestatus_rows_selected = [];
   var sb_invoicestatusTable =  $('#sb_invoicestatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_invoicestatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="invoicestatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#invoicestatus_parent_params').length) {
                        parent_params = parent_params + $('#invoicestatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=invoicestatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="invoicestatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_invoicestatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_invoicestatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_invoicestatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_invoicestatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_invoicestatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_invoicestatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoicestatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_invoicestatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_invoicestatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_invoicestatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_invoicestatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_invoicestatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoicestatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-invoicestatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_invoicestatus_rows_selected, function(index, rowId){

        $.each($('input[name="invoicestatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'invoicestatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#invoicestatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#invoicestatus_dependent_list_box').append($(
                '<div id="invoicestatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="invoicestatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge invoicestatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#invoicestatus_dependent_list_box').on('click', '.invoicestatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="invoicestatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#invoicestatus_dependent_list_box').find('#invoicestatus_list_item_' + entityId).remove();

      
   });
   var sb_invoice_rows_selected = [];
   var sb_invoiceTable =  $('#sb_invoice-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_invoice-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },


            { data: "owner_role_txt" },

            { data: "bill_acct_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "description" },

            { data: "message" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="invoice_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#invoice_parent_params').length) {
                        parent_params = parent_params + $('#invoice_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=invoice&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="invoice" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_invoice_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_invoice-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_invoiceTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_invoice_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_invoice_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_invoice_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoiceTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_invoice-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_invoiceTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_invoice-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_invoice-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_invoiceTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoiceTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-invoice-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_invoice_rows_selected, function(index, rowId){

        $.each($('input[name="invoice_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'invoice_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#invoice_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#invoice_dependent_list_box').append($(
                '<div id="invoice_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="invoice" ' + 
                        'data-entity-id="' + rowId + '" class="badge invoice_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#invoice_dependent_list_box').on('click', '.invoice_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="invoice_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#invoice_dependent_list_box').find('#invoice_list_item_' + entityId).remove();

      
   });
   var sb_invoicerole_rows_selected = [];
   var sb_invoiceroleTable =  $('#sb_invoicerole-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_invoicerole-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="invoicerole_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#invoicerole_parent_params').length) {
                        parent_params = parent_params + $('#invoicerole_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=invoicerole&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="invoicerole" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_invoicerole_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_invoicerole-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_invoiceroleTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_invoicerole_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_invoicerole_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_invoicerole_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoiceroleTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_invoicerole-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_invoiceroleTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_invoicerole-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_invoicerole-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_invoiceroleTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoiceroleTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-invoicerole-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_invoicerole_rows_selected, function(index, rowId){

        $.each($('input[name="invoicerole_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'invoicerole_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#invoicerole_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#invoicerole_dependent_list_box').append($(
                '<div id="invoicerole_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="invoicerole" ' + 
                        'data-entity-id="' + rowId + '" class="badge invoicerole_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#invoicerole_dependent_list_box').on('click', '.invoicerole_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="invoicerole_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#invoicerole_dependent_list_box').find('#invoicerole_list_item_' + entityId).remove();

      
   });
   var sb_invoiceitemtype_rows_selected = [];
   var sb_invoiceitemtypeTable =  $('#sb_invoiceitemtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_invoiceitemtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="invoiceitemtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#invoiceitemtype_parent_params').length) {
                        parent_params = parent_params + $('#invoiceitemtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=invoiceitemtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="invoiceitemtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_invoiceitemtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_invoiceitemtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_invoiceitemtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_invoiceitemtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_invoiceitemtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_invoiceitemtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoiceitemtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_invoiceitemtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_invoiceitemtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_invoiceitemtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_invoiceitemtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_invoiceitemtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoiceitemtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-invoiceitemtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_invoiceitemtype_rows_selected, function(index, rowId){

        $.each($('input[name="invoiceitemtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'invoiceitemtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#invoiceitemtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#invoiceitemtype_dependent_list_box').append($(
                '<div id="invoiceitemtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="invoiceitemtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge invoiceitemtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#invoiceitemtype_dependent_list_box').on('click', '.invoiceitemtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="invoiceitemtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#invoiceitemtype_dependent_list_box').find('#invoiceitemtype_list_item_' + entityId).remove();

      
   });
   var sb_invoiceitem_rows_selected = [];
   var sb_invoiceitemTable =  $('#sb_invoiceitem-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_invoiceitem-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "quantity" },

            { data: "unit_price" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="invoiceitem_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#invoiceitem_parent_params').length) {
                        parent_params = parent_params + $('#invoiceitem_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=invoiceitem&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="invoiceitem" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_invoiceitem_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_invoiceitem-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_invoiceitemTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_invoiceitem_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_invoiceitem_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_invoiceitem_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoiceitemTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_invoiceitem-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_invoiceitemTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_invoiceitem-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_invoiceitem-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_invoiceitemTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoiceitemTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-invoiceitem-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_invoiceitem_rows_selected, function(index, rowId){

        $.each($('input[name="invoiceitem_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'invoiceitem_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#invoiceitem_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#invoiceitem_dependent_list_box').append($(
                '<div id="invoiceitem_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="invoiceitem" ' + 
                        'data-entity-id="' + rowId + '" class="badge invoiceitem_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#invoiceitem_dependent_list_box').on('click', '.invoiceitem_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="invoiceitem_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#invoiceitem_dependent_list_box').find('#invoiceitem_list_item_' + entityId).remove();

      
   });
   var sb_invoiceterm_rows_selected = [];
   var sb_invoicetermTable =  $('#sb_invoiceterm-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_invoiceterm-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "it_invoice_txt" },

            { data: "it_term_txt" },
            { data: "name" },

            { data: "value" },

            { data: "from_start" },

            { data: "thru_end" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="invoiceterm_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#invoiceterm_parent_params').length) {
                        parent_params = parent_params + $('#invoiceterm_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=invoiceterm&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="invoiceterm" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_invoiceterm_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_invoiceterm-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_invoicetermTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_invoiceterm_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_invoiceterm_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_invoiceterm_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoicetermTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_invoiceterm-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_invoicetermTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_invoiceterm-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_invoiceterm-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_invoicetermTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_invoicetermTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-invoiceterm-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_invoiceterm_rows_selected, function(index, rowId){

        $.each($('input[name="invoiceterm_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'invoiceterm_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#invoiceterm_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#invoiceterm_dependent_list_box').append($(
                '<div id="invoiceterm_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="invoiceterm" ' + 
                        'data-entity-id="' + rowId + '" class="badge invoiceterm_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#invoiceterm_dependent_list_box').on('click', '.invoiceterm_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="invoiceterm_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#invoiceterm_dependent_list_box').find('#invoiceterm_list_item_' + entityId).remove();

      
   });
   var sb_pordertype_rows_selected = [];
   var sb_pordertypeTable =  $('#sb_pordertype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_pordertype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="purchaseordertype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#purchaseordertype_parent_params').length) {
                        parent_params = parent_params + $('#purchaseordertype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=purchaseordertype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="purchaseordertype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_pordertype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_pordertype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_pordertypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_pordertype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_pordertype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_pordertype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pordertypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_pordertype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_pordertypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_pordertype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_pordertype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_pordertypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pordertypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-purchaseordertype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_pordertype_rows_selected, function(index, rowId){

        $.each($('input[name="purchaseordertype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'purchaseordertype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#purchaseordertype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#purchaseordertype_dependent_list_box').append($(
                '<div id="purchaseordertype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="purchaseordertype" ' + 
                        'data-entity-id="' + rowId + '" class="badge purchaseordertype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#purchaseordertype_dependent_list_box').on('click', '.purchaseordertype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="purchaseordertype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#purchaseordertype_dependent_list_box').find('#purchaseordertype_list_item_' + entityId).remove();

      
   });
   var sb_porderstatus_rows_selected = [];
   var sb_porderstatusTable =  $('#sb_porderstatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_porderstatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="purchaseorderstatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#purchaseorderstatus_parent_params').length) {
                        parent_params = parent_params + $('#purchaseorderstatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=purchaseorderstatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="purchaseorderstatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_porderstatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_porderstatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_porderstatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_porderstatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_porderstatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_porderstatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_porderstatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_porderstatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_porderstatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_porderstatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_porderstatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_porderstatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_porderstatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-purchaseorderstatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_porderstatus_rows_selected, function(index, rowId){

        $.each($('input[name="purchaseorderstatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'purchaseorderstatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#purchaseorderstatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#purchaseorderstatus_dependent_list_box').append($(
                '<div id="purchaseorderstatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="purchaseorderstatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge purchaseorderstatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#purchaseorderstatus_dependent_list_box').on('click', '.purchaseorderstatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="purchaseorderstatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#purchaseorderstatus_dependent_list_box').find('#purchaseorderstatus_list_item_' + entityId).remove();

      
   });
   var sb_porder_rows_selected = [];
   var sb_porderTable =  $('#sb_porder-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_porder-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "owner_role_txt" },

            { data: "bill_acct_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "description" },

            { data: "message" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="purchaseorder_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#purchaseorder_parent_params').length) {
                        parent_params = parent_params + $('#purchaseorder_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=purchaseorder&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="purchaseorder" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_porder_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_porder-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_porderTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_porder_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_porder_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_porder_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_porderTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_porder-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_porderTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_porder-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_porder-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_porderTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_porderTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-purchaseorder-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_porder_rows_selected, function(index, rowId){

        $.each($('input[name="purchaseorder_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'purchaseorder_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#purchaseorder_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#purchaseorder_dependent_list_box').append($(
                '<div id="purchaseorder_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="purchaseorder" ' + 
                        'data-entity-id="' + rowId + '" class="badge purchaseorder_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#purchaseorder_dependent_list_box').on('click', '.purchaseorder_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="purchaseorder_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#purchaseorder_dependent_list_box').find('#purchaseorder_list_item_' + entityId).remove();

      
   });
   var sb_porole_rows_selected = [];
   var sb_poroleTable =  $('#sb_porole-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_porole-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="purchaseorderrole_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#purchaseorderrole_parent_params').length) {
                        parent_params = parent_params + $('#purchaseorderrole_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=purchaseorderrole&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="purchaseorderrole" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_porole_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_porole-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_poroleTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_porole_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_porole_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_porole_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_poroleTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_porole-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_poroleTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_porole-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_porole-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_poroleTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_poroleTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-purchaseorderrole-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_porole_rows_selected, function(index, rowId){

        $.each($('input[name="purchaseorderrole_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'purchaseorderrole_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#purchaseorderrole_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#purchaseorderrole_dependent_list_box').append($(
                '<div id="purchaseorderrole_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="purchaseorderrole" ' + 
                        'data-entity-id="' + rowId + '" class="badge purchaseorderrole_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#purchaseorderrole_dependent_list_box').on('click', '.purchaseorderrole_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="purchaseorderrole_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#purchaseorderrole_dependent_list_box').find('#purchaseorderrole_list_item_' + entityId).remove();

      
   });
   var sb_poitemtype_rows_selected = [];
   var sb_poitemtypeTable =  $('#sb_poitemtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_poitemtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="purchaseorderitemtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#purchaseorderitemtype_parent_params').length) {
                        parent_params = parent_params + $('#purchaseorderitemtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=purchaseorderitemtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="purchaseorderitemtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_poitemtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_poitemtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_poitemtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_poitemtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_poitemtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_poitemtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_poitemtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_poitemtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_poitemtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_poitemtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_poitemtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_poitemtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_poitemtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-purchaseorderitemtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_poitemtype_rows_selected, function(index, rowId){

        $.each($('input[name="purchaseorderitemtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'purchaseorderitemtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#purchaseorderitemtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#purchaseorderitemtype_dependent_list_box').append($(
                '<div id="purchaseorderitemtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="purchaseorderitemtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge purchaseorderitemtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#purchaseorderitemtype_dependent_list_box').on('click', '.purchaseorderitemtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="purchaseorderitemtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#purchaseorderitemtype_dependent_list_box').find('#purchaseorderitemtype_list_item_' + entityId).remove();

      
   });
   var sb_porderitem_rows_selected = [];
   var sb_porderitemTable =  $('#sb_porderitem-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_porderitem-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "quantity" },

            { data: "unit_price" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="purchaseorderitem_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#purchaseorderitem_parent_params').length) {
                        parent_params = parent_params + $('#purchaseorderitem_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=purchaseorderitem&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="purchaseorderitem" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_porderitem_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_porderitem-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_porderitemTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_porderitem_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_porderitem_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_porderitem_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_porderitemTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_porderitem-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_porderitemTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_porderitem-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_porderitem-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_porderitemTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_porderitemTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-purchaseorderitem-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_porderitem_rows_selected, function(index, rowId){

        $.each($('input[name="purchaseorderitem_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'purchaseorderitem_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#purchaseorderitem_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#purchaseorderitem_dependent_list_box').append($(
                '<div id="purchaseorderitem_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="purchaseorderitem" ' + 
                        'data-entity-id="' + rowId + '" class="badge purchaseorderitem_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#purchaseorderitem_dependent_list_box').on('click', '.purchaseorderitem_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="purchaseorderitem_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#purchaseorderitem_dependent_list_box').find('#purchaseorderitem_list_item_' + entityId).remove();

      
   });
   var sb_porderterm_rows_selected = [];
   var sb_pordertermTable =  $('#sb_porderterm-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_porderterm-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "pot_porder_txt" },

            { data: "po_term_txt" },
            { data: "name" },

            { data: "value" },

            { data: "from_start" },

            { data: "thru_end" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="purchaseorderterm_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#purchaseorderterm_parent_params').length) {
                        parent_params = parent_params + $('#purchaseorderterm_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=purchaseorderterm&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="purchaseorderterm" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_porderterm_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_porderterm-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_pordertermTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_porderterm_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_porderterm_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_porderterm_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pordertermTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_porderterm-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_pordertermTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_porderterm-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_porderterm-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_pordertermTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pordertermTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-purchaseorderterm-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_porderterm_rows_selected, function(index, rowId){

        $.each($('input[name="purchaseorderterm_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'purchaseorderterm_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#purchaseorderterm_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#purchaseorderterm_dependent_list_box').append($(
                '<div id="purchaseorderterm_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="purchaseorderterm" ' + 
                        'data-entity-id="' + rowId + '" class="badge purchaseorderterm_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#purchaseorderterm_dependent_list_box').on('click', '.purchaseorderterm_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="purchaseorderterm_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#purchaseorderterm_dependent_list_box').find('#purchaseorderterm_list_item_' + entityId).remove();

      
   });
   var sb_paymenttype_rows_selected = [];
   var sb_paymenttypeTable =  $('#sb_paymenttype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_paymenttype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="paymenttype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#paymenttype_parent_params').length) {
                        parent_params = parent_params + $('#paymenttype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=paymenttype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="paymenttype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_paymenttype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_paymenttype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_paymenttypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_paymenttype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_paymenttype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_paymenttype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_paymenttypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_paymenttype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_paymenttypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_paymenttype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_paymenttype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_paymenttypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_paymenttypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-paymenttype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_paymenttype_rows_selected, function(index, rowId){

        $.each($('input[name="paymenttype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'paymenttype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#paymenttype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#paymenttype_dependent_list_box').append($(
                '<div id="paymenttype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="paymenttype" ' + 
                        'data-entity-id="' + rowId + '" class="badge paymenttype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#paymenttype_dependent_list_box').on('click', '.paymenttype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="paymenttype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#paymenttype_dependent_list_box').find('#paymenttype_list_item_' + entityId).remove();

      
   });
   var sb_paymethtype_rows_selected = [];
   var sb_paymethtypeTable =  $('#sb_paymethtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_paymethtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="paymentmethodtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#paymentmethodtype_parent_params').length) {
                        parent_params = parent_params + $('#paymentmethodtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=paymentmethodtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="paymentmethodtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_paymethtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_paymethtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_paymethtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_paymethtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_paymethtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_paymethtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_paymethtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_paymethtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_paymethtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_paymethtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_paymethtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_paymethtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_paymethtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-paymentmethodtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_paymethtype_rows_selected, function(index, rowId){

        $.each($('input[name="paymentmethodtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'paymentmethodtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#paymentmethodtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#paymentmethodtype_dependent_list_box').append($(
                '<div id="paymentmethodtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="paymentmethodtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge paymentmethodtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#paymentmethodtype_dependent_list_box').on('click', '.paymentmethodtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="paymentmethodtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#paymentmethodtype_dependent_list_box').find('#paymentmethodtype_list_item_' + entityId).remove();

      
   });
   var sb_payment_rows_selected = [];
   var sb_paymentTable =  $('#sb_payment-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_payment-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "p_type_txt" },

            { data: "p_methtype_txt" },

            { data: "p_fpartyrole_txt" },

            { data: "p_tpartyrole_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "effective_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="payment_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#payment_parent_params').length) {
                        parent_params = parent_params + $('#payment_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=payment&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="payment" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_payment_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_payment-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_paymentTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_payment_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_payment_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_payment_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_paymentTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_payment-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_paymentTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_payment-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_payment-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_paymentTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_paymentTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-payment-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_payment_rows_selected, function(index, rowId){

        $.each($('input[name="payment_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'payment_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#payment_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#payment_dependent_list_box').append($(
                '<div id="payment_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="payment" ' + 
                        'data-entity-id="' + rowId + '" class="badge payment_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#payment_dependent_list_box').on('click', '.payment_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="payment_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#payment_dependent_list_box').find('#payment_list_item_' + entityId).remove();

      
   });
   var sb_payapp_rows_selected = [];
   var sb_payappTable =  $('#sb_payapp-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_payapp-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "pa_payment_txt" },

            { data: "pa_account_txt" },

            { data: "pa_invoice_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "effective_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="paymentapplication_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#paymentapplication_parent_params').length) {
                        parent_params = parent_params + $('#paymentapplication_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=paymentapplication&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="paymentapplication" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_payapp_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_payapp-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_payappTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_payapp_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_payapp_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_payapp_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_payappTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_payapp-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_payappTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_payapp-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_payapp-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_payappTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_payappTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-paymentapplication-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_payapp_rows_selected, function(index, rowId){

        $.each($('input[name="paymentapplication_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'paymentapplication_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#paymentapplication_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#paymentapplication_dependent_list_box').append($(
                '<div id="paymentapplication_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="paymentapplication" ' + 
                        'data-entity-id="' + rowId + '" class="badge paymentapplication_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#paymentapplication_dependent_list_box').on('click', '.paymentapplication_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="paymentapplication_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#paymentapplication_dependent_list_box').find('#paymentapplication_list_item_' + entityId).remove();

      
   });
   var sb_receipttype_rows_selected = [];
   var sb_receipttypeTable =  $('#sb_receipttype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_receipttype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="receipttype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#receipttype_parent_params').length) {
                        parent_params = parent_params + $('#receipttype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=receipttype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="receipttype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_receipttype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_receipttype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_receipttypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_receipttype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_receipttype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_receipttype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_receipttypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_receipttype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_receipttypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_receipttype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_receipttype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_receipttypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_receipttypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-receipttype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_receipttype_rows_selected, function(index, rowId){

        $.each($('input[name="receipttype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'receipttype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#receipttype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#receipttype_dependent_list_box').append($(
                '<div id="receipttype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="receipttype" ' + 
                        'data-entity-id="' + rowId + '" class="badge receipttype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#receipttype_dependent_list_box').on('click', '.receipttype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="receipttype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#receipttype_dependent_list_box').find('#receipttype_list_item_' + entityId).remove();

      
   });
   var sb_disbursetype_rows_selected = [];
   var sb_disbursetypeTable =  $('#sb_disbursetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_disbursetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="disbursementtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#disbursementtype_parent_params').length) {
                        parent_params = parent_params + $('#disbursementtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=disbursementtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="disbursementtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_disbursetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_disbursetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_disbursetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_disbursetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_disbursetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_disbursetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_disbursetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_disbursetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_disbursetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_disbursetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_disbursetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_disbursetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_disbursetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-disbursementtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_disbursetype_rows_selected, function(index, rowId){

        $.each($('input[name="disbursementtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'disbursementtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#disbursementtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#disbursementtype_dependent_list_box').append($(
                '<div id="disbursementtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="disbursementtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge disbursementtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#disbursementtype_dependent_list_box').on('click', '.disbursementtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="disbursementtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#disbursementtype_dependent_list_box').find('#disbursementtype_list_item_' + entityId).remove();

      
   });
   var sb_receipt_rows_selected = [];
   var sb_receiptTable =  $('#sb_receipt-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_receipt-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "type_txt" },

            { data: "r_methtype_txt" },

            { data: "r_fpartyrole_txt" },

            { data: "r_tpartyrole_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "effective_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="receipt_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#receipt_parent_params').length) {
                        parent_params = parent_params + $('#receipt_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=receipt&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="receipt" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_receipt_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_receipt-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_receiptTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_receipt_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_receipt_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_receipt_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_receiptTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_receipt-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_receiptTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_receipt-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_receipt-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_receiptTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_receiptTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-receipt-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_receipt_rows_selected, function(index, rowId){

        $.each($('input[name="receipt_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'receipt_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#receipt_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#receipt_dependent_list_box').append($(
                '<div id="receipt_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="receipt" ' + 
                        'data-entity-id="' + rowId + '" class="badge receipt_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#receipt_dependent_list_box').on('click', '.receipt_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="receipt_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#receipt_dependent_list_box').find('#receipt_list_item_' + entityId).remove();

      
   });
   var sb_disbursement_rows_selected = [];
   var sb_disbursementTable =  $('#sb_disbursement-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_disbursement-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "type_txt" },

            { data: "p_methtype_txt" },

            { data: "d_fpartyrole_txt" },

            { data: "d_tpartyrole_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "effective_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="disbursement_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#disbursement_parent_params').length) {
                        parent_params = parent_params + $('#disbursement_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=disbursement&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="disbursement" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_disbursement_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_disbursement-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_disbursementTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_disbursement_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_disbursement_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_disbursement_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_disbursementTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_disbursement-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_disbursementTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_disbursement-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_disbursement-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_disbursementTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_disbursementTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-disbursement-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_disbursement_rows_selected, function(index, rowId){

        $.each($('input[name="disbursement_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'disbursement_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#disbursement_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#disbursement_dependent_list_box').append($(
                '<div id="disbursement_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="disbursement" ' + 
                        'data-entity-id="' + rowId + '" class="badge disbursement_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#disbursement_dependent_list_box').on('click', '.disbursement_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="disbursement_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#disbursement_dependent_list_box').find('#disbursement_list_item_' + entityId).remove();

      
   });
   var sb_periodtype_rows_selected = [];
   var sb_periodtypeTable =  $('#sb_periodtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_periodtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="periodtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#periodtype_parent_params').length) {
                        parent_params = parent_params + $('#periodtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=periodtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="periodtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_periodtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_periodtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_periodtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_periodtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_periodtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_periodtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_periodtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_periodtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_periodtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_periodtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_periodtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_periodtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_periodtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-periodtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_periodtype_rows_selected, function(index, rowId){

        $.each($('input[name="periodtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'periodtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#periodtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#periodtype_dependent_list_box').append($(
                '<div id="periodtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="periodtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge periodtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#periodtype_dependent_list_box').on('click', '.periodtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="periodtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#periodtype_dependent_list_box').find('#periodtype_list_item_' + entityId).remove();

      
   });
   var sb_acctperiod_rows_selected = [];
   var sb_acctperiodTable =  $('#sb_acctperiod-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_acctperiod-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "parent_period_txt" },

            { data: "ap_type_txt" },
            { data: "name" },

            { data: "period_no" },

            { data: "active_fg" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="accountingperiod_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#accountingperiod_parent_params').length) {
                        parent_params = parent_params + $('#accountingperiod_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=accountingperiod&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="accountingperiod" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_acctperiod_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_acctperiod-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_acctperiodTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_acctperiod_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_acctperiod_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_acctperiod_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_acctperiodTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_acctperiod-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_acctperiodTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_acctperiod-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_acctperiod-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_acctperiodTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_acctperiodTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-accountingperiod-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_acctperiod_rows_selected, function(index, rowId){

        $.each($('input[name="accountingperiod_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'accountingperiod_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#accountingperiod_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#accountingperiod_dependent_list_box').append($(
                '<div id="accountingperiod_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="accountingperiod" ' + 
                        'data-entity-id="' + rowId + '" class="badge accountingperiod_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#accountingperiod_dependent_list_box').on('click', '.accountingperiod_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="accountingperiod_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#accountingperiod_dependent_list_box').find('#accountingperiod_list_item_' + entityId).remove();

      
   });
   var sb_coaacctstruct_rows_selected = [];
   var sb_coaacctstructTable =  $('#sb_coaacctstruct-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_coaacctstruct-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "seg_separator" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="coaaccountstructure_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#coaaccountstructure_parent_params').length) {
                        parent_params = parent_params + $('#coaaccountstructure_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=coaaccountstructure&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="coaaccountstructure" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_coaacctstruct_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_coaacctstruct-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_coaacctstructTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_coaacctstruct_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_coaacctstruct_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_coaacctstruct_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coaacctstructTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_coaacctstruct-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_coaacctstructTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_coaacctstruct-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_coaacctstruct-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_coaacctstructTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coaacctstructTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-coaaccountstructure-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_coaacctstruct_rows_selected, function(index, rowId){

        $.each($('input[name="coaaccountstructure_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'coaaccountstructure_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#coaaccountstructure_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#coaaccountstructure_dependent_list_box').append($(
                '<div id="coaaccountstructure_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="coaaccountstructure" ' + 
                        'data-entity-id="' + rowId + '" class="badge coaaccountstructure_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#coaaccountstructure_dependent_list_box').on('click', '.coaaccountstructure_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="coaaccountstructure_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#coaaccountstructure_dependent_list_box').find('#coaaccountstructure_list_item_' + entityId).remove();

      
   });
   var sb_coaacctsegtype_rows_selected = [];
   var sb_coaacctsegtypeTable =  $('#sb_coaacctsegtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_coaacctsegtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },

            { data: "name" },

            { data: "mask" },

            { data: "has_val_src" },

            { data: "val_provider" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="coaaccountsegmenttype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#coaaccountsegmenttype_parent_params').length) {
                        parent_params = parent_params + $('#coaaccountsegmenttype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=coaaccountsegmenttype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="coaaccountsegmenttype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_coaacctsegtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_coaacctsegtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_coaacctsegtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_coaacctsegtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_coaacctsegtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_coaacctsegtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coaacctsegtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_coaacctsegtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_coaacctsegtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_coaacctsegtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_coaacctsegtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_coaacctsegtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coaacctsegtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-coaaccountsegmenttype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_coaacctsegtype_rows_selected, function(index, rowId){

        $.each($('input[name="coaaccountsegmenttype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'coaaccountsegmenttype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#coaaccountsegmenttype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#coaaccountsegmenttype_dependent_list_box').append($(
                '<div id="coaaccountsegmenttype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="coaaccountsegmenttype" ' + 
                        'data-entity-id="' + rowId + '" class="badge coaaccountsegmenttype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#coaaccountsegmenttype_dependent_list_box').on('click', '.coaaccountsegmenttype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="coaaccountsegmenttype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#coaaccountsegmenttype_dependent_list_box').find('#coaaccountsegmenttype_list_item_' + entityId).remove();

      
   });
   var sb_coaasegval_rows_selected = [];
   var sb_coaasegvalTable =  $('#sb_coaasegval-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_coaasegval-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "v_segtype_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="coaaccountsegmenttypevalue_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#coaaccountsegmenttypevalue_parent_params').length) {
                        parent_params = parent_params + $('#coaaccountsegmenttypevalue_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=coaaccountsegmenttypevalue&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="coaaccountsegmenttypevalue" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_coaasegval_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_coaasegval-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_coaasegvalTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_coaasegval_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_coaasegval_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_coaasegval_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coaasegvalTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_coaasegval-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_coaasegvalTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_coaasegval-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_coaasegval-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_coaasegvalTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coaasegvalTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-coaaccountsegmenttypevalue-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_coaasegval_rows_selected, function(index, rowId){

        $.each($('input[name="coaaccountsegmenttypevalue_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'coaaccountsegmenttypevalue_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#coaaccountsegmenttypevalue_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#coaaccountsegmenttypevalue_dependent_list_box').append($(
                '<div id="coaaccountsegmenttypevalue_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="coaaccountsegmenttypevalue" ' + 
                        'data-entity-id="' + rowId + '" class="badge coaaccountsegmenttypevalue_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#coaaccountsegmenttypevalue_dependent_list_box').on('click', '.coaaccountsegmenttypevalue_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="coaaccountsegmenttypevalue_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#coaaccountsegmenttypevalue_dependent_list_box').find('#coaaccountsegmenttypevalue_list_item_' + entityId).remove();

      
   });
   var sb_coaacctseg_rows_selected = [];
   var sb_coaacctsegTable =  $('#sb_coaacctseg-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_coaacctseg-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "seg_type_txt" },

            { data: "seg_acctstruct_txt" },
            { data: "name" },

            { data: "seg_sequence" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="coaaccountsegment_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#coaaccountsegment_parent_params').length) {
                        parent_params = parent_params + $('#coaaccountsegment_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=coaaccountsegment&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="coaaccountsegment" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_coaacctseg_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_coaacctseg-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_coaacctsegTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_coaacctseg_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_coaacctseg_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_coaacctseg_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coaacctsegTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_coaacctseg-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_coaacctsegTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_coaacctseg-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_coaacctseg-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_coaacctsegTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coaacctsegTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-coaaccountsegment-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_coaacctseg_rows_selected, function(index, rowId){

        $.each($('input[name="coaaccountsegment_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'coaaccountsegment_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#coaaccountsegment_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#coaaccountsegment_dependent_list_box').append($(
                '<div id="coaaccountsegment_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="coaaccountsegment" ' + 
                        'data-entity-id="' + rowId + '" class="badge coaaccountsegment_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#coaaccountsegment_dependent_list_box').on('click', '.coaaccountsegment_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="coaaccountsegment_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#coaaccountsegment_dependent_list_box').find('#coaaccountsegment_list_item_' + entityId).remove();

      
   });
   var sb_coastatus_rows_selected = [];
   var sb_coastatusTable =  $('#sb_coastatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_coastatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="coastatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#coastatus_parent_params').length) {
                        parent_params = parent_params + $('#coastatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=coastatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="coastatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_coastatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_coastatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_coastatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_coastatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_coastatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_coastatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coastatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_coastatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_coastatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_coastatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_coastatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_coastatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coastatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-coastatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_coastatus_rows_selected, function(index, rowId){

        $.each($('input[name="coastatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'coastatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#coastatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#coastatus_dependent_list_box').append($(
                '<div id="coastatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="coastatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge coastatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#coastatus_dependent_list_box').on('click', '.coastatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="coastatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#coastatus_dependent_list_box').find('#coastatus_list_item_' + entityId).remove();

      
   });
   var sb_coa_rows_selected = [];
   var sb_coaTable =  $('#sb_coa-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_coa-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "org_unit_txt" },

            { data: "acct_structure_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },


            { data: "status_txt" },
            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="chartofaccounts_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#chartofaccounts_parent_params').length) {
                        parent_params = parent_params + $('#chartofaccounts_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=chartofaccounts&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="chartofaccounts" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_coa_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_coa-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_coaTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_coa_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_coa_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_coa_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coaTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_coa-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_coaTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_coa-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_coa-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_coaTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coaTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-chartofaccounts-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_coa_rows_selected, function(index, rowId){

        $.each($('input[name="chartofaccounts_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'chartofaccounts_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#chartofaccounts_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#chartofaccounts_dependent_list_box').append($(
                '<div id="chartofaccounts_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="chartofaccounts" ' + 
                        'data-entity-id="' + rowId + '" class="badge chartofaccounts_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#chartofaccounts_dependent_list_box').on('click', '.chartofaccounts_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="chartofaccounts_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#chartofaccounts_dependent_list_box').find('#chartofaccounts_list_item_' + entityId).remove();

      
   });
   var sb_glaccttype_rows_selected = [];
   var sb_glaccttypeTable =  $('#sb_glaccttype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_glaccttype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },

            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="glaccounttype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#glaccounttype_parent_params').length) {
                        parent_params = parent_params + $('#glaccounttype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=glaccounttype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="glaccounttype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_glaccttype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_glaccttype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_glaccttypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_glaccttype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_glaccttype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_glaccttype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_glaccttypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_glaccttype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_glaccttypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_glaccttype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_glaccttype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_glaccttypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_glaccttypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-glaccounttype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_glaccttype_rows_selected, function(index, rowId){

        $.each($('input[name="glaccounttype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'glaccounttype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#glaccounttype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#glaccounttype_dependent_list_box').append($(
                '<div id="glaccounttype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="glaccounttype" ' + 
                        'data-entity-id="' + rowId + '" class="badge glaccounttype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#glaccounttype_dependent_list_box').on('click', '.glaccounttype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="glaccounttype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#glaccounttype_dependent_list_box').find('#glaccounttype_list_item_' + entityId).remove();

      
   });
   var sb_glaccount_rows_selected = [];
   var sb_glaccountTable =  $('#sb_glaccount-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_glaccount-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },

            { data: "account_no" },


            { data: "glacct_type_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="glaccount_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#glaccount_parent_params').length) {
                        parent_params = parent_params + $('#glaccount_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=glaccount&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="glaccount" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_glaccount_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_glaccount-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_glaccountTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_glaccount_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_glaccount_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_glaccount_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_glaccountTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_glaccount-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_glaccountTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_glaccount-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_glaccount-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_glaccountTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_glaccountTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-glaccount-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_glaccount_rows_selected, function(index, rowId){

        $.each($('input[name="glaccount_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'glaccount_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#glaccount_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#glaccount_dependent_list_box').append($(
                '<div id="glaccount_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="glaccount" ' + 
                        'data-entity-id="' + rowId + '" class="badge glaccount_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#glaccount_dependent_list_box').on('click', '.glaccount_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="glaccount_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#glaccount_dependent_list_box').find('#glaccount_list_item_' + entityId).remove();

      
   });
   var sb_buglaccount_rows_selected = [];
   var sb_buglaccountTable =  $('#sb_buglaccount-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_buglaccount-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "parent_buglacct_txt" },

            { data: "glaccount_txt" },

            { data: "internal_org_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="businessunitglaccount_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#businessunitglaccount_parent_params').length) {
                        parent_params = parent_params + $('#businessunitglaccount_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=businessunitglaccount&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="businessunitglaccount" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_buglaccount_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_buglaccount-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_buglaccountTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_buglaccount_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_buglaccount_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_buglaccount_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_buglaccountTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_buglaccount-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_buglaccountTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_buglaccount-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_buglaccount-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_buglaccountTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_buglaccountTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-businessunitglaccount-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_buglaccount_rows_selected, function(index, rowId){

        $.each($('input[name="businessunitglaccount_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'businessunitglaccount_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#businessunitglaccount_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#businessunitglaccount_dependent_list_box').append($(
                '<div id="businessunitglaccount_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="businessunitglaccount" ' + 
                        'data-entity-id="' + rowId + '" class="badge businessunitglaccount_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#businessunitglaccount_dependent_list_box').on('click', '.businessunitglaccount_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="businessunitglaccount_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#businessunitglaccount_dependent_list_box').find('#businessunitglaccount_list_item_' + entityId).remove();

      
   });
   var sb_buglaccountbal_rows_selected = [];
   var sb_buglaccountbalTable =  $('#sb_buglaccountbal-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_buglaccountbal-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "buglaccount_txt" },

            { data: "internal_org_txt" },

            { data: "acctng_period_txt" },
            { data: "name" },

            { data: "balance" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="businessunitglaccountbalance_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#businessunitglaccountbalance_parent_params').length) {
                        parent_params = parent_params + $('#businessunitglaccountbalance_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=businessunitglaccountbalance&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="businessunitglaccountbalance" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_buglaccountbal_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_buglaccountbal-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_buglaccountbalTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_buglaccountbal_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_buglaccountbal_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_buglaccountbal_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_buglaccountbalTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_buglaccountbal-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_buglaccountbalTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_buglaccountbal-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_buglaccountbal-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_buglaccountbalTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_buglaccountbalTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-businessunitglaccountbalance-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_buglaccountbal_rows_selected, function(index, rowId){

        $.each($('input[name="businessunitglaccountbalance_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'businessunitglaccountbalance_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#businessunitglaccountbalance_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#businessunitglaccountbalance_dependent_list_box').append($(
                '<div id="businessunitglaccountbalance_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="businessunitglaccountbalance" ' + 
                        'data-entity-id="' + rowId + '" class="badge businessunitglaccountbalance_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#businessunitglaccountbalance_dependent_list_box').on('click', '.businessunitglaccountbalance_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="businessunitglaccountbalance_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#businessunitglaccountbalance_dependent_list_box').find('#businessunitglaccountbalance_list_item_' + entityId).remove();

      
   });
   var sb_coaaseginst_rows_selected = [];
   var sb_coaaseginstTable =  $('#sb_coaaseginst-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_coaaseginst-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "coa_txt" },

            { data: "acct_segment_txt" },

            { data: "parent_instance_txt" },
            { data: "name" },

            { data: "is_account" },


            { data: "casi_buglaccount_txt" },
            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="coaaccountsegmentinstance_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#coaaccountsegmentinstance_parent_params').length) {
                        parent_params = parent_params + $('#coaaccountsegmentinstance_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=coaaccountsegmentinstance&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="coaaccountsegmentinstance" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_coaaseginst_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_coaaseginst-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_coaaseginstTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_coaaseginst_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_coaaseginst_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_coaaseginst_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coaaseginstTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_coaaseginst-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_coaaseginstTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_coaaseginst-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_coaaseginst-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_coaaseginstTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_coaaseginstTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-coaaccountsegmentinstance-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_coaaseginst_rows_selected, function(index, rowId){

        $.each($('input[name="coaaccountsegmentinstance_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'coaaccountsegmentinstance_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#coaaccountsegmentinstance_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#coaaccountsegmentinstance_dependent_list_box').append($(
                '<div id="coaaccountsegmentinstance_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="coaaccountsegmentinstance" ' + 
                        'data-entity-id="' + rowId + '" class="badge coaaccountsegmentinstance_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#coaaccountsegmentinstance_dependent_list_box').on('click', '.coaaccountsegmentinstance_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="coaaccountsegmentinstance_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#coaaccountsegmentinstance_dependent_list_box').find('#coaaccountsegmentinstance_list_item_' + entityId).remove();

      
   });
   var sb_feventtype_rows_selected = [];
   var sb_feventtypeTable =  $('#sb_feventtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_feventtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },

            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="financialeventtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#financialeventtype_parent_params').length) {
                        parent_params = parent_params + $('#financialeventtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=financialeventtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="financialeventtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_feventtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_feventtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_feventtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_feventtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_feventtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_feventtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_feventtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_feventtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_feventtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_feventtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_feventtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_feventtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_feventtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-financialeventtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_feventtype_rows_selected, function(index, rowId){

        $.each($('input[name="financialeventtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'financialeventtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#financialeventtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#financialeventtype_dependent_list_box').append($(
                '<div id="financialeventtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="financialeventtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge financialeventtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#financialeventtype_dependent_list_box').on('click', '.financialeventtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="financialeventtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#financialeventtype_dependent_list_box').find('#financialeventtype_list_item_' + entityId).remove();

      
   });
   var sb_fevent_rows_selected = [];
   var sb_feventTable =  $('#sb_fevent-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_fevent-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "event_type_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "event_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="financialevent_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#financialevent_parent_params').length) {
                        parent_params = parent_params + $('#financialevent_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=financialevent&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="financialevent" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_fevent_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_fevent-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_feventTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_fevent_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_fevent_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_fevent_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_feventTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_fevent-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_feventTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_fevent-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_fevent-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_feventTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_feventTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-financialevent-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_fevent_rows_selected, function(index, rowId){

        $.each($('input[name="financialevent_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'financialevent_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#financialevent_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#financialevent_dependent_list_box').append($(
                '<div id="financialevent_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="financialevent" ' + 
                        'data-entity-id="' + rowId + '" class="badge financialevent_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#financialevent_dependent_list_box').on('click', '.financialevent_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="financialevent_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#financialevent_dependent_list_box').find('#financialevent_list_item_' + entityId).remove();

      
   });
   var sb_txntype_rows_selected = [];
   var sb_txntypeTable =  $('#sb_txntype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_txntype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "entity_code" },


            { data: "parent_type_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="transactiontype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#transactiontype_parent_params').length) {
                        parent_params = parent_params + $('#transactiontype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=transactiontype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="transactiontype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_txntype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_txntype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_txntypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_txntype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_txntype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_txntype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_txntypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_txntype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_txntypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_txntype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_txntype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_txntypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_txntypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-transactiontype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_txntype_rows_selected, function(index, rowId){

        $.each($('input[name="transactiontype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'transactiontype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#transactiontype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#transactiontype_dependent_list_box').append($(
                '<div id="transactiontype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="transactiontype" ' + 
                        'data-entity-id="' + rowId + '" class="badge transactiontype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#transactiontype_dependent_list_box').on('click', '.transactiontype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="transactiontype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#transactiontype_dependent_list_box').find('#transactiontype_list_item_' + entityId).remove();

      
   });
   var sb_transaction_rows_selected = [];
   var sb_transactionTable =  $('#sb_transaction-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_transaction-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "txn_date" },

            { data: "entry_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="transaction_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#transaction_parent_params').length) {
                        parent_params = parent_params + $('#transaction_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=transaction&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="transaction" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_transaction_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_transaction-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_transactionTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_transaction_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_transaction_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_transaction_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_transactionTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_transaction-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_transactionTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_transaction-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_transaction-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_transactionTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_transactionTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-transaction-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_transaction_rows_selected, function(index, rowId){

        $.each($('input[name="transaction_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'transaction_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#transaction_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#transaction_dependent_list_box').append($(
                '<div id="transaction_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="transaction" ' + 
                        'data-entity-id="' + rowId + '" class="badge transaction_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#transaction_dependent_list_box').on('click', '.transaction_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="transaction_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#transaction_dependent_list_box').find('#transaction_list_item_' + entityId).remove();

      
   });
   var sb_txndetail_rows_selected = [];
   var sb_txndetailTable =  $('#sb_txndetail-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_txndetail-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "transaction_txt" },

            { data: "td_buglaccount_txt" },
            { data: "name" },

            { data: "dbcr_fg" },

            { data: "amount" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="transactiondetail_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#transactiondetail_parent_params').length) {
                        parent_params = parent_params + $('#transactiondetail_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=transactiondetail&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="transactiondetail" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_txndetail_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_txndetail-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_txndetailTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_txndetail_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_txndetail_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_txndetail_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_txndetailTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_txndetail-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_txndetailTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_txndetail-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_txndetail-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_txndetailTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_txndetailTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-transactiondetail-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_txndetail_rows_selected, function(index, rowId){

        $.each($('input[name="transactiondetail_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'transactiondetail_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#transactiondetail_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#transactiondetail_dependent_list_box').append($(
                '<div id="transactiondetail_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="transactiondetail" ' + 
                        'data-entity-id="' + rowId + '" class="badge transactiondetail_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#transactiondetail_dependent_list_box').on('click', '.transactiondetail_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="transactiondetail_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#transactiondetail_dependent_list_box').find('#transactiondetail_list_item_' + entityId).remove();

      
   });
   var sb_feventtxntype_rows_selected = [];
   var sb_feventtxntypeTable =  $('#sb_feventtxntype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_feventtxntype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "fevent_type_txt" },

            { data: "fetxn_type_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="feventtxntype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#feventtxntype_parent_params').length) {
                        parent_params = parent_params + $('#feventtxntype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=feventtxntype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="feventtxntype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_feventtxntype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_feventtxntype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_feventtxntypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_feventtxntype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_feventtxntype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_feventtxntype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_feventtxntypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_feventtxntype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_feventtxntypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_feventtxntype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_feventtxntype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_feventtxntypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_feventtxntypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-feventtxntype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_feventtxntype_rows_selected, function(index, rowId){

        $.each($('input[name="feventtxntype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'feventtxntype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#feventtxntype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#feventtxntype_dependent_list_box').append($(
                '<div id="feventtxntype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="feventtxntype" ' + 
                        'data-entity-id="' + rowId + '" class="badge feventtxntype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#feventtxntype_dependent_list_box').on('click', '.feventtxntype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="feventtxntype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#feventtxntype_dependent_list_box').find('#feventtxntype_list_item_' + entityId).remove();

      
   });
   var sb_txntypeacct_rows_selected = [];
   var sb_txntypeacctTable =  $('#sb_txntypeacct-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_txntypeacct-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "tta_txn_type_txt" },

            { data: "tta_account_txt" },
            { data: "name" },

            { data: "db_cr_fg" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="txntypeaccount_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#txntypeaccount_parent_params').length) {
                        parent_params = parent_params + $('#txntypeaccount_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=txntypeaccount&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="txntypeaccount" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_txntypeacct_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_txntypeacct-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_txntypeacctTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_txntypeacct_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_txntypeacct_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_txntypeacct_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_txntypeacctTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_txntypeacct-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_txntypeacctTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_txntypeacct-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_txntypeacct-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_txntypeacctTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_txntypeacctTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-txntypeaccount-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_txntypeacct_rows_selected, function(index, rowId){

        $.each($('input[name="txntypeaccount_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'txntypeaccount_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#txntypeaccount_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#txntypeaccount_dependent_list_box').append($(
                '<div id="txntypeaccount_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="txntypeaccount" ' + 
                        'data-entity-id="' + rowId + '" class="badge txntypeaccount_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#txntypeaccount_dependent_list_box').on('click', '.txntypeaccount_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="txntypeaccount_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#txntypeaccount_dependent_list_box').find('#txntypeaccount_list_item_' + entityId).remove();

      
   });
   var sb_budgettype_rows_selected = [];
   var sb_budgettypeTable =  $('#sb_budgettype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_budgettype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="budgettype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#budgettype_parent_params').length) {
                        parent_params = parent_params + $('#budgettype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=budgettype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="budgettype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_budgettype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_budgettype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_budgettypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_budgettype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_budgettype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_budgettype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgettypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_budgettype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_budgettypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_budgettype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_budgettype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_budgettypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgettypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-budgettype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_budgettype_rows_selected, function(index, rowId){

        $.each($('input[name="budgettype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'budgettype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#budgettype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#budgettype_dependent_list_box').append($(
                '<div id="budgettype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="budgettype" ' + 
                        'data-entity-id="' + rowId + '" class="badge budgettype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#budgettype_dependent_list_box').on('click', '.budgettype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="budgettype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#budgettype_dependent_list_box').find('#budgettype_list_item_' + entityId).remove();

      
   });
   var sb_budgetstatus_rows_selected = [];
   var sb_budgetstatusTable =  $('#sb_budgetstatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_budgetstatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="budgetstatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#budgetstatus_parent_params').length) {
                        parent_params = parent_params + $('#budgetstatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=budgetstatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="budgetstatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_budgetstatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_budgetstatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_budgetstatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_budgetstatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_budgetstatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_budgetstatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetstatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_budgetstatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_budgetstatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_budgetstatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_budgetstatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_budgetstatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetstatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-budgetstatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_budgetstatus_rows_selected, function(index, rowId){

        $.each($('input[name="budgetstatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'budgetstatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#budgetstatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#budgetstatus_dependent_list_box').append($(
                '<div id="budgetstatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="budgetstatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge budgetstatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#budgetstatus_dependent_list_box').on('click', '.budgetstatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="budgetstatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#budgetstatus_dependent_list_box').find('#budgetstatus_list_item_' + entityId).remove();

      
   });
   var sb_budget_rows_selected = [];
   var sb_budgetTable =  $('#sb_budget-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_budget-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "b_type_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="budget_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#budget_parent_params').length) {
                        parent_params = parent_params + $('#budget_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=budget&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="budget" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_budget_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_budget-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_budgetTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_budget_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_budget_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_budget_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_budget-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_budgetTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_budget-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_budget-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_budgetTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-budget-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_budget_rows_selected, function(index, rowId){

        $.each($('input[name="budget_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'budget_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#budget_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#budget_dependent_list_box').append($(
                '<div id="budget_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="budget" ' + 
                        'data-entity-id="' + rowId + '" class="badge budget_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#budget_dependent_list_box').on('click', '.budget_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="budget_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#budget_dependent_list_box').find('#budget_list_item_' + entityId).remove();

      
   });
   var sb_bitemtype_rows_selected = [];
   var sb_bitemtypeTable =  $('#sb_bitemtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_bitemtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="budgetitemtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#budgetitemtype_parent_params').length) {
                        parent_params = parent_params + $('#budgetitemtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=budgetitemtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="budgetitemtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_bitemtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_bitemtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_bitemtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_bitemtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_bitemtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_bitemtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_bitemtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_bitemtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_bitemtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_bitemtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_bitemtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_bitemtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_bitemtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-budgetitemtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_bitemtype_rows_selected, function(index, rowId){

        $.each($('input[name="budgetitemtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'budgetitemtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#budgetitemtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#budgetitemtype_dependent_list_box').append($(
                '<div id="budgetitemtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="budgetitemtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge budgetitemtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#budgetitemtype_dependent_list_box').on('click', '.budgetitemtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="budgetitemtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#budgetitemtype_dependent_list_box').find('#budgetitemtype_list_item_' + entityId).remove();

      
   });
   var sb_budgetitem_rows_selected = [];
   var sb_budgetitemTable =  $('#sb_budgetitem-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_budgetitem-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "amount" },

            { data: "description" },

            { data: "justification" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="budgetitem_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#budgetitem_parent_params').length) {
                        parent_params = parent_params + $('#budgetitem_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=budgetitem&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="budgetitem" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_budgetitem_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_budgetitem-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_budgetitemTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_budgetitem_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_budgetitem_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_budgetitem_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetitemTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_budgetitem-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_budgetitemTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_budgetitem-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_budgetitem-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_budgetitemTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetitemTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-budgetitem-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_budgetitem_rows_selected, function(index, rowId){

        $.each($('input[name="budgetitem_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'budgetitem_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#budgetitem_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#budgetitem_dependent_list_box').append($(
                '<div id="budgetitem_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="budgetitem" ' + 
                        'data-entity-id="' + rowId + '" class="badge budgetitem_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#budgetitem_dependent_list_box').on('click', '.budgetitem_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="budgetitem_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#budgetitem_dependent_list_box').find('#budgetitem_list_item_' + entityId).remove();

      
   });
   var sb_budgetrole_rows_selected = [];
   var sb_budgetroleTable =  $('#sb_budgetrole-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_budgetrole-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "party_txt" },

            { data: "role_txt" },
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="budgetrole_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#budgetrole_parent_params').length) {
                        parent_params = parent_params + $('#budgetrole_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=budgetrole&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="budgetrole" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_budgetrole_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_budgetrole-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_budgetroleTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_budgetrole_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_budgetrole_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_budgetrole_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetroleTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_budgetrole-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_budgetroleTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_budgetrole-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_budgetrole-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_budgetroleTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetroleTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-budgetrole-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_budgetrole_rows_selected, function(index, rowId){

        $.each($('input[name="budgetrole_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'budgetrole_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#budgetrole_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#budgetrole_dependent_list_box').append($(
                '<div id="budgetrole_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="budgetrole" ' + 
                        'data-entity-id="' + rowId + '" class="badge budgetrole_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#budgetrole_dependent_list_box').on('click', '.budgetrole_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="budgetrole_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#budgetrole_dependent_list_box').find('#budgetrole_list_item_' + entityId).remove();

      
   });
   var sb_stperiod_rows_selected = [];
   var sb_stperiodTable =  $('#sb_stperiod-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_stperiod-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "period_type_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="standardtimeperiod_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#standardtimeperiod_parent_params').length) {
                        parent_params = parent_params + $('#standardtimeperiod_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=standardtimeperiod&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="standardtimeperiod" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_stperiod_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_stperiod-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_stperiodTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_stperiod_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_stperiod_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_stperiod_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_stperiodTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_stperiod-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_stperiodTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_stperiod-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_stperiod-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_stperiodTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_stperiodTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-standardtimeperiod-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_stperiod_rows_selected, function(index, rowId){

        $.each($('input[name="standardtimeperiod_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'standardtimeperiod_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#standardtimeperiod_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#standardtimeperiod_dependent_list_box').append($(
                '<div id="standardtimeperiod_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="standardtimeperiod" ' + 
                        'data-entity-id="' + rowId + '" class="badge standardtimeperiod_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#standardtimeperiod_dependent_list_box').on('click', '.standardtimeperiod_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="standardtimeperiod_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#standardtimeperiod_dependent_list_box').find('#standardtimeperiod_list_item_' + entityId).remove();

      
   });
   var sb_brrtype_rows_selected = [];
   var sb_brrtypeTable =  $('#sb_brrtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_brrtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="budgetreviewresulttype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#budgetreviewresulttype_parent_params').length) {
                        parent_params = parent_params + $('#budgetreviewresulttype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=budgetreviewresulttype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="budgetreviewresulttype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_brrtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_brrtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_brrtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_brrtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_brrtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_brrtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_brrtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_brrtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_brrtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_brrtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_brrtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_brrtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_brrtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-budgetreviewresulttype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_brrtype_rows_selected, function(index, rowId){

        $.each($('input[name="budgetreviewresulttype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'budgetreviewresulttype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#budgetreviewresulttype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#budgetreviewresulttype_dependent_list_box').append($(
                '<div id="budgetreviewresulttype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="budgetreviewresulttype" ' + 
                        'data-entity-id="' + rowId + '" class="badge budgetreviewresulttype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#budgetreviewresulttype_dependent_list_box').on('click', '.budgetreviewresulttype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="budgetreviewresulttype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#budgetreviewresulttype_dependent_list_box').find('#budgetreviewresulttype_list_item_' + entityId).remove();

      
   });
   var sb_budgetreview_rows_selected = [];
   var sb_budgetreviewTable =  $('#sb_budgetreview-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_budgetreview-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "budget_txt" },

            { data: "result_type_txt" },
            { data: "name" },

            { data: "review_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="budgetreview_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#budgetreview_parent_params').length) {
                        parent_params = parent_params + $('#budgetreview_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=budgetreview&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="budgetreview" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_budgetreview_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_budgetreview-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_budgetreviewTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_budgetreview_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_budgetreview_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_budgetreview_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetreviewTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_budgetreview-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_budgetreviewTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_budgetreview-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_budgetreview-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_budgetreviewTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetreviewTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-budgetreview-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_budgetreview_rows_selected, function(index, rowId){

        $.each($('input[name="budgetreview_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'budgetreview_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#budgetreview_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#budgetreview_dependent_list_box').append($(
                '<div id="budgetreview_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="budgetreview" ' + 
                        'data-entity-id="' + rowId + '" class="badge budgetreview_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#budgetreview_dependent_list_box').on('click', '.budgetreview_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="budgetreview_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#budgetreview_dependent_list_box').find('#budgetreview_list_item_' + entityId).remove();

      
   });
   var sb_brevision_rows_selected = [];
   var sb_brevisionTable =  $('#sb_brevision-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_brevision-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "budget_txt" },
            { data: "name" },

            { data: "date_revised" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="budgetrevision_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#budgetrevision_parent_params').length) {
                        parent_params = parent_params + $('#budgetrevision_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=budgetrevision&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="budgetrevision" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_brevision_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_brevision-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_brevisionTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_brevision_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_brevision_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_brevision_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_brevisionTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_brevision-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_brevisionTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_brevision-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_brevision-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_brevisionTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_brevisionTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-budgetrevision-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_brevision_rows_selected, function(index, rowId){

        $.each($('input[name="budgetrevision_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'budgetrevision_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#budgetrevision_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#budgetrevision_dependent_list_box').append($(
                '<div id="budgetrevision_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="budgetrevision" ' + 
                        'data-entity-id="' + rowId + '" class="badge budgetrevision_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#budgetrevision_dependent_list_box').on('click', '.budgetrevision_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="budgetrevision_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#budgetrevision_dependent_list_box').find('#budgetrevision_list_item_' + entityId).remove();

      
   });
   var sb_budgetrevimpact_rows_selected = [];
   var sb_budgetrevimpactTable =  $('#sb_budgetrevimpact-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_budgetrevimpact-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "budget_item_txt" },

            { data: "budget_revision_txt" },
            { data: "name" },

            { data: "revision_amt" },

            { data: "add_delete_fg" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="budgetrevisionimpact_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#budgetrevisionimpact_parent_params').length) {
                        parent_params = parent_params + $('#budgetrevisionimpact_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=budgetrevisionimpact&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="budgetrevisionimpact" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_budgetrevimpact_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_budgetrevimpact-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_budgetrevimpactTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_budgetrevimpact_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_budgetrevimpact_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_budgetrevimpact_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetrevimpactTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_budgetrevimpact-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_budgetrevimpactTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_budgetrevimpact-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_budgetrevimpact-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_budgetrevimpactTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetrevimpactTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-budgetrevisionimpact-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_budgetrevimpact_rows_selected, function(index, rowId){

        $.each($('input[name="budgetrevisionimpact_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'budgetrevisionimpact_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#budgetrevisionimpact_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#budgetrevisionimpact_dependent_list_box').append($(
                '<div id="budgetrevisionimpact_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="budgetrevisionimpact" ' + 
                        'data-entity-id="' + rowId + '" class="badge budgetrevisionimpact_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#budgetrevisionimpact_dependent_list_box').on('click', '.budgetrevisionimpact_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="budgetrevisionimpact_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#budgetrevisionimpact_dependent_list_box').find('#budgetrevisionimpact_list_item_' + entityId).remove();

      
   });
   var sb_budgetscenario_rows_selected = [];
   var sb_budgetscenarioTable =  $('#sb_budgetscenario-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_budgetscenario-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="budgetscenario_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#budgetscenario_parent_params').length) {
                        parent_params = parent_params + $('#budgetscenario_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=budgetscenario&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="budgetscenario" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_budgetscenario_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_budgetscenario-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_budgetscenarioTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_budgetscenario_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_budgetscenario_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_budgetscenario_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetscenarioTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_budgetscenario-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_budgetscenarioTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_budgetscenario-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_budgetscenario-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_budgetscenarioTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_budgetscenarioTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-budgetscenario-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_budgetscenario_rows_selected, function(index, rowId){

        $.each($('input[name="budgetscenario_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'budgetscenario_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#budgetscenario_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#budgetscenario_dependent_list_box').append($(
                '<div id="budgetscenario_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="budgetscenario" ' + 
                        'data-entity-id="' + rowId + '" class="badge budgetscenario_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#budgetscenario_dependent_list_box').on('click', '.budgetscenario_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="budgetscenario_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#budgetscenario_dependent_list_box').find('#budgetscenario_list_item_' + entityId).remove();

      
   });
   var sb_bscenariorule_rows_selected = [];
   var sb_bscenarioruleTable =  $('#sb_bscenariorule-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_bscenariorule-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "bitem_type_txt" },

            { data: "budget_scenario_txt" },
            { data: "name" },

            { data: "description" },

            { data: "amt_change" },

            { data: "percentage_change" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="budgetscenariorule_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#budgetscenariorule_parent_params').length) {
                        parent_params = parent_params + $('#budgetscenariorule_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=budgetscenariorule&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="budgetscenariorule" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_bscenariorule_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_bscenariorule-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_bscenarioruleTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_bscenariorule_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_bscenariorule_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_bscenariorule_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_bscenarioruleTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_bscenariorule-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_bscenarioruleTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_bscenariorule-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_bscenariorule-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_bscenarioruleTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_bscenarioruleTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-budgetscenariorule-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_bscenariorule_rows_selected, function(index, rowId){

        $.each($('input[name="budgetscenariorule_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'budgetscenariorule_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#budgetscenariorule_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#budgetscenariorule_dependent_list_box').append($(
                '<div id="budgetscenariorule_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="budgetscenariorule" ' + 
                        'data-entity-id="' + rowId + '" class="badge budgetscenariorule_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#budgetscenariorule_dependent_list_box').on('click', '.budgetscenariorule_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="budgetscenariorule_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#budgetscenariorule_dependent_list_box').find('#budgetscenariorule_list_item_' + entityId).remove();

      
   });
   var sb_bscenarioapp_rows_selected = [];
   var sb_bscenarioappTable =  $('#sb_bscenarioapp-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_bscenarioapp-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "budget_item_txt" },

            { data: "budget_txt" },
            { data: "name" },

            { data: "description" },

            { data: "amt_change" },

            { data: "percentage_change" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="budgetscenarioapplication_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#budgetscenarioapplication_parent_params').length) {
                        parent_params = parent_params + $('#budgetscenarioapplication_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=budgetscenarioapplication&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="budgetscenarioapplication" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_bscenarioapp_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_bscenarioapp-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_bscenarioappTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_bscenarioapp_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_bscenarioapp_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_bscenarioapp_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_bscenarioappTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_bscenarioapp-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_bscenarioappTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_bscenarioapp-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_bscenarioapp-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_bscenarioappTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_bscenarioappTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-budgetscenarioapplication-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_bscenarioapp_rows_selected, function(index, rowId){

        $.each($('input[name="budgetscenarioapplication_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'budgetscenarioapplication_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#budgetscenarioapplication_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#budgetscenarioapplication_dependent_list_box').append($(
                '<div id="budgetscenarioapplication_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="budgetscenarioapplication" ' + 
                        'data-entity-id="' + rowId + '" class="badge budgetscenarioapplication_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#budgetscenarioapplication_dependent_list_box').on('click', '.budgetscenarioapplication_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="budgetscenarioapplication_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#budgetscenarioapplication_dependent_list_box').find('#budgetscenarioapplication_list_item_' + entityId).remove();

      
   });
   var sb_pballocation_rows_selected = [];
   var sb_pballocationTable =  $('#sb_pballocation-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_pballocation-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "budget_txt" },

            { data: "payment_txt" },
            { data: "name" },

            { data: "description" },

            { data: "amt_change" },

            { data: "percentage_change" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="paymentbudgetallocation_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#paymentbudgetallocation_parent_params').length) {
                        parent_params = parent_params + $('#paymentbudgetallocation_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=paymentbudgetallocation&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="paymentbudgetallocation" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_pballocation_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_pballocation-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_pballocationTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_pballocation_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_pballocation_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_pballocation_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pballocationTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_pballocation-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_pballocationTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_pballocation-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_pballocation-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_pballocationTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pballocationTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-paymentbudgetallocation-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_pballocation_rows_selected, function(index, rowId){

        $.each($('input[name="paymentbudgetallocation_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'paymentbudgetallocation_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#paymentbudgetallocation_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#paymentbudgetallocation_dependent_list_box').append($(
                '<div id="paymentbudgetallocation_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="paymentbudgetallocation" ' + 
                        'data-entity-id="' + rowId + '" class="badge paymentbudgetallocation_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#paymentbudgetallocation_dependent_list_box').on('click', '.paymentbudgetallocation_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="paymentbudgetallocation_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#paymentbudgetallocation_dependent_list_box').find('#paymentbudgetallocation_list_item_' + entityId).remove();

      
   });
   var sb_glbudgetxref_rows_selected = [];
   var sb_glbudgetxrefTable =  $('#sb_glbudgetxref-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_glbudgetxref-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "bitem_type_txt" },

            { data: "gl_account_txt" },
            { data: "name" },

            { data: "description" },

            { data: "alloc_percentage" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="glbudgetxref_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#glbudgetxref_parent_params').length) {
                        parent_params = parent_params + $('#glbudgetxref_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=glbudgetxref&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="glbudgetxref" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_glbudgetxref_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_glbudgetxref-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_glbudgetxrefTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_glbudgetxref_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_glbudgetxref_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_glbudgetxref_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_glbudgetxrefTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_glbudgetxref-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_glbudgetxrefTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_glbudgetxref-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_glbudgetxref-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_glbudgetxrefTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_glbudgetxrefTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-glbudgetxref-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_glbudgetxref_rows_selected, function(index, rowId){

        $.each($('input[name="glbudgetxref_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'glbudgetxref_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#glbudgetxref_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#glbudgetxref_dependent_list_box').append($(
                '<div id="glbudgetxref_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="glbudgetxref" ' + 
                        'data-entity-id="' + rowId + '" class="badge glbudgetxref_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#glbudgetxref_dependent_list_box').on('click', '.glbudgetxref_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="glbudgetxref_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#glbudgetxref_dependent_list_box').find('#glbudgetxref_list_item_' + entityId).remove();

      
   });
   var sb_disputetype_rows_selected = [];
   var sb_disputetypeTable =  $('#sb_disputetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_disputetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="disputetype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#disputetype_parent_params').length) {
                        parent_params = parent_params + $('#disputetype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=disputetype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="disputetype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_disputetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_disputetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_disputetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_disputetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_disputetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_disputetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_disputetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_disputetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_disputetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_disputetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_disputetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_disputetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_disputetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-disputetype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_disputetype_rows_selected, function(index, rowId){

        $.each($('input[name="disputetype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'disputetype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#disputetype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#disputetype_dependent_list_box').append($(
                '<div id="disputetype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="disputetype" ' + 
                        'data-entity-id="' + rowId + '" class="badge disputetype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#disputetype_dependent_list_box').on('click', '.disputetype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="disputetype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#disputetype_dependent_list_box').find('#disputetype_list_item_' + entityId).remove();

      
   });
   var sb_disputestatus_rows_selected = [];
   var sb_disputestatusTable =  $('#sb_disputestatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_disputestatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="disputestatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#disputestatus_parent_params').length) {
                        parent_params = parent_params + $('#disputestatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=disputestatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="disputestatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_disputestatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_disputestatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_disputestatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_disputestatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_disputestatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_disputestatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_disputestatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_disputestatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_disputestatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_disputestatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_disputestatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_disputestatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_disputestatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-disputestatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_disputestatus_rows_selected, function(index, rowId){

        $.each($('input[name="disputestatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'disputestatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#disputestatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#disputestatus_dependent_list_box').append($(
                '<div id="disputestatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="disputestatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge disputestatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#disputestatus_dependent_list_box').on('click', '.disputestatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="disputestatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#disputestatus_dependent_list_box').find('#disputestatus_list_item_' + entityId).remove();

      
   });
   var sb_dispute_rows_selected = [];
   var sb_disputeTable =  $('#sb_dispute-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_dispute-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "type_txt" },

            { data: "party_txt" },

            { data: "agreement_txt" },

            { data: "status_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="dispute_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#dispute_parent_params').length) {
                        parent_params = parent_params + $('#dispute_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=dispute&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="dispute" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_dispute_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_dispute-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_disputeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_dispute_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_dispute_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_dispute_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_disputeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_dispute-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_disputeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_dispute-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_dispute-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_disputeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_disputeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-dispute-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_dispute_rows_selected, function(index, rowId){

        $.each($('input[name="dispute_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'dispute_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#dispute_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#dispute_dependent_list_box').append($(
                '<div id="dispute_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="dispute" ' + 
                        'data-entity-id="' + rowId + '" class="badge dispute_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#dispute_dependent_list_box').on('click', '.dispute_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="dispute_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#dispute_dependent_list_box').find('#dispute_list_item_' + entityId).remove();

      
   });
   var sb_disputeitem_rows_selected = [];
   var sb_disputeitemTable =  $('#sb_disputeitem-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_disputeitem-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "dispute_txt" },

            { data: "owner_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="disputeitem_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#disputeitem_parent_params').length) {
                        parent_params = parent_params + $('#disputeitem_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=disputeitem&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="disputeitem" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_disputeitem_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_disputeitem-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_disputeitemTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_disputeitem_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_disputeitem_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_disputeitem_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_disputeitemTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_disputeitem-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_disputeitemTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_disputeitem-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_disputeitem-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_disputeitemTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_disputeitemTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-disputeitem-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_disputeitem_rows_selected, function(index, rowId){

        $.each($('input[name="disputeitem_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'disputeitem_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#disputeitem_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#disputeitem_dependent_list_box').append($(
                '<div id="disputeitem_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="disputeitem" ' + 
                        'data-entity-id="' + rowId + '" class="badge disputeitem_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#disputeitem_dependent_list_box').on('click', '.disputeitem_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="disputeitem_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#disputeitem_dependent_list_box').find('#disputeitem_list_item_' + entityId).remove();

      
   });
   var sb_conversation_rows_selected = [];
   var sb_conversationTable =  $('#sb_conversation-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_conversation-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "owner_txt" },

            { data: "counter_party_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="conversation_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#conversation_parent_params').length) {
                        parent_params = parent_params + $('#conversation_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=conversation&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="conversation" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_conversation_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_conversation-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_conversationTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_conversation_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_conversation_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_conversation_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_conversationTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_conversation-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_conversationTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_conversation-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_conversation-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_conversationTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_conversationTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-conversation-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_conversation_rows_selected, function(index, rowId){

        $.each($('input[name="conversation_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'conversation_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#conversation_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#conversation_dependent_list_box').append($(
                '<div id="conversation_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="conversation" ' + 
                        'data-entity-id="' + rowId + '" class="badge conversation_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#conversation_dependent_list_box').on('click', '.conversation_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="conversation_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#conversation_dependent_list_box').find('#conversation_list_item_' + entityId).remove();

      
   });
   var sb_message_rows_selected = [];
   var sb_messageTable =  $('#sb_message-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_message-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "conversation_txt" },

            { data: "owner_txt" },

            { data: "counter_party_txt" },
            { data: "name" },

            { data: "message" },

            { data: "message_date" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="message_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#message_parent_params').length) {
                        parent_params = parent_params + $('#message_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=message&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="message" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_message_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_message-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_messageTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_message_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_message_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_message_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_messageTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_message-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_messageTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_message-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_message-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_messageTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_messageTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-message-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_message_rows_selected, function(index, rowId){

        $.each($('input[name="message_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'message_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#message_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#message_dependent_list_box').append($(
                '<div id="message_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="message" ' + 
                        'data-entity-id="' + rowId + '" class="badge message_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#message_dependent_list_box').on('click', '.message_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="message_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#message_dependent_list_box').find('#message_list_item_' + entityId).remove();

      
   });
   var sb_messagesfiles_rows_selected = [];
   var sb_messagesfilesTable =  $('#sb_messagesfiles-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_messagesfiles-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "message_txt" },
            { data: "name" },

            { data: "description" },

            { data: "file_url" },

            { data: "file_size" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="messagefiles_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#messagefiles_parent_params').length) {
                        parent_params = parent_params + $('#messagefiles_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=messagefiles&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="messagefiles" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_messagesfiles_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_messagesfiles-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_messagesfilesTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_messagesfiles_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_messagesfiles_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_messagesfiles_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_messagesfilesTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_messagesfiles-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_messagesfilesTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_messagesfiles-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_messagesfiles-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_messagesfilesTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_messagesfilesTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-messagefiles-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_messagesfiles_rows_selected, function(index, rowId){

        $.each($('input[name="messagefiles_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'messagefiles_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#messagefiles_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#messagefiles_dependent_list_box').append($(
                '<div id="messagefiles_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="messagefiles" ' + 
                        'data-entity-id="' + rowId + '" class="badge messagefiles_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#messagefiles_dependent_list_box').on('click', '.messagefiles_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="messagefiles_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#messagefiles_dependent_list_box').find('#messagefiles_list_item_' + entityId).remove();

      
   });
   var sb_notifytype_rows_selected = [];
   var sb_notifytypeTable =  $('#sb_notifytype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_notifytype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

            { data: "title_template" },

            { data: "message_template" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="notificationtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#notificationtype_parent_params').length) {
                        parent_params = parent_params + $('#notificationtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=notificationtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="notificationtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_notifytype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_notifytype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_notifytypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_notifytype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_notifytype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_notifytype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_notifytypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_notifytype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_notifytypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_notifytype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_notifytype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_notifytypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_notifytypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-notificationtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_notifytype_rows_selected, function(index, rowId){

        $.each($('input[name="notificationtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'notificationtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#notificationtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#notificationtype_dependent_list_box').append($(
                '<div id="notificationtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="notificationtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge notificationtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#notificationtype_dependent_list_box').on('click', '.notificationtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="notificationtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#notificationtype_dependent_list_box').find('#notificationtype_list_item_' + entityId).remove();

      
   });
   var sb_notifystatus_rows_selected = [];
   var sb_notifystatusTable =  $('#sb_notifystatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_notifystatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="notificationstatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#notificationstatus_parent_params').length) {
                        parent_params = parent_params + $('#notificationstatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=notificationstatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="notificationstatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_notifystatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_notifystatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_notifystatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_notifystatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_notifystatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_notifystatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_notifystatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_notifystatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_notifystatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_notifystatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_notifystatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_notifystatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_notifystatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-notificationstatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_notifystatus_rows_selected, function(index, rowId){

        $.each($('input[name="notificationstatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'notificationstatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#notificationstatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#notificationstatus_dependent_list_box').append($(
                '<div id="notificationstatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="notificationstatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge notificationstatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#notificationstatus_dependent_list_box').on('click', '.notificationstatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="notificationstatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#notificationstatus_dependent_list_box').find('#notificationstatus_list_item_' + entityId).remove();

      
   });
   var sb_notifylevel_rows_selected = [];
   var sb_notifylevelTable =  $('#sb_notifylevel-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_notifylevel-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="notificationlevel_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#notificationlevel_parent_params').length) {
                        parent_params = parent_params + $('#notificationlevel_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=notificationlevel&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="notificationlevel" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_notifylevel_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_notifylevel-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_notifylevelTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_notifylevel_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_notifylevel_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_notifylevel_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_notifylevelTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_notifylevel-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_notifylevelTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_notifylevel-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_notifylevel-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_notifylevelTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_notifylevelTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-notificationlevel-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_notifylevel_rows_selected, function(index, rowId){

        $.each($('input[name="notificationlevel_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'notificationlevel_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#notificationlevel_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#notificationlevel_dependent_list_box').append($(
                '<div id="notificationlevel_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="notificationlevel" ' + 
                        'data-entity-id="' + rowId + '" class="badge notificationlevel_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#notificationlevel_dependent_list_box').on('click', '.notificationlevel_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="notificationlevel_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#notificationlevel_dependent_list_box').find('#notificationlevel_list_item_' + entityId).remove();

      
   });
   var sb_notification_rows_selected = [];
   var sb_notificationTable =  $('#sb_notification-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_notification-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "n_owner_txt" },

            { data: "n_type_txt" },

            { data: "status_txt" },

            { data: "log_level_txt" },
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="notification_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#notification_parent_params').length) {
                        parent_params = parent_params + $('#notification_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=notification&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="notification" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_notification_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_notification-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_notificationTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_notification_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_notification_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_notification_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_notificationTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_notification-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_notificationTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_notification-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_notification-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_notificationTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_notificationTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-notification-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_notification_rows_selected, function(index, rowId){

        $.each($('input[name="notification_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'notification_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#notification_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#notification_dependent_list_box').append($(
                '<div id="notification_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="notification" ' + 
                        'data-entity-id="' + rowId + '" class="badge notification_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#notification_dependent_list_box').on('click', '.notification_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="notification_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#notification_dependent_list_box').find('#notification_list_item_' + entityId).remove();

      
   });
   var sb_pclasstype_rows_selected = [];
   var sb_pclasstypeTable =  $('#sb_pclasstype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_pclasstype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="positionclassificationtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#positionclassificationtype_parent_params').length) {
                        parent_params = parent_params + $('#positionclassificationtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=positionclassificationtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="positionclassificationtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_pclasstype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_pclasstype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_pclasstypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_pclasstype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_pclasstype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_pclasstype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pclasstypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_pclasstype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_pclasstypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_pclasstype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_pclasstype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_pclasstypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pclasstypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-positionclassificationtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_pclasstype_rows_selected, function(index, rowId){

        $.each($('input[name="positionclassificationtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'positionclassificationtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#positionclassificationtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#positionclassificationtype_dependent_list_box').append($(
                '<div id="positionclassificationtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="positionclassificationtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge positionclassificationtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#positionclassificationtype_dependent_list_box').on('click', '.positionclassificationtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="positionclassificationtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#positionclassificationtype_dependent_list_box').find('#positionclassificationtype_list_item_' + entityId).remove();

      
   });
   var sb_ptypeclass_rows_selected = [];
   var sb_ptypeclassTable =  $('#sb_ptypeclass-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_ptypeclass-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "pclass_type_txt" },
            { data: "name" },

            { data: "std_hpw" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="positiontypeclass_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#positiontypeclass_parent_params').length) {
                        parent_params = parent_params + $('#positiontypeclass_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=positiontypeclass&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="positiontypeclass" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_ptypeclass_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_ptypeclass-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_ptypeclassTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_ptypeclass_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_ptypeclass_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_ptypeclass_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ptypeclassTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_ptypeclass-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_ptypeclassTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_ptypeclass-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_ptypeclass-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_ptypeclassTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ptypeclassTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-positiontypeclass-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_ptypeclass_rows_selected, function(index, rowId){

        $.each($('input[name="positiontypeclass_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'positiontypeclass_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#positiontypeclass_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#positiontypeclass_dependent_list_box').append($(
                '<div id="positiontypeclass_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="positiontypeclass" ' + 
                        'data-entity-id="' + rowId + '" class="badge positiontypeclass_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#positiontypeclass_dependent_list_box').on('click', '.positiontypeclass_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="positiontypeclass_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#positiontypeclass_dependent_list_box').find('#positiontypeclass_list_item_' + entityId).remove();

      
   });
   var sb_positiontype_rows_selected = [];
   var sb_positiontypeTable =  $('#sb_positiontype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_positiontype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "ptype_class_txt" },
            { data: "name" },

            { data: "description" },

            { data: "b_percentage" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="positiontype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#positiontype_parent_params').length) {
                        parent_params = parent_params + $('#positiontype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=positiontype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="positiontype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_positiontype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_positiontype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_positiontypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_positiontype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_positiontype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_positiontype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_positiontypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_positiontype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_positiontypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_positiontype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_positiontype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_positiontypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_positiontypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-positiontype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_positiontype_rows_selected, function(index, rowId){

        $.each($('input[name="positiontype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'positiontype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#positiontype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#positiontype_dependent_list_box').append($(
                '<div id="positiontype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="positiontype" ' + 
                        'data-entity-id="' + rowId + '" class="badge positiontype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#positiontype_dependent_list_box').on('click', '.positiontype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="positiontype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#positiontype_dependent_list_box').find('#positiontype_list_item_' + entityId).remove();

      
   });
   var sb_pstatus_rows_selected = [];
   var sb_pstatusTable =  $('#sb_pstatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_pstatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="positionstatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#positionstatus_parent_params').length) {
                        parent_params = parent_params + $('#positionstatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=positionstatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="positionstatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_pstatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_pstatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_pstatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_pstatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_pstatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_pstatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pstatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_pstatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_pstatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_pstatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_pstatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_pstatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pstatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-positionstatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_pstatus_rows_selected, function(index, rowId){

        $.each($('input[name="positionstatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'positionstatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#positionstatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#positionstatus_dependent_list_box').append($(
                '<div id="positionstatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="positionstatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge positionstatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#positionstatus_dependent_list_box').on('click', '.positionstatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="positionstatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#positionstatus_dependent_list_box').find('#positionstatus_list_item_' + entityId).remove();

      
   });
   var sb_resptype_rows_selected = [];
   var sb_resptypeTable =  $('#sb_resptype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_resptype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="responsibilitytype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#responsibilitytype_parent_params').length) {
                        parent_params = parent_params + $('#responsibilitytype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=responsibilitytype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="responsibilitytype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_resptype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_resptype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_resptypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_resptype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_resptype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_resptype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_resptypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_resptype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_resptypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_resptype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_resptype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_resptypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_resptypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-responsibilitytype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_resptype_rows_selected, function(index, rowId){

        $.each($('input[name="responsibilitytype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'responsibilitytype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#responsibilitytype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#responsibilitytype_dependent_list_box').append($(
                '<div id="responsibilitytype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="responsibilitytype" ' + 
                        'data-entity-id="' + rowId + '" class="badge responsibilitytype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#responsibilitytype_dependent_list_box').on('click', '.responsibilitytype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="responsibilitytype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#responsibilitytype_dependent_list_box').find('#responsibilitytype_list_item_' + entityId).remove();

      
   });
   var sb_validresp_rows_selected = [];
   var sb_validrespTable =  $('#sb_validresp-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_validresp-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "position_type_txt" },

            { data: "resp_type_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="validresponsibility_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#validresponsibility_parent_params').length) {
                        parent_params = parent_params + $('#validresponsibility_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=validresponsibility&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="validresponsibility" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_validresp_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_validresp-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_validrespTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_validresp_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_validresp_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_validresp_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_validrespTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_validresp-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_validrespTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_validresp-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_validresp-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_validrespTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_validrespTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-validresponsibility-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_validresp_rows_selected, function(index, rowId){

        $.each($('input[name="validresponsibility_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'validresponsibility_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#validresponsibility_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#validresponsibility_dependent_list_box').append($(
                '<div id="validresponsibility_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="validresponsibility" ' + 
                        'data-entity-id="' + rowId + '" class="badge validresponsibility_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#validresponsibility_dependent_list_box').on('click', '.validresponsibility_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="validresponsibility_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#validresponsibility_dependent_list_box').find('#validresponsibility_list_item_' + entityId).remove();

      
   });
   var sb_position_rows_selected = [];
   var sb_positionTable =  $('#sb_position-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_position-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "position_type_txt" },

            { data: "hiring_org_txt" },

            { data: "status_txt" },

            { data: "budget_item_txt" },
            { data: "name" },

            { data: "salary_fg" },

            { data: "exempt_fg" },

            { data: "fulltime_fg" },

            { data: "temp_fg" },

            { data: "est_fdate" },

            { data: "est_tdate" },

            { data: "actual_fdate" },

            { data: "actual_tdate" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="position_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#position_parent_params').length) {
                        parent_params = parent_params + $('#position_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=position&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="position" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_position_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_position-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_positionTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_position_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_position_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_position_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_positionTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_position-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_positionTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_position-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_position-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_positionTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_positionTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-position-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_position_rows_selected, function(index, rowId){

        $.each($('input[name="position_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'position_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#position_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#position_dependent_list_box').append($(
                '<div id="position_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="position" ' + 
                        'data-entity-id="' + rowId + '" class="badge position_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#position_dependent_list_box').on('click', '.position_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="position_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#position_dependent_list_box').find('#position_list_item_' + entityId).remove();

      
   });
   var sb_posresp_rows_selected = [];
   var sb_posrespTable =  $('#sb_posresp-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_posresp-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "position_txt" },

            { data: "resp_type_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="positionresponsibility_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#positionresponsibility_parent_params').length) {
                        parent_params = parent_params + $('#positionresponsibility_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=positionresponsibility&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="positionresponsibility" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_posresp_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_posresp-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_posrespTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_posresp_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_posresp_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_posresp_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_posrespTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_posresp-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_posrespTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_posresp-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_posresp-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_posrespTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_posrespTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-positionresponsibility-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_posresp_rows_selected, function(index, rowId){

        $.each($('input[name="positionresponsibility_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'positionresponsibility_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#positionresponsibility_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#positionresponsibility_dependent_list_box').append($(
                '<div id="positionresponsibility_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="positionresponsibility" ' + 
                        'data-entity-id="' + rowId + '" class="badge positionresponsibility_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#positionresponsibility_dependent_list_box').on('click', '.positionresponsibility_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="positionresponsibility_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#positionresponsibility_dependent_list_box').find('#positionresponsibility_list_item_' + entityId).remove();

      
   });
   var sb_pfulfillment_rows_selected = [];
   var sb_pfulfillmentTable =  $('#sb_pfulfillment-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_pfulfillment-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "position_txt" },

            { data: "acceptor_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="positionfulfillment_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#positionfulfillment_parent_params').length) {
                        parent_params = parent_params + $('#positionfulfillment_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=positionfulfillment&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="positionfulfillment" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_pfulfillment_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_pfulfillment-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_pfulfillmentTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_pfulfillment_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_pfulfillment_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_pfulfillment_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pfulfillmentTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_pfulfillment-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_pfulfillmentTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_pfulfillment-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_pfulfillment-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_pfulfillmentTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_pfulfillmentTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-positionfulfillment-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_pfulfillment_rows_selected, function(index, rowId){

        $.each($('input[name="positionfulfillment_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'positionfulfillment_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#positionfulfillment_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#positionfulfillment_dependent_list_box').append($(
                '<div id="positionfulfillment_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="positionfulfillment" ' + 
                        'data-entity-id="' + rowId + '" class="badge positionfulfillment_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#positionfulfillment_dependent_list_box').on('click', '.positionfulfillment_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="positionfulfillment_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#positionfulfillment_dependent_list_box').find('#positionfulfillment_list_item_' + entityId).remove();

      
   });
   var sb_preportstruct_rows_selected = [];
   var sb_preportstructTable =  $('#sb_preportstruct-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_preportstruct-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "reporter_txt" },

            { data: "report_to_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "is_primary_fg" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="positionreportingstructure_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#positionreportingstructure_parent_params').length) {
                        parent_params = parent_params + $('#positionreportingstructure_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=positionreportingstructure&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="positionreportingstructure" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_preportstruct_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_preportstruct-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_preportstructTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_preportstruct_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_preportstruct_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_preportstruct_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_preportstructTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_preportstruct-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_preportstructTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_preportstruct-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_preportstruct-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_preportstructTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_preportstructTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-positionreportingstructure-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_preportstruct_rows_selected, function(index, rowId){

        $.each($('input[name="positionreportingstructure_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'positionreportingstructure_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#positionreportingstructure_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#positionreportingstructure_dependent_list_box').append($(
                '<div id="positionreportingstructure_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="positionreportingstructure" ' + 
                        'data-entity-id="' + rowId + '" class="badge positionreportingstructure_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#positionreportingstructure_dependent_list_box').on('click', '.positionreportingstructure_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="positionreportingstructure_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#positionreportingstructure_dependent_list_box').find('#positionreportingstructure_list_item_' + entityId).remove();

      
   });
   var sb_ratetype_rows_selected = [];
   var sb_ratetypeTable =  $('#sb_ratetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_ratetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="ratetype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#ratetype_parent_params').length) {
                        parent_params = parent_params + $('#ratetype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=ratetype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="ratetype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_ratetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_ratetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_ratetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_ratetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_ratetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_ratetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ratetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_ratetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_ratetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_ratetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_ratetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_ratetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ratetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-ratetype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_ratetype_rows_selected, function(index, rowId){

        $.each($('input[name="ratetype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'ratetype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#ratetype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#ratetype_dependent_list_box').append($(
                '<div id="ratetype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="ratetype" ' + 
                        'data-entity-id="' + rowId + '" class="badge ratetype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#ratetype_dependent_list_box').on('click', '.ratetype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="ratetype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#ratetype_dependent_list_box').find('#ratetype_list_item_' + entityId).remove();

      
   });
   var sb_paygrade_rows_selected = [];
   var sb_paygradeTable =  $('#sb_paygrade-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_paygrade-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="paygrade_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#paygrade_parent_params').length) {
                        parent_params = parent_params + $('#paygrade_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=paygrade&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="paygrade" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_paygrade_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_paygrade-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_paygradeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_paygrade_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_paygrade_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_paygrade_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_paygradeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_paygrade-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_paygradeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_paygrade-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_paygrade-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_paygradeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_paygradeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-paygrade-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_paygrade_rows_selected, function(index, rowId){

        $.each($('input[name="paygrade_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'paygrade_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#paygrade_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#paygrade_dependent_list_box').append($(
                '<div id="paygrade_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="paygrade" ' + 
                        'data-entity-id="' + rowId + '" class="badge paygrade_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#paygrade_dependent_list_box').on('click', '.paygrade_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="paygrade_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#paygrade_dependent_list_box').find('#paygrade_list_item_' + entityId).remove();

      
   });
   var sb_salarystep_rows_selected = [];
   var sb_salarystepTable =  $('#sb_salarystep-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_salarystep-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "amount" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="salarystep_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#salarystep_parent_params').length) {
                        parent_params = parent_params + $('#salarystep_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=salarystep&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="salarystep" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_salarystep_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_salarystep-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_salarystepTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_salarystep_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_salarystep_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_salarystep_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_salarystepTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_salarystep-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_salarystepTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_salarystep-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_salarystep-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_salarystepTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_salarystepTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-salarystep-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_salarystep_rows_selected, function(index, rowId){

        $.each($('input[name="salarystep_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'salarystep_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#salarystep_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#salarystep_dependent_list_box').append($(
                '<div id="salarystep_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="salarystep" ' + 
                        'data-entity-id="' + rowId + '" class="badge salarystep_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#salarystep_dependent_list_box').on('click', '.salarystep_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="salarystep_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#salarystep_dependent_list_box').find('#salarystep_list_item_' + entityId).remove();

      
   });
   var sb_ptyperate_rows_selected = [];
   var sb_ptyperateTable =  $('#sb_ptyperate-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_ptyperate-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "position_txt" },

            { data: "rate_type_txt" },

            { data: "period_type_txt" },

            { data: "salary_step_txt" },
            { data: "name" },

            { data: "rate" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="positiontyperate_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#positiontyperate_parent_params').length) {
                        parent_params = parent_params + $('#positiontyperate_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=positiontyperate&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="positiontyperate" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_ptyperate_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_ptyperate-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_ptyperateTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_ptyperate_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_ptyperate_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_ptyperate_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ptyperateTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_ptyperate-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_ptyperateTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_ptyperate-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_ptyperate-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_ptyperateTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ptyperateTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-positiontyperate-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_ptyperate_rows_selected, function(index, rowId){

        $.each($('input[name="positiontyperate_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'positiontyperate_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#positiontyperate_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#positiontyperate_dependent_list_box').append($(
                '<div id="positiontyperate_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="positiontyperate" ' + 
                        'data-entity-id="' + rowId + '" class="badge positiontyperate_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#positiontyperate_dependent_list_box').on('click', '.positiontyperate_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="positiontyperate_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#positiontyperate_dependent_list_box').find('#positiontyperate_list_item_' + entityId).remove();

      
   });
   var sb_payhistory_rows_selected = [];
   var sb_payhistoryTable =  $('#sb_payhistory-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_payhistory-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "period_type_txt" },

            { data: "salary_step_txt" },

            { data: "employment_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="payhistory_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#payhistory_parent_params').length) {
                        parent_params = parent_params + $('#payhistory_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=payhistory&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="payhistory" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_payhistory_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_payhistory-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_payhistoryTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_payhistory_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_payhistory_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_payhistory_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_payhistoryTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_payhistory-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_payhistoryTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_payhistory-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_payhistory-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_payhistoryTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_payhistoryTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-payhistory-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_payhistory_rows_selected, function(index, rowId){

        $.each($('input[name="payhistory_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'payhistory_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#payhistory_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#payhistory_dependent_list_box').append($(
                '<div id="payhistory_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="payhistory" ' + 
                        'data-entity-id="' + rowId + '" class="badge payhistory_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#payhistory_dependent_list_box').on('click', '.payhistory_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="payhistory_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#payhistory_dependent_list_box').find('#payhistory_list_item_' + entityId).remove();

      
   });
   var sb_benefittype_rows_selected = [];
   var sb_benefittypeTable =  $('#sb_benefittype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_benefittype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "emppaid_percentage" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="benefittype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#benefittype_parent_params').length) {
                        parent_params = parent_params + $('#benefittype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=benefittype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="benefittype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_benefittype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_benefittype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_benefittypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_benefittype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_benefittype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_benefittype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_benefittypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_benefittype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_benefittypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_benefittype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_benefittype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_benefittypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_benefittypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-benefittype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_benefittype_rows_selected, function(index, rowId){

        $.each($('input[name="benefittype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'benefittype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#benefittype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#benefittype_dependent_list_box').append($(
                '<div id="benefittype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="benefittype" ' + 
                        'data-entity-id="' + rowId + '" class="badge benefittype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#benefittype_dependent_list_box').on('click', '.benefittype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="benefittype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#benefittype_dependent_list_box').find('#benefittype_list_item_' + entityId).remove();

      
   });
   var sb_partybenefit_rows_selected = [];
   var sb_partybenefitTable =  $('#sb_partybenefit-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_partybenefit-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "period_type_txt" },

            { data: "benefit_type_txt" },

            { data: "employment_txt" },
            { data: "name" },

            { data: "cost" },

            { data: "avail_time" },

            { data: "aemppaid_percentage" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partybenefit_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partybenefit_parent_params').length) {
                        parent_params = parent_params + $('#partybenefit_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partybenefit&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partybenefit" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_partybenefit_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_partybenefit-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_partybenefitTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_partybenefit_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_partybenefit_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_partybenefit_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partybenefitTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_partybenefit-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_partybenefitTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_partybenefit-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_partybenefit-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_partybenefitTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partybenefitTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partybenefit-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_partybenefit_rows_selected, function(index, rowId){

        $.each($('input[name="partybenefit_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partybenefit_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partybenefit_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partybenefit_dependent_list_box').append($(
                '<div id="partybenefit_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partybenefit" ' + 
                        'data-entity-id="' + rowId + '" class="badge partybenefit_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partybenefit_dependent_list_box').on('click', '.partybenefit_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partybenefit_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partybenefit_dependent_list_box').find('#partybenefit_list_item_' + entityId).remove();

      
   });
   var sb_deductiontype_rows_selected = [];
   var sb_deductiontypeTable =  $('#sb_deductiontype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_deductiontype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="deductiontype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#deductiontype_parent_params').length) {
                        parent_params = parent_params + $('#deductiontype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=deductiontype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="deductiontype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_deductiontype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_deductiontype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_deductiontypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_deductiontype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_deductiontype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_deductiontype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_deductiontypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_deductiontype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_deductiontypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_deductiontype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_deductiontype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_deductiontypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_deductiontypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-deductiontype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_deductiontype_rows_selected, function(index, rowId){

        $.each($('input[name="deductiontype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'deductiontype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#deductiontype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#deductiontype_dependent_list_box').append($(
                '<div id="deductiontype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="deductiontype" ' + 
                        'data-entity-id="' + rowId + '" class="badge deductiontype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#deductiontype_dependent_list_box').on('click', '.deductiontype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="deductiontype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#deductiontype_dependent_list_box').find('#deductiontype_list_item_' + entityId).remove();

      
   });
   var sb_deduction_rows_selected = [];
   var sb_deductionTable =  $('#sb_deduction-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_deduction-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "deduction_type_txt" },

            { data: "payment_txt" },
            { data: "name" },

            { data: "amount" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="deduction_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#deduction_parent_params').length) {
                        parent_params = parent_params + $('#deduction_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=deduction&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="deduction" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_deduction_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_deduction-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_deductionTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_deduction_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_deduction_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_deduction_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_deductionTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_deduction-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_deductionTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_deduction-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_deduction-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_deductionTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_deductionTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-deduction-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_deduction_rows_selected, function(index, rowId){

        $.each($('input[name="deduction_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'deduction_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#deduction_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#deduction_dependent_list_box').append($(
                '<div id="deduction_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="deduction" ' + 
                        'data-entity-id="' + rowId + '" class="badge deduction_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#deduction_dependent_list_box').on('click', '.deduction_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="deduction_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#deduction_dependent_list_box').find('#deduction_list_item_' + entityId).remove();

      
   });
   var sb_prpreference_rows_selected = [];
   var sb_prpreferenceTable =  $('#sb_prpreference-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_prpreference-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "period_type_txt" },

            { data: "paymeth_type_txt" },

            { data: "deduction_type_txt" },

            { data: "internal_org_txt" },

            { data: "employee_txt" },
            { data: "name" },

            { data: "flat_amount" },

            { data: "routing_no" },

            { data: "account_no" },

            { data: "bank_name" },

            { data: "percentage" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="payrollpreference_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#payrollpreference_parent_params').length) {
                        parent_params = parent_params + $('#payrollpreference_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=payrollpreference&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="payrollpreference" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_prpreference_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_prpreference-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_prpreferenceTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_prpreference_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_prpreference_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_prpreference_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_prpreferenceTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_prpreference-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_prpreferenceTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_prpreference-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_prpreference-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_prpreferenceTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_prpreferenceTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-payrollpreference-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_prpreference_rows_selected, function(index, rowId){

        $.each($('input[name="payrollpreference_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'payrollpreference_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#payrollpreference_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#payrollpreference_dependent_list_box').append($(
                '<div id="payrollpreference_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="payrollpreference" ' + 
                        'data-entity-id="' + rowId + '" class="badge payrollpreference_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#payrollpreference_dependent_list_box').on('click', '.payrollpreference_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="payrollpreference_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#payrollpreference_dependent_list_box').find('#payrollpreference_list_item_' + entityId).remove();

      
   });
   var sb_empappstatus_rows_selected = [];
   var sb_empappstatusTable =  $('#sb_empappstatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_empappstatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="employmentapplicationstatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#employmentapplicationstatus_parent_params').length) {
                        parent_params = parent_params + $('#employmentapplicationstatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=employmentapplicationstatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="employmentapplicationstatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_empappstatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_empappstatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_empappstatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_empappstatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_empappstatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_empappstatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_empappstatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_empappstatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_empappstatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_empappstatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_empappstatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_empappstatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_empappstatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-employmentapplicationstatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_empappstatus_rows_selected, function(index, rowId){

        $.each($('input[name="employmentapplicationstatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'employmentapplicationstatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#employmentapplicationstatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#employmentapplicationstatus_dependent_list_box').append($(
                '<div id="employmentapplicationstatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="employmentapplicationstatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge employmentapplicationstatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#employmentapplicationstatus_dependent_list_box').on('click', '.employmentapplicationstatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="employmentapplicationstatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#employmentapplicationstatus_dependent_list_box').find('#employmentapplicationstatus_list_item_' + entityId).remove();

      
   });
   var sb_empappsrctype_rows_selected = [];
   var sb_empappsrctypeTable =  $('#sb_empappsrctype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_empappsrctype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="employmentapplicationsourcetype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#employmentapplicationsourcetype_parent_params').length) {
                        parent_params = parent_params + $('#employmentapplicationsourcetype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=employmentapplicationsourcetype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="employmentapplicationsourcetype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_empappsrctype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_empappsrctype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_empappsrctypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_empappsrctype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_empappsrctype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_empappsrctype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_empappsrctypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_empappsrctype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_empappsrctypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_empappsrctype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_empappsrctype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_empappsrctypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_empappsrctypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-employmentapplicationsourcetype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_empappsrctype_rows_selected, function(index, rowId){

        $.each($('input[name="employmentapplicationsourcetype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'employmentapplicationsourcetype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#employmentapplicationsourcetype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#employmentapplicationsourcetype_dependent_list_box').append($(
                '<div id="employmentapplicationsourcetype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="employmentapplicationsourcetype" ' + 
                        'data-entity-id="' + rowId + '" class="badge employmentapplicationsourcetype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#employmentapplicationsourcetype_dependent_list_box').on('click', '.employmentapplicationsourcetype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="employmentapplicationsourcetype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#employmentapplicationsourcetype_dependent_list_box').find('#employmentapplicationsourcetype_list_item_' + entityId).remove();

      
   });
   var sb_empapplication_rows_selected = [];
   var sb_empapplicationTable =  $('#sb_empapplication-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_empapplication-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "position_txt" },

            { data: "status_txt" },

            { data: "source_txt" },

            { data: "referred_by_txt" },

            { data: "applicant_txt" },
            { data: "name" },

            { data: "application_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="employmentapplication_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#employmentapplication_parent_params').length) {
                        parent_params = parent_params + $('#employmentapplication_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=employmentapplication&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="employmentapplication" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_empapplication_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_empapplication-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_empapplicationTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_empapplication_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_empapplication_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_empapplication_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_empapplicationTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_empapplication-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_empapplicationTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_empapplication-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_empapplication-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_empapplicationTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_empapplicationTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-employmentapplication-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_empapplication_rows_selected, function(index, rowId){

        $.each($('input[name="employmentapplication_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'employmentapplication_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#employmentapplication_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#employmentapplication_dependent_list_box').append($(
                '<div id="employmentapplication_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="employmentapplication" ' + 
                        'data-entity-id="' + rowId + '" class="badge employmentapplication_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#employmentapplication_dependent_list_box').on('click', '.employmentapplication_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="employmentapplication_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#employmentapplication_dependent_list_box').find('#employmentapplication_list_item_' + entityId).remove();

      
   });
   var sb_qualtype_rows_selected = [];
   var sb_qualtypeTable =  $('#sb_qualtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_qualtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="qualificationtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#qualificationtype_parent_params').length) {
                        parent_params = parent_params + $('#qualificationtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=qualificationtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="qualificationtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_qualtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_qualtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_qualtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_qualtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_qualtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_qualtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_qualtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_qualtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_qualtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_qualtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_qualtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_qualtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_qualtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-qualificationtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_qualtype_rows_selected, function(index, rowId){

        $.each($('input[name="qualificationtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'qualificationtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#qualificationtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#qualificationtype_dependent_list_box').append($(
                '<div id="qualificationtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="qualificationtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge qualificationtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#qualificationtype_dependent_list_box').on('click', '.qualificationtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="qualificationtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#qualificationtype_dependent_list_box').find('#qualificationtype_list_item_' + entityId).remove();

      
   });
   var sb_skilltype_rows_selected = [];
   var sb_skilltypeTable =  $('#sb_skilltype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_skilltype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="skilltype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#skilltype_parent_params').length) {
                        parent_params = parent_params + $('#skilltype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=skilltype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="skilltype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_skilltype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_skilltype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_skilltypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_skilltype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_skilltype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_skilltype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_skilltypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_skilltype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_skilltypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_skilltype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_skilltype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_skilltypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_skilltypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-skilltype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_skilltype_rows_selected, function(index, rowId){

        $.each($('input[name="skilltype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'skilltype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#skilltype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#skilltype_dependent_list_box').append($(
                '<div id="skilltype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="skilltype" ' + 
                        'data-entity-id="' + rowId + '" class="badge skilltype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#skilltype_dependent_list_box').on('click', '.skilltype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="skilltype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#skilltype_dependent_list_box').find('#skilltype_list_item_' + entityId).remove();

      
   });
   var sb_tctype_rows_selected = [];
   var sb_tctypeTable =  $('#sb_tctype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_tctype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="trainingclasstype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#trainingclasstype_parent_params').length) {
                        parent_params = parent_params + $('#trainingclasstype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=trainingclasstype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="trainingclasstype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_tctype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_tctype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_tctypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_tctype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_tctype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_tctype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_tctypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_tctype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_tctypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_tctype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_tctype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_tctypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_tctypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-trainingclasstype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_tctype_rows_selected, function(index, rowId){

        $.each($('input[name="trainingclasstype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'trainingclasstype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#trainingclasstype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#trainingclasstype_dependent_list_box').append($(
                '<div id="trainingclasstype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="trainingclasstype" ' + 
                        'data-entity-id="' + rowId + '" class="badge trainingclasstype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#trainingclasstype_dependent_list_box').on('click', '.trainingclasstype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="trainingclasstype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#trainingclasstype_dependent_list_box').find('#trainingclasstype_list_item_' + entityId).remove();

      
   });
   var sb_ptraining_rows_selected = [];
   var sb_ptrainingTable =  $('#sb_ptraining-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_ptraining-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "person_txt" },

            { data: "tc_type_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="persontraining_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#persontraining_parent_params').length) {
                        parent_params = parent_params + $('#persontraining_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=persontraining&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="persontraining" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_ptraining_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_ptraining-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_ptrainingTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_ptraining_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_ptraining_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_ptraining_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ptrainingTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_ptraining-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_ptrainingTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_ptraining-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_ptraining-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_ptrainingTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ptrainingTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-persontraining-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_ptraining_rows_selected, function(index, rowId){

        $.each($('input[name="persontraining_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'persontraining_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#persontraining_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#persontraining_dependent_list_box').append($(
                '<div id="persontraining_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="persontraining" ' + 
                        'data-entity-id="' + rowId + '" class="badge persontraining_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#persontraining_dependent_list_box').on('click', '.persontraining_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="persontraining_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#persontraining_dependent_list_box').find('#persontraining_list_item_' + entityId).remove();

      
   });
   var sb_resume_rows_selected = [];
   var sb_resumeTable =  $('#sb_resume-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_resume-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "party_txt" },
            { data: "name" },

            { data: "resume_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="resume_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#resume_parent_params').length) {
                        parent_params = parent_params + $('#resume_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=resume&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="resume" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_resume_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_resume-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_resumeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_resume_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_resume_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_resume_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_resumeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_resume-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_resumeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_resume-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_resume-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_resumeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_resumeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-resume-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_resume_rows_selected, function(index, rowId){

        $.each($('input[name="resume_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'resume_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#resume_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#resume_dependent_list_box').append($(
                '<div id="resume_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="resume" ' + 
                        'data-entity-id="' + rowId + '" class="badge resume_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#resume_dependent_list_box').on('click', '.resume_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="resume_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#resume_dependent_list_box').find('#resume_list_item_' + entityId).remove();

      
   });
   var sb_partyskill_rows_selected = [];
   var sb_partyskillTable =  $('#sb_partyskill-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_partyskill-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "party_txt" },

            { data: "skill_type_txt" },
            { data: "name" },

            { data: "started_date" },

            { data: "exp_yrs" },

            { data: "skill_level" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partyskill_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partyskill_parent_params').length) {
                        parent_params = parent_params + $('#partyskill_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partyskill&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partyskill" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_partyskill_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_partyskill-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_partyskillTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_partyskill_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_partyskill_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_partyskill_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyskillTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_partyskill-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_partyskillTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_partyskill-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_partyskill-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_partyskillTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyskillTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partyskill-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_partyskill_rows_selected, function(index, rowId){

        $.each($('input[name="partyskill_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partyskill_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partyskill_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partyskill_dependent_list_box').append($(
                '<div id="partyskill_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partyskill" ' + 
                        'data-entity-id="' + rowId + '" class="badge partyskill_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partyskill_dependent_list_box').on('click', '.partyskill_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partyskill_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partyskill_dependent_list_box').find('#partyskill_list_item_' + entityId).remove();

      
   });
   var sb_partyqual_rows_selected = [];
   var sb_partyqualTable =  $('#sb_partyqual-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_partyqual-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "held_by_txt" },

            { data: "qualification_type_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partyqualification_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partyqualification_parent_params').length) {
                        parent_params = parent_params + $('#partyqualification_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partyqualification&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partyqualification" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_partyqual_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_partyqual-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_partyqualTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_partyqual_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_partyqual_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_partyqual_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyqualTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_partyqual-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_partyqualTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_partyqual-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_partyqual-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_partyqualTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyqualTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partyqualification-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_partyqual_rows_selected, function(index, rowId){

        $.each($('input[name="partyqualification_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partyqualification_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partyqualification_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partyqualification_dependent_list_box').append($(
                '<div id="partyqualification_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partyqualification" ' + 
                        'data-entity-id="' + rowId + '" class="badge partyqualification_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partyqualification_dependent_list_box').on('click', '.partyqualification_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partyqualification_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partyqualification_dependent_list_box').find('#partyqualification_list_item_' + entityId).remove();

      
   });
   var sb_perfnoteype_rows_selected = [];
   var sb_perfnoteypeTable =  $('#sb_perfnoteype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_perfnoteype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="performancenotetype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#performancenotetype_parent_params').length) {
                        parent_params = parent_params + $('#performancenotetype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=performancenotetype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="performancenotetype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_perfnoteype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_perfnoteype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_perfnoteypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_perfnoteype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_perfnoteype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_perfnoteype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_perfnoteypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_perfnoteype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_perfnoteypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_perfnoteype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_perfnoteype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_perfnoteypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_perfnoteypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-performancenotetype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_perfnoteype_rows_selected, function(index, rowId){

        $.each($('input[name="performancenotetype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'performancenotetype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#performancenotetype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#performancenotetype_dependent_list_box').append($(
                '<div id="performancenotetype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="performancenotetype" ' + 
                        'data-entity-id="' + rowId + '" class="badge performancenotetype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#performancenotetype_dependent_list_box').on('click', '.performancenotetype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="performancenotetype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#performancenotetype_dependent_list_box').find('#performancenotetype_list_item_' + entityId).remove();

      
   });
   var sb_perfnote_rows_selected = [];
   var sb_perfnoteTable =  $('#sb_perfnote-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_perfnote-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "given_by_txt" },

            { data: "regarding_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "comm_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="performancenote_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#performancenote_parent_params').length) {
                        parent_params = parent_params + $('#performancenote_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=performancenote&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="performancenote" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_perfnote_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_perfnote-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_perfnoteTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_perfnote_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_perfnote_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_perfnote_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_perfnoteTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_perfnote-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_perfnoteTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_perfnote-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_perfnote-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_perfnoteTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_perfnoteTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-performancenote-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_perfnote_rows_selected, function(index, rowId){

        $.each($('input[name="performancenote_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'performancenote_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#performancenote_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#performancenote_dependent_list_box').append($(
                '<div id="performancenote_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="performancenote" ' + 
                        'data-entity-id="' + rowId + '" class="badge performancenote_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#performancenote_dependent_list_box').on('click', '.performancenote_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="performancenote_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#performancenote_dependent_list_box').find('#performancenote_list_item_' + entityId).remove();

      
   });
   var sb_perfreview_rows_selected = [];
   var sb_perfreviewTable =  $('#sb_perfreview-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_perfreview-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "from_role_txt" },

            { data: "for_role_txt" },

            { data: "position_txt" },

            { data: "payment_txt" },

            { data: "pay_history_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="performancereview_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#performancereview_parent_params').length) {
                        parent_params = parent_params + $('#performancereview_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=performancereview&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="performancereview" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_perfreview_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_perfreview-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_perfreviewTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_perfreview_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_perfreview_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_perfreview_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_perfreviewTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_perfreview-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_perfreviewTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_perfreview-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_perfreview-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_perfreviewTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_perfreviewTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-performancereview-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_perfreview_rows_selected, function(index, rowId){

        $.each($('input[name="performancereview_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'performancereview_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#performancereview_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#performancereview_dependent_list_box').append($(
                '<div id="performancereview_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="performancereview" ' + 
                        'data-entity-id="' + rowId + '" class="badge performancereview_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#performancereview_dependent_list_box').on('click', '.performancereview_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="performancereview_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#performancereview_dependent_list_box').find('#performancereview_list_item_' + entityId).remove();

      
   });
   var sb_ratingtype_rows_selected = [];
   var sb_ratingtypeTable =  $('#sb_ratingtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_ratingtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="ratingtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#ratingtype_parent_params').length) {
                        parent_params = parent_params + $('#ratingtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=ratingtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="ratingtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_ratingtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_ratingtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_ratingtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_ratingtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_ratingtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_ratingtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ratingtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_ratingtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_ratingtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_ratingtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_ratingtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_ratingtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ratingtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-ratingtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_ratingtype_rows_selected, function(index, rowId){

        $.each($('input[name="ratingtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'ratingtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#ratingtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#ratingtype_dependent_list_box').append($(
                '<div id="ratingtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="ratingtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge ratingtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#ratingtype_dependent_list_box').on('click', '.ratingtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="ratingtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#ratingtype_dependent_list_box').find('#ratingtype_list_item_' + entityId).remove();

      
   });
   var sb_previtemtype_rows_selected = [];
   var sb_previtemtypeTable =  $('#sb_previtemtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_previtemtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="perfreviewitemtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#perfreviewitemtype_parent_params').length) {
                        parent_params = parent_params + $('#perfreviewitemtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=perfreviewitemtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="perfreviewitemtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_previtemtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_previtemtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_previtemtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_previtemtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_previtemtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_previtemtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_previtemtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_previtemtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_previtemtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_previtemtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_previtemtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_previtemtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_previtemtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-perfreviewitemtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_previtemtype_rows_selected, function(index, rowId){

        $.each($('input[name="perfreviewitemtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'perfreviewitemtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#perfreviewitemtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#perfreviewitemtype_dependent_list_box').append($(
                '<div id="perfreviewitemtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="perfreviewitemtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge perfreviewitemtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#perfreviewitemtype_dependent_list_box').on('click', '.perfreviewitemtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="perfreviewitemtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#perfreviewitemtype_dependent_list_box').find('#perfreviewitemtype_list_item_' + entityId).remove();

      
   });
   var sb_perfreviewitem_rows_selected = [];
   var sb_perfreviewitemTable =  $('#sb_perfreviewitem-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_perfreviewitem-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "perf_review_txt" },

            { data: "item_type_txt" },

            { data: "rating_type_txt" },
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="performancereviewitem_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#performancereviewitem_parent_params').length) {
                        parent_params = parent_params + $('#performancereviewitem_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=performancereviewitem&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="performancereviewitem" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_perfreviewitem_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_perfreviewitem-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_perfreviewitemTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_perfreviewitem_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_perfreviewitem_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_perfreviewitem_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_perfreviewitemTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_perfreviewitem-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_perfreviewitemTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_perfreviewitem-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_perfreviewitem-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_perfreviewitemTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_perfreviewitemTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-performancereviewitem-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_perfreviewitem_rows_selected, function(index, rowId){

        $.each($('input[name="performancereviewitem_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'performancereviewitem_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#performancereviewitem_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#performancereviewitem_dependent_list_box').append($(
                '<div id="performancereviewitem_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="performancereviewitem" ' + 
                        'data-entity-id="' + rowId + '" class="badge performancereviewitem_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#performancereviewitem_dependent_list_box').on('click', '.performancereviewitem_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="performancereviewitem_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#performancereviewitem_dependent_list_box').find('#performancereviewitem_list_item_' + entityId).remove();

      
   });
   var sb_terminationtype_rows_selected = [];
   var sb_terminationtypeTable =  $('#sb_terminationtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_terminationtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="terminationtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#terminationtype_parent_params').length) {
                        parent_params = parent_params + $('#terminationtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=terminationtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="terminationtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_terminationtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_terminationtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_terminationtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_terminationtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_terminationtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_terminationtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_terminationtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_terminationtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_terminationtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_terminationtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_terminationtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_terminationtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_terminationtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-terminationtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_terminationtype_rows_selected, function(index, rowId){

        $.each($('input[name="terminationtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'terminationtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#terminationtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#terminationtype_dependent_list_box').append($(
                '<div id="terminationtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="terminationtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge terminationtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#terminationtype_dependent_list_box').on('click', '.terminationtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="terminationtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#terminationtype_dependent_list_box').find('#terminationtype_list_item_' + entityId).remove();

      
   });
   var sb_termreason_rows_selected = [];
   var sb_termreasonTable =  $('#sb_termreason-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_termreason-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="terminationreason_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#terminationreason_parent_params').length) {
                        parent_params = parent_params + $('#terminationreason_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=terminationreason&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="terminationreason" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_termreason_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_termreason-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_termreasonTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_termreason_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_termreason_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_termreason_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_termreasonTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_termreason-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_termreasonTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_termreason-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_termreason-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_termreasonTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_termreasonTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-terminationreason-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_termreason_rows_selected, function(index, rowId){

        $.each($('input[name="terminationreason_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'terminationreason_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#terminationreason_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#terminationreason_dependent_list_box').append($(
                '<div id="terminationreason_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="terminationreason" ' + 
                        'data-entity-id="' + rowId + '" class="badge terminationreason_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#terminationreason_dependent_list_box').on('click', '.terminationreason_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="terminationreason_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#terminationreason_dependent_list_box').find('#terminationreason_list_item_' + entityId).remove();

      
   });
   var sb_ucstatus_rows_selected = [];
   var sb_ucstatusTable =  $('#sb_ucstatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_ucstatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="unemploymentclaimstatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#unemploymentclaimstatus_parent_params').length) {
                        parent_params = parent_params + $('#unemploymentclaimstatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=unemploymentclaimstatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="unemploymentclaimstatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_ucstatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_ucstatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_ucstatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_ucstatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_ucstatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_ucstatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ucstatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_ucstatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_ucstatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_ucstatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_ucstatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_ucstatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_ucstatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-unemploymentclaimstatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_ucstatus_rows_selected, function(index, rowId){

        $.each($('input[name="unemploymentclaimstatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'unemploymentclaimstatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#unemploymentclaimstatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#unemploymentclaimstatus_dependent_list_box').append($(
                '<div id="unemploymentclaimstatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="unemploymentclaimstatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge unemploymentclaimstatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#unemploymentclaimstatus_dependent_list_box').on('click', '.unemploymentclaimstatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="unemploymentclaimstatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#unemploymentclaimstatus_dependent_list_box').find('#unemploymentclaimstatus_list_item_' + entityId).remove();

      
   });
   var sb_uempclaim_rows_selected = [];
   var sb_uempclaimTable =  $('#sb_uempclaim-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_uempclaim-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "status_txt" },

            { data: "employment_txt" },
            { data: "name" },

            { data: "claim_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="unemploymentclaim_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#unemploymentclaim_parent_params').length) {
                        parent_params = parent_params + $('#unemploymentclaim_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=unemploymentclaim&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="unemploymentclaim" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_uempclaim_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_uempclaim-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_uempclaimTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_uempclaim_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_uempclaim_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_uempclaim_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_uempclaimTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_uempclaim-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_uempclaimTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_uempclaim-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_uempclaim-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_uempclaimTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_uempclaimTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-unemploymentclaim-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_uempclaim_rows_selected, function(index, rowId){

        $.each($('input[name="unemploymentclaim_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'unemploymentclaim_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#unemploymentclaim_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#unemploymentclaim_dependent_list_box').append($(
                '<div id="unemploymentclaim_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="unemploymentclaim" ' + 
                        'data-entity-id="' + rowId + '" class="badge unemploymentclaim_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#unemploymentclaim_dependent_list_box').on('click', '.unemploymentclaim_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="unemploymentclaim_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#unemploymentclaim_dependent_list_box').find('#unemploymentclaim_list_item_' + entityId).remove();

      
   });
   var sb_delivertype_rows_selected = [];
   var sb_delivertypeTable =  $('#sb_delivertype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_delivertype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="deliverabletype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#deliverabletype_parent_params').length) {
                        parent_params = parent_params + $('#deliverabletype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=deliverabletype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="deliverabletype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_delivertype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_delivertype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_delivertypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_delivertype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_delivertype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_delivertype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_delivertypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_delivertype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_delivertypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_delivertype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_delivertype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_delivertypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_delivertypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-deliverabletype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_delivertype_rows_selected, function(index, rowId){

        $.each($('input[name="deliverabletype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'deliverabletype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#deliverabletype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#deliverabletype_dependent_list_box').append($(
                '<div id="deliverabletype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="deliverabletype" ' + 
                        'data-entity-id="' + rowId + '" class="badge deliverabletype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#deliverabletype_dependent_list_box').on('click', '.deliverabletype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="deliverabletype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#deliverabletype_dependent_list_box').find('#deliverabletype_list_item_' + entityId).remove();

      
   });
   var sb_deliverable_rows_selected = [];
   var sb_deliverableTable =  $('#sb_deliverable-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_deliverable-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "d_type_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="deliverable_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#deliverable_parent_params').length) {
                        parent_params = parent_params + $('#deliverable_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=deliverable&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="deliverable" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_deliverable_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_deliverable-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_deliverableTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_deliverable_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_deliverable_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_deliverable_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_deliverableTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_deliverable-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_deliverableTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_deliverable-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_deliverable-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_deliverableTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_deliverableTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-deliverable-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_deliverable_rows_selected, function(index, rowId){

        $.each($('input[name="deliverable_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'deliverable_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#deliverable_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#deliverable_dependent_list_box').append($(
                '<div id="deliverable_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="deliverable" ' + 
                        'data-entity-id="' + rowId + '" class="badge deliverable_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#deliverable_dependent_list_box').on('click', '.deliverable_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="deliverable_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#deliverable_dependent_list_box').find('#deliverable_list_item_' + entityId).remove();

      
   });
   var sb_requiretype_rows_selected = [];
   var sb_requiretypeTable =  $('#sb_requiretype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_requiretype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="requirementtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#requirementtype_parent_params').length) {
                        parent_params = parent_params + $('#requirementtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=requirementtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="requirementtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_requiretype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_requiretype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_requiretypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_requiretype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_requiretype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_requiretype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_requiretypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_requiretype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_requiretypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_requiretype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_requiretype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_requiretypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_requiretypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-requirementtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_requiretype_rows_selected, function(index, rowId){

        $.each($('input[name="requirementtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'requirementtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#requirementtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#requirementtype_dependent_list_box').append($(
                '<div id="requirementtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="requirementtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge requirementtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#requirementtype_dependent_list_box').on('click', '.requirementtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="requirementtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#requirementtype_dependent_list_box').find('#requirementtype_list_item_' + entityId).remove();

      
   });
   var sb_requirement_rows_selected = [];
   var sb_requirementTable =  $('#sb_requirement-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_requirement-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "r_type_txt" },

            { data: "deliverable_txt" },

            { data: "r_asset_txt" },
            { data: "name" },

            { data: "create_date" },

            { data: "require_date" },

            { data: "budget_est" },

            { data: "description" },

            { data: "quantity" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="requirement_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#requirement_parent_params').length) {
                        parent_params = parent_params + $('#requirement_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=requirement&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="requirement" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_requirement_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_requirement-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_requirementTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_requirement_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_requirement_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_requirement_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_requirementTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_requirement-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_requirementTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_requirement-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_requirement-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_requirementTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_requirementTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-requirement-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_requirement_rows_selected, function(index, rowId){

        $.each($('input[name="requirement_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'requirement_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#requirement_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#requirement_dependent_list_box').append($(
                '<div id="requirement_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="requirement" ' + 
                        'data-entity-id="' + rowId + '" class="badge requirement_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#requirement_dependent_list_box').on('click', '.requirement_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="requirement_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#requirement_dependent_list_box').find('#requirement_list_item_' + entityId).remove();

      
   });
   var sb_requirerole_rows_selected = [];
   var sb_requireroleTable =  $('#sb_requirerole-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_requirerole-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "requirement_txt" },

            { data: "party_role_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },


            { data: "business_unit_txt" },
        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="requirementrole_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#requirementrole_parent_params').length) {
                        parent_params = parent_params + $('#requirementrole_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=requirementrole&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="requirementrole" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_requirerole_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_requirerole-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_requireroleTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_requirerole_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_requirerole_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_requirerole_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_requireroleTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_requirerole-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_requireroleTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_requirerole-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_requirerole-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_requireroleTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_requireroleTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-requirementrole-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_requirerole_rows_selected, function(index, rowId){

        $.each($('input[name="requirementrole_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'requirementrole_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#requirementrole_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#requirementrole_dependent_list_box').append($(
                '<div id="requirementrole_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="requirementrole" ' + 
                        'data-entity-id="' + rowId + '" class="badge requirementrole_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#requirementrole_dependent_list_box').on('click', '.requirementrole_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="requirementrole_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#requirementrole_dependent_list_box').find('#requirementrole_list_item_' + entityId).remove();

      
   });
   var sb_wetypecat_rows_selected = [];
   var sb_wetypecatTable =  $('#sb_wetypecat-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_wetypecat-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workeffortcategory_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workeffortcategory_parent_params').length) {
                        parent_params = parent_params + $('#workeffortcategory_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workeffortcategory&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workeffortcategory" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_wetypecat_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_wetypecat-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_wetypecatTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_wetypecat_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_wetypecat_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_wetypecat_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wetypecatTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_wetypecat-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_wetypecatTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_wetypecat-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_wetypecat-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_wetypecatTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wetypecatTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workeffortcategory-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_wetypecat_rows_selected, function(index, rowId){

        $.each($('input[name="workeffortcategory_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workeffortcategory_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workeffortcategory_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workeffortcategory_dependent_list_box').append($(
                '<div id="workeffortcategory_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workeffortcategory" ' + 
                        'data-entity-id="' + rowId + '" class="badge workeffortcategory_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workeffortcategory_dependent_list_box').on('click', '.workeffortcategory_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workeffortcategory_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workeffortcategory_dependent_list_box').find('#workeffortcategory_list_item_' + entityId).remove();

      
   });
   var sb_wetype_rows_selected = [];
   var sb_wetypeTable =  $('#sb_wetype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_wetype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workefforttype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workefforttype_parent_params').length) {
                        parent_params = parent_params + $('#workefforttype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workefforttype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workefforttype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_wetype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_wetype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_wetypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_wetype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_wetype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_wetype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wetypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_wetype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_wetypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_wetype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_wetype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_wetypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wetypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workefforttype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_wetype_rows_selected, function(index, rowId){

        $.each($('input[name="workefforttype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workefforttype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workefforttype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workefforttype_dependent_list_box').append($(
                '<div id="workefforttype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workefforttype" ' + 
                        'data-entity-id="' + rowId + '" class="badge workefforttype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workefforttype_dependent_list_box').on('click', '.workefforttype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workefforttype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workefforttype_dependent_list_box').find('#workefforttype_list_item_' + entityId).remove();

      
   });
   var sb_weptype_rows_selected = [];
   var sb_weptypeTable =  $('#sb_weptype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_weptype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workeffortpurposetype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workeffortpurposetype_parent_params').length) {
                        parent_params = parent_params + $('#workeffortpurposetype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workeffortpurposetype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workeffortpurposetype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_weptype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_weptype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_weptypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_weptype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_weptype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_weptype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_weptypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_weptype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_weptypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_weptype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_weptype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_weptypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_weptypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workeffortpurposetype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_weptype_rows_selected, function(index, rowId){

        $.each($('input[name="workeffortpurposetype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workeffortpurposetype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workeffortpurposetype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workeffortpurposetype_dependent_list_box').append($(
                '<div id="workeffortpurposetype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workeffortpurposetype" ' + 
                        'data-entity-id="' + rowId + '" class="badge workeffortpurposetype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workeffortpurposetype_dependent_list_box').on('click', '.workeffortpurposetype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workeffortpurposetype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workeffortpurposetype_dependent_list_box').find('#workeffortpurposetype_list_item_' + entityId).remove();

      
   });
   var sb_westatus_rows_selected = [];
   var sb_westatusTable =  $('#sb_westatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_westatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workeffortstatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workeffortstatus_parent_params').length) {
                        parent_params = parent_params + $('#workeffortstatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workeffortstatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workeffortstatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_westatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_westatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_westatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_westatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_westatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_westatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_westatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_westatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_westatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_westatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_westatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_westatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_westatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workeffortstatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_westatus_rows_selected, function(index, rowId){

        $.each($('input[name="workeffortstatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workeffortstatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workeffortstatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workeffortstatus_dependent_list_box').append($(
                '<div id="workeffortstatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workeffortstatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge workeffortstatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workeffortstatus_dependent_list_box').on('click', '.workeffortstatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workeffortstatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workeffortstatus_dependent_list_box').find('#workeffortstatus_list_item_' + entityId).remove();

      
   });
   var sb_workeffort_rows_selected = [];
   var sb_workeffortTable =  $('#sb_workeffort-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_workeffort-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "we_redone_via_txt" },

            { data: "type_txt" },

            { data: "wep_type_txt" },

            { data: "we_facility_txt" },
            { data: "name" },

            { data: "tot_dallowed" },

            { data: "tot_hallowed" },

            { data: "est_hours" },

            { data: "act_hours" },

            { data: "sched_start_date" },

            { data: "sched_end_date" },

            { data: "act_start_date" },

            { data: "act_end_date" },

            { data: "description" },


            { data: "status_txt" },
            { data: "special_terms" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workeffort_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workeffort_parent_params').length) {
                        parent_params = parent_params + $('#workeffort_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workeffort&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workeffort" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_workeffort_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_workeffort-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_workeffortTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_workeffort_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_workeffort_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_workeffort_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_workeffortTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_workeffort-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_workeffortTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_workeffort-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_workeffort-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_workeffortTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_workeffortTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workeffort-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_workeffort_rows_selected, function(index, rowId){

        $.each($('input[name="workeffort_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workeffort_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workeffort_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workeffort_dependent_list_box').append($(
                '<div id="workeffort_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workeffort" ' + 
                        'data-entity-id="' + rowId + '" class="badge workeffort_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workeffort_dependent_list_box').on('click', '.workeffort_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workeffort_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workeffort_dependent_list_box').find('#workeffort_list_item_' + entityId).remove();

      
   });
   var sb_wrfulfillment_rows_selected = [];
   var sb_wrfulfillmentTable =  $('#sb_wrfulfillment-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_wrfulfillment-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "wrf_requirement_txt" },

            { data: "wrf_workeffort_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workrequirementfulfillment_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workrequirementfulfillment_parent_params').length) {
                        parent_params = parent_params + $('#workrequirementfulfillment_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workrequirementfulfillment&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workrequirementfulfillment" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_wrfulfillment_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_wrfulfillment-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_wrfulfillmentTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_wrfulfillment_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_wrfulfillment_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_wrfulfillment_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wrfulfillmentTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_wrfulfillment-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_wrfulfillmentTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_wrfulfillment-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_wrfulfillment-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_wrfulfillmentTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wrfulfillmentTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workrequirementfulfillment-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_wrfulfillment_rows_selected, function(index, rowId){

        $.each($('input[name="workrequirementfulfillment_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workrequirementfulfillment_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workrequirementfulfillment_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workrequirementfulfillment_dependent_list_box').append($(
                '<div id="workrequirementfulfillment_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workrequirementfulfillment" ' + 
                        'data-entity-id="' + rowId + '" class="badge workrequirementfulfillment_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workrequirementfulfillment_dependent_list_box').on('click', '.workrequirementfulfillment_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workrequirementfulfillment_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workrequirementfulfillment_dependent_list_box').find('#workrequirementfulfillment_list_item_' + entityId).remove();

      
   });
   var sb_weatype_rows_selected = [];
   var sb_weatypeTable =  $('#sb_weatype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_weatype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workeffortassociationtype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workeffortassociationtype_parent_params').length) {
                        parent_params = parent_params + $('#workeffortassociationtype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workeffortassociationtype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workeffortassociationtype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_weatype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_weatype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_weatypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_weatype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_weatype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_weatype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_weatypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_weatype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_weatypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_weatype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_weatype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_weatypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_weatypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workeffortassociationtype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_weatype_rows_selected, function(index, rowId){

        $.each($('input[name="workeffortassociationtype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workeffortassociationtype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workeffortassociationtype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workeffortassociationtype_dependent_list_box').append($(
                '<div id="workeffortassociationtype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workeffortassociationtype" ' + 
                        'data-entity-id="' + rowId + '" class="badge workeffortassociationtype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workeffortassociationtype_dependent_list_box').on('click', '.workeffortassociationtype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workeffortassociationtype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workeffortassociationtype_dependent_list_box').find('#workeffortassociationtype_list_item_' + entityId).remove();

      
   });
   var sb_weassociation_rows_selected = [];
   var sb_weassociationTable =  $('#sb_weassociation-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_weassociation-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "wea_fworkeffort_txt" },

            { data: "wea_tworkeffort_txt" },
            { data: "name" },

            { data: "eff_from_date" },

            { data: "eff_to_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workeffortassociation_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workeffortassociation_parent_params').length) {
                        parent_params = parent_params + $('#workeffortassociation_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workeffortassociation&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workeffortassociation" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_weassociation_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_weassociation-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_weassociationTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_weassociation_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_weassociation_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_weassociation_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_weassociationTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_weassociation-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_weassociationTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_weassociation-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_weassociation-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_weassociationTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_weassociationTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workeffortassociation-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_weassociation_rows_selected, function(index, rowId){

        $.each($('input[name="workeffortassociation_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workeffortassociation_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workeffortassociation_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workeffortassociation_dependent_list_box').append($(
                '<div id="workeffortassociation_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workeffortassociation" ' + 
                        'data-entity-id="' + rowId + '" class="badge workeffortassociation_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workeffortassociation_dependent_list_box').on('click', '.workeffortassociation_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workeffortassociation_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workeffortassociation_dependent_list_box').find('#workeffortassociation_list_item_' + entityId).remove();

      
   });
   var sb_wertype_rows_selected = [];
   var sb_wertypeTable =  $('#sb_wertype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_wertype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workeffortroletype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workeffortroletype_parent_params').length) {
                        parent_params = parent_params + $('#workeffortroletype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workeffortroletype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workeffortroletype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_wertype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_wertype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_wertypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_wertype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_wertype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_wertype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wertypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_wertype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_wertypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_wertype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_wertype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_wertypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wertypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workeffortroletype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_wertype_rows_selected, function(index, rowId){

        $.each($('input[name="workeffortroletype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workeffortroletype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workeffortroletype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workeffortroletype_dependent_list_box').append($(
                '<div id="workeffortroletype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workeffortroletype" ' + 
                        'data-entity-id="' + rowId + '" class="badge workeffortroletype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workeffortroletype_dependent_list_box').on('click', '.workeffortroletype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workeffortroletype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workeffortroletype_dependent_list_box').find('#workeffortroletype_list_item_' + entityId).remove();

      
   });
   var sb_wepatyassign_rows_selected = [];
   var sb_wepatyassignTable =  $('#sb_wepatyassign-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_wepatyassign-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "wepa_party_txt" },

            { data: "wepa_roletype_txt" },

            { data: "wepa_bu_txt" },

            { data: "wepa_we_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workeffortpartyassignment_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workeffortpartyassignment_parent_params').length) {
                        parent_params = parent_params + $('#workeffortpartyassignment_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workeffortpartyassignment&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workeffortpartyassignment" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_wepatyassign_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_wepatyassign-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_wepatyassignTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_wepatyassign_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_wepatyassign_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_wepatyassign_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wepatyassignTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_wepatyassign-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_wepatyassignTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_wepatyassign-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_wepatyassign-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_wepatyassignTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wepatyassignTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workeffortpartyassignment-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_wepatyassign_rows_selected, function(index, rowId){

        $.each($('input[name="workeffortpartyassignment_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workeffortpartyassignment_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workeffortpartyassignment_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workeffortpartyassignment_dependent_list_box').append($(
                '<div id="workeffortpartyassignment_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workeffortpartyassignment" ' + 
                        'data-entity-id="' + rowId + '" class="badge workeffortpartyassignment_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workeffortpartyassignment_dependent_list_box').on('click', '.workeffortpartyassignment_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workeffortpartyassignment_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workeffortpartyassignment_dependent_list_box').find('#workeffortpartyassignment_list_item_' + entityId).remove();

      
   });
   var sb_timesheet_rows_selected = [];
   var sb_timesheetTable =  $('#sb_timesheet-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_timesheet-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "submitter_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="timesheet_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#timesheet_parent_params').length) {
                        parent_params = parent_params + $('#timesheet_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=timesheet&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="timesheet" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_timesheet_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_timesheet-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_timesheetTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_timesheet_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_timesheet_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_timesheet_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_timesheetTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_timesheet-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_timesheetTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_timesheet-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_timesheet-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_timesheetTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_timesheetTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-timesheet-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_timesheet_rows_selected, function(index, rowId){

        $.each($('input[name="timesheet_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'timesheet_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#timesheet_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#timesheet_dependent_list_box').append($(
                '<div id="timesheet_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="timesheet" ' + 
                        'data-entity-id="' + rowId + '" class="badge timesheet_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#timesheet_dependent_list_box').on('click', '.timesheet_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="timesheet_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#timesheet_dependent_list_box').find('#timesheet_list_item_' + entityId).remove();

      
   });
   var sb_tsrtype_rows_selected = [];
   var sb_tsrtypeTable =  $('#sb_tsrtype-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_tsrtype-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="timesheetroletype_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#timesheetroletype_parent_params').length) {
                        parent_params = parent_params + $('#timesheetroletype_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=timesheetroletype&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="timesheetroletype" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_tsrtype_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_tsrtype-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_tsrtypeTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_tsrtype_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_tsrtype_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_tsrtype_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_tsrtypeTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_tsrtype-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_tsrtypeTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_tsrtype-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_tsrtype-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_tsrtypeTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_tsrtypeTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-timesheetroletype-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_tsrtype_rows_selected, function(index, rowId){

        $.each($('input[name="timesheetroletype_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'timesheetroletype_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#timesheetroletype_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#timesheetroletype_dependent_list_box').append($(
                '<div id="timesheetroletype_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="timesheetroletype" ' + 
                        'data-entity-id="' + rowId + '" class="badge timesheetroletype_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#timesheetroletype_dependent_list_box').on('click', '.timesheetroletype_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="timesheetroletype_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#timesheetroletype_dependent_list_box').find('#timesheetroletype_list_item_' + entityId).remove();

      
   });
   var sb_tsrole_rows_selected = [];
   var sb_tsroleTable =  $('#sb_tsrole-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_tsrole-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "tsr_type_txt" },

            { data: "timesheet_txt" },

            { data: "party_txt" },
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="timesheetrole_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#timesheetrole_parent_params').length) {
                        parent_params = parent_params + $('#timesheetrole_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=timesheetrole&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="timesheetrole" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_tsrole_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_tsrole-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_tsroleTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_tsrole_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_tsrole_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_tsrole_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_tsroleTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_tsrole-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_tsroleTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_tsrole-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_tsrole-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_tsroleTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_tsroleTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-timesheetrole-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_tsrole_rows_selected, function(index, rowId){

        $.each($('input[name="timesheetrole_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'timesheetrole_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#timesheetrole_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#timesheetrole_dependent_list_box').append($(
                '<div id="timesheetrole_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="timesheetrole" ' + 
                        'data-entity-id="' + rowId + '" class="badge timesheetrole_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#timesheetrole_dependent_list_box').on('click', '.timesheetrole_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="timesheetrole_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#timesheetrole_dependent_list_box').find('#timesheetrole_list_item_' + entityId).remove();

      
   });
   var sb_timeentry_rows_selected = [];
   var sb_timeentryTable =  $('#sb_timeentry-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_timeentry-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "timesheet_txt" },

            { data: "workeffort_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "hours" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="timeentry_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#timeentry_parent_params').length) {
                        parent_params = parent_params + $('#timeentry_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=timeentry&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="timeentry" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_timeentry_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_timeentry-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_timeentryTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_timeentry_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_timeentry_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_timeentry_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_timeentryTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_timeentry-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_timeentryTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_timeentry-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_timeentry-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_timeentryTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_timeentryTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-timeentry-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_timeentry_rows_selected, function(index, rowId){

        $.each($('input[name="timeentry_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'timeentry_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#timeentry_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#timeentry_dependent_list_box').append($(
                '<div id="timeentry_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="timeentry" ' + 
                        'data-entity-id="' + rowId + '" class="badge timeentry_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#timeentry_dependent_list_box').on('click', '.timeentry_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="timeentry_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#timeentry_dependent_list_box').find('#timeentry_list_item_' + entityId).remove();

      
   });
   var sb_partyrate_rows_selected = [];
   var sb_partyrateTable =  $('#sb_partyrate-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_partyrate-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "party_txt" },

            { data: "rate_type_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "rate" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partyrate_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partyrate_parent_params').length) {
                        parent_params = parent_params + $('#partyrate_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partyrate&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partyrate" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_partyrate_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_partyrate-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_partyrateTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_partyrate_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_partyrate_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_partyrate_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyrateTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_partyrate-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_partyrateTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_partyrate-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_partyrate-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_partyrateTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_partyrateTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partyrate-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_partyrate_rows_selected, function(index, rowId){

        $.each($('input[name="partyrate_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partyrate_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partyrate_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partyrate_dependent_list_box').append($(
                '<div id="partyrate_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partyrate" ' + 
                        'data-entity-id="' + rowId + '" class="badge partyrate_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partyrate_dependent_list_box').on('click', '.partyrate_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partyrate_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partyrate_dependent_list_box').find('#partyrate_list_item_' + entityId).remove();

      
   });
   var sb_wearate_rows_selected = [];
   var sb_wearateTable =  $('#sb_wearate-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_wearate-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "weassignment_txt" },

            { data: "rate_type_txt" },
            { data: "name" },

            { data: "from_date" },

            { data: "to_date" },

            { data: "rate" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workeffortassignmentrate_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workeffortassignmentrate_parent_params').length) {
                        parent_params = parent_params + $('#workeffortassignmentrate_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workeffortassignmentrate&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workeffortassignmentrate" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_wearate_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_wearate-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_wearateTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_wearate_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_wearate_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_wearate_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wearateTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_wearate-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_wearateTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_wearate-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_wearate-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_wearateTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wearateTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workeffortassignmentrate-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_wearate_rows_selected, function(index, rowId){

        $.each($('input[name="workeffortassignmentrate_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workeffortassignmentrate_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workeffortassignmentrate_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workeffortassignmentrate_dependent_list_box').append($(
                '<div id="workeffortassignmentrate_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workeffortassignmentrate" ' + 
                        'data-entity-id="' + rowId + '" class="badge workeffortassignmentrate_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workeffortassignmentrate_dependent_list_box').on('click', '.workeffortassignmentrate_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workeffortassignmentrate_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workeffortassignmentrate_dependent_list_box').find('#workeffortassignmentrate_list_item_' + entityId).remove();

      
   });
   var sb_weiassign_rows_selected = [];
   var sb_weiassignTable =  $('#sb_weiassign-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_weiassign-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "inventory_item_txt" },

            { data: "workeffort_txt" },
            { data: "name" },

            { data: "quantity" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workeffortinventoryassignment_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workeffortinventoryassignment_parent_params').length) {
                        parent_params = parent_params + $('#workeffortinventoryassignment_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workeffortinventoryassignment&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workeffortinventoryassignment" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_weiassign_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_weiassign-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_weiassignTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_weiassign_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_weiassign_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_weiassign_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_weiassignTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_weiassign-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_weiassignTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_weiassign-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_weiassign-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_weiassignTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_weiassignTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workeffortinventoryassignment-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_weiassign_rows_selected, function(index, rowId){

        $.each($('input[name="workeffortinventoryassignment_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workeffortinventoryassignment_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workeffortinventoryassignment_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workeffortinventoryassignment_dependent_list_box').append($(
                '<div id="workeffortinventoryassignment_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workeffortinventoryassignment" ' + 
                        'data-entity-id="' + rowId + '" class="badge workeffortinventoryassignment_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workeffortinventoryassignment_dependent_list_box').on('click', '.workeffortinventoryassignment_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workeffortinventoryassignment_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workeffortinventoryassignment_dependent_list_box').find('#workeffortinventoryassignment_list_item_' + entityId).remove();

      
   });
   var sb_weaastatus_rows_selected = [];
   var sb_weaastatusTable =  $('#sb_weaastatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_weaastatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workeffortassetassignmentstatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workeffortassetassignmentstatus_parent_params').length) {
                        parent_params = parent_params + $('#workeffortassetassignmentstatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workeffortassetassignmentstatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workeffortassetassignmentstatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_weaastatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_weaastatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_weaastatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_weaastatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_weaastatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_weaastatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_weaastatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_weaastatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_weaastatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_weaastatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_weaastatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_weaastatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_weaastatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workeffortassetassignmentstatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_weaastatus_rows_selected, function(index, rowId){

        $.each($('input[name="workeffortassetassignmentstatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workeffortassetassignmentstatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workeffortassetassignmentstatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workeffortassetassignmentstatus_dependent_list_box').append($(
                '<div id="workeffortassetassignmentstatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workeffortassetassignmentstatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge workeffortassetassignmentstatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workeffortassetassignmentstatus_dependent_list_box').on('click', '.workeffortassetassignmentstatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workeffortassetassignmentstatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workeffortassetassignmentstatus_dependent_list_box').find('#workeffortassetassignmentstatus_list_item_' + entityId).remove();

      
   });
   var sb_weaassign_rows_selected = [];
   var sb_weaassignTable =  $('#sb_weaassign-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_weaassign-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "weaa_asset_txt" },

            { data: "workeffort_txt" },

            { data: "status_txt" },
            { data: "from_date" },

            { data: "to_date" },

            { data: "name" },

            { data: "alloc_cost" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workeffortassetassignment_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workeffortassetassignment_parent_params').length) {
                        parent_params = parent_params + $('#workeffortassetassignment_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workeffortassetassignment&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workeffortassetassignment" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_weaassign_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_weaassign-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_weaassignTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_weaassign_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_weaassign_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_weaassign_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_weaassignTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_weaassign-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_weaassignTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_weaassign-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_weaassign-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_weaassignTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_weaassignTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workeffortassetassignment-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_weaassign_rows_selected, function(index, rowId){

        $.each($('input[name="workeffortassetassignment_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workeffortassetassignment_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workeffortassetassignment_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workeffortassetassignment_dependent_list_box').append($(
                '<div id="workeffortassetassignment_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workeffortassetassignment" ' + 
                        'data-entity-id="' + rowId + '" class="badge workeffortassetassignment_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workeffortassetassignment_dependent_list_box').on('click', '.workeffortassetassignment_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workeffortassetassignment_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workeffortassetassignment_dependent_list_box').find('#workeffortassetassignment_list_item_' + entityId).remove();

      
   });
   var sb_wepastatus_rows_selected = [];
   var sb_wepastatusTable =  $('#sb_wepastatus-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_wepastatus-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 
            { data: "name" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partyfassetassignmentstatus_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partyfassetassignmentstatus_parent_params').length) {
                        parent_params = parent_params + $('#partyfassetassignmentstatus_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partyfassetassignmentstatus&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partyfassetassignmentstatus" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_wepastatus_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_wepastatus-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_wepastatusTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_wepastatus_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_wepastatus_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_wepastatus_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wepastatusTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_wepastatus-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_wepastatusTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_wepastatus-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_wepastatus-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_wepastatusTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wepastatusTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partyfassetassignmentstatus-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_wepastatus_rows_selected, function(index, rowId){

        $.each($('input[name="partyfassetassignmentstatus_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partyfassetassignmentstatus_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partyfassetassignmentstatus_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partyfassetassignmentstatus_dependent_list_box').append($(
                '<div id="partyfassetassignmentstatus_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partyfassetassignmentstatus" ' + 
                        'data-entity-id="' + rowId + '" class="badge partyfassetassignmentstatus_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partyfassetassignmentstatus_dependent_list_box').on('click', '.partyfassetassignmentstatus_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partyfassetassignmentstatus_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partyfassetassignmentstatus_dependent_list_box').find('#partyfassetassignmentstatus_list_item_' + entityId).remove();

      
   });
   var sb_paassign_rows_selected = [];
   var sb_paassignTable =  $('#sb_paassign-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_paassign-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "pas_asset_txt" },

            { data: "party_txt" },

            { data: "status_txt" },
            { data: "from_date" },

            { data: "to_date" },

            { data: "name" },

            { data: "alloc_cost" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="partyassetassignment_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#partyassetassignment_parent_params').length) {
                        parent_params = parent_params + $('#partyassetassignment_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=partyassetassignment&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="partyassetassignment" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_paassign_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_paassign-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_paassignTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_paassign_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_paassign_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_paassign_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_paassignTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_paassign-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_paassignTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_paassign-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_paassign-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_paassignTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_paassignTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-partyassetassignment-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_paassign_rows_selected, function(index, rowId){

        $.each($('input[name="partyassetassignment_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'partyassetassignment_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#partyassetassignment_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#partyassetassignment_dependent_list_box').append($(
                '<div id="partyassetassignment_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="partyassetassignment" ' + 
                        'data-entity-id="' + rowId + '" class="badge partyassetassignment_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#partyassetassignment_dependent_list_box').on('click', '.partyassetassignment_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="partyassetassignment_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#partyassetassignment_dependent_list_box').find('#partyassetassignment_list_item_' + entityId).remove();

      
   });
   var sb_wedeliverable_rows_selected = [];
   var sb_wedeliverableTable =  $('#sb_wedeliverable-multi-list-table').DataTable({
        "ajax": {
            'type': 'POST',
            'url': shadowcore_ajax_script.ajaxurl,
            'data': function(d){
               d.action = 'find_entity_ajax';
               d.form = $("#sb_wedeliverable-multi-list-form").serializeArray();
            },
        },
        columns: [
            { data: "id" }, 

            { data: "deliverable_txt" },

            { data: "workeffort_txt" },
            { data: "name" },

            { data: "alloc_cost" },

            { data: "description" },

        ],
        columnDefs: [
            {
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'className': 'dt-body-center',
                'render': function (data, type, row){
                    return '<input id="workeffortdeliverable_' + row.id + '" type="checkbox" value="' + row.id + '" data-dependent-instance-name="' + row.name + '">';
                },
            },
            {
                // The `data` parameter refers to the data for the cell (defined by the
                // `data` option, which defaults to the column being worked with, in
                // this case `data: 0`.
                "render": function ( data, type, row ) {
                    var parent_params = '';
                    if($('#workeffortdeliverable_parent_params').length) {
                        parent_params = parent_params + $('#workeffortdeliverable_parent_params').val(); 
                    }
                    return '<a class="data-table-link" href="' + shadowcore_base_url.baseUrl + 'artifact=workeffortdeliverable&id=' + row.id + '&page_action=view' + parent_params + '" data-related-artifact-name="workeffortdeliverable" data-related-instance-name="' + row.name + '" data-related-instance-id="' + row.id + '">' + data +  '</a>';
                },
                "targets": 1
            }
        ],
        'order': [[1, 'asc']],
        'rowCallback': function(row, data, dataIndex){
         // Get row ID
         var rowId = data[0];

         // If row ID is in the list of selected row IDs
         if($.inArray(rowId, sb_wedeliverable_rows_selected) !== -1){
            $(row).find('input[type="checkbox"]').prop('checked', true);
            $(row).addClass('selected');
         }
        }
    });

   // Handle click on checkbox
   $('#sb_wedeliverable-multi-list-table tbody').on('click', 'input[type="checkbox"]', function(e){
      var $row = $(this).closest('tr');
      // Get row data
      var data = sb_wedeliverableTable.row($row).data();
      // Get row ID
      var rowId = $(this).val();
      // Determine whether row ID is in the list of selected row IDs 
      var index = $.inArray(rowId, sb_wedeliverable_rows_selected);
      console.log('This is index:' + index);
      // If checkbox is checked and row ID is not in list of selected row IDs
      if(this.checked && index === -1){
         console.log('This is checked and index:' + index);
         sb_wedeliverable_rows_selected.push(rowId);
      // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
      } else if (!this.checked && index !== -1){
         sb_wedeliverable_rows_selected.splice(index, 1);
         console.log('This is not checked and index:' + index);
      }
      if(this.checked){
         $row.css('background-color', 'rgba(255, 152, 0, 0.5)');
      } else {
         $row.css('background-color', 'rgba(255, 152, 0, 0)');
      }
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wedeliverableTable);
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle click on table cells with checkboxes
   $('#sb_wedeliverable-multi-list-table').on('click', 'tbody td, thead th:first-child', function(e){
      $(this).parent().find('input[type="checkbox"]').trigger('click');
   });

   // Handle click on "Select all" control
   $('thead input[name="select_all"]', sb_wedeliverableTable.table().container()).on('click', function(e){
      if(this.checked){
         $('#sb_wedeliverable-multi-list-table tbody input[type="checkbox"]:not(:checked)').trigger('click');
      } else {
         $('#sb_wedeliverable-multi-list-table tbody input[type="checkbox"]:checked').trigger('click');
      }
      // Prevent click event from propagating to parent
      e.stopPropagation();
   });

   // Handle table draw event
   sb_wedeliverableTable.on('draw', function(){
      // Update state of "Select all" control
      updateDataTableSelectAllCtrl(sb_wedeliverableTable);
   });

   /* Add all check rows in the data table */
   $('body').on('click', '#add-selected-workeffortdeliverable-list-btn', function(e){
      e.preventDefault();
      var page_artifact_form = $('#main-entity-post-name').val();
      // Iterate over all selected checkboxes
      var idExists = false;
      $.each(sb_wedeliverable_rows_selected, function(index, rowId){

        $.each($('input[name="workeffortdeliverable_id[]"]'), function(indexx){ 
            var valueToAdd = $(this).val();
            if(valueToAdd === rowId){
              idExists = true;
            }

        });
        if(!idExists){
          // Add the id of the selected row as a hidden input in the 
          // main form 
           $('#' + page_artifact_form).append(
               $('<input>')
                  .attr('type', 'hidden')
                  .attr('name', 'workeffortdeliverable_id[]')
                  .val(rowId)
           );
           // Get the value of the name column. Every entity data table has name and description columns
           var dependentInstanceName = $('#workeffortdeliverable_' + rowId).data('dependent-instance-name');
           // Add an entry into the visual list of select instances
           $('#workeffortdeliverable_dependent_list_box').append($(
                '<div id="workeffortdeliverable_list_item_' + rowId + '"> ' + 
                    '<span data-entity-name="workeffortdeliverable" ' + 
                        'data-entity-id="' + rowId + '" class="badge workeffortdeliverable_dependent_list_item" ' + 
                        'style="cursor: pointer; cursor: hand; background-color: red">X</span>' + dependentInstanceName + 
                '</div>').attr('class', 'list-group-item'));
        }
      });
   });
    // Handle click on table cells with checkboxes
   $('#workeffortdeliverable_dependent_list_box').on('click', '.workeffortdeliverable_dependent_list_item', function(e){
      var entityId = $(this).data('entity-id');
      var entityName = $(this).data('entity-name');
      var page_artifact_form = $('#main-entity-post-name').val();
      // first remove the hidden form field and then the list box item
      var existingIds = $('#' + page_artifact_form).find('input[name="workeffortdeliverable_id[]"]');
      $.each(existingIds, function(index, rowId){ 
        if($(rowId).val() == entityId) {
          $(rowId).remove();
        }

      });
      // then remove the list box item
      $('#workeffortdeliverable_dependent_list_box').find('#workeffortdeliverable_list_item_' + entityId).remove();

      
   });

});